
DirMk1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005350  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080054f0  080054f0  000154f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005550  08005550  00015550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005558  08005558  00015558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800555c  0800555c  0001555c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  08005560  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000432c  20000010  08005570  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000433c  08005570  0002433c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00029c4b  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000047c8  00000000  00000000  00049c8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00011673  00000000  00000000  0004e453  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000017b8  00000000  00000000  0005fac8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001728  00000000  00000000  00061280  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0001ba22  00000000  00000000  000629a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00014bbe  00000000  00000000  0007e3ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0009929d  00000000  00000000  00092f88  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0012c225  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000043b4  00000000  00000000  0012c2a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080054d8 	.word	0x080054d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	080054d8 	.word	0x080054d8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004e0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004e2:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <HAL_Init+0x30>)
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80004ea:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80004f2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80004fa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004fc:	2003      	movs	r0, #3
 80004fe:	f000 f82f 	bl	8000560 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000502:	2000      	movs	r0, #0
 8000504:	f004 feea 	bl	80052dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000508:	f004 fcfa 	bl	8004f00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800050c:	2000      	movs	r0, #0
 800050e:	bd08      	pop	{r3, pc}
 8000510:	40023c00 	.word	0x40023c00

08000514 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000514:	4a03      	ldr	r2, [pc, #12]	; (8000524 <HAL_IncTick+0x10>)
 8000516:	6811      	ldr	r1, [r2, #0]
 8000518:	4b03      	ldr	r3, [pc, #12]	; (8000528 <HAL_IncTick+0x14>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	440b      	add	r3, r1
 800051e:	6013      	str	r3, [r2, #0]
}
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	20003d90 	.word	0x20003d90
 8000528:	20000000 	.word	0x20000000

0800052c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800052c:	4b01      	ldr	r3, [pc, #4]	; (8000534 <HAL_GetTick+0x8>)
 800052e:	6818      	ldr	r0, [r3, #0]
}
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	20003d90 	.word	0x20003d90

08000538 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000538:	b538      	push	{r3, r4, r5, lr}
 800053a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800053c:	f7ff fff6 	bl	800052c <HAL_GetTick>
 8000540:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000542:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000546:	d002      	beq.n	800054e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000548:	4b04      	ldr	r3, [pc, #16]	; (800055c <HAL_Delay+0x24>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800054e:	f7ff ffed 	bl	800052c <HAL_GetTick>
 8000552:	1b40      	subs	r0, r0, r5
 8000554:	42a0      	cmp	r0, r4
 8000556:	d3fa      	bcc.n	800054e <HAL_Delay+0x16>
  {
  }
}
 8000558:	bd38      	pop	{r3, r4, r5, pc}
 800055a:	bf00      	nop
 800055c:	20000000 	.word	0x20000000

08000560 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000560:	4a07      	ldr	r2, [pc, #28]	; (8000580 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000562:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000564:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000568:	041b      	lsls	r3, r3, #16
 800056a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800056c:	0200      	lsls	r0, r0, #8
 800056e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000572:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8000574:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000578:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800057c:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800057e:	4770      	bx	lr
 8000580:	e000ed00 	.word	0xe000ed00

08000584 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000584:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000586:	4b17      	ldr	r3, [pc, #92]	; (80005e4 <HAL_NVIC_SetPriority+0x60>)
 8000588:	68db      	ldr	r3, [r3, #12]
 800058a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800058e:	f1c3 0407 	rsb	r4, r3, #7
 8000592:	2c04      	cmp	r4, #4
 8000594:	bf28      	it	cs
 8000596:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000598:	1d1d      	adds	r5, r3, #4
 800059a:	2d06      	cmp	r5, #6
 800059c:	d918      	bls.n	80005d0 <HAL_NVIC_SetPriority+0x4c>
 800059e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005a0:	f04f 35ff 	mov.w	r5, #4294967295
 80005a4:	fa05 f404 	lsl.w	r4, r5, r4
 80005a8:	ea21 0104 	bic.w	r1, r1, r4
 80005ac:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005ae:	fa05 f303 	lsl.w	r3, r5, r3
 80005b2:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005b6:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 80005b8:	2800      	cmp	r0, #0
 80005ba:	db0b      	blt.n	80005d4 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005bc:	0109      	lsls	r1, r1, #4
 80005be:	b2c9      	uxtb	r1, r1
 80005c0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80005c4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80005c8:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80005cc:	bc30      	pop	{r4, r5}
 80005ce:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005d0:	2300      	movs	r3, #0
 80005d2:	e7e5      	b.n	80005a0 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d4:	f000 000f 	and.w	r0, r0, #15
 80005d8:	0109      	lsls	r1, r1, #4
 80005da:	b2c9      	uxtb	r1, r1
 80005dc:	4b02      	ldr	r3, [pc, #8]	; (80005e8 <HAL_NVIC_SetPriority+0x64>)
 80005de:	5419      	strb	r1, [r3, r0]
 80005e0:	e7f4      	b.n	80005cc <HAL_NVIC_SetPriority+0x48>
 80005e2:	bf00      	nop
 80005e4:	e000ed00 	.word	0xe000ed00
 80005e8:	e000ed14 	.word	0xe000ed14

080005ec <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80005ec:	f000 021f 	and.w	r2, r0, #31
 80005f0:	0940      	lsrs	r0, r0, #5
 80005f2:	2301      	movs	r3, #1
 80005f4:	4093      	lsls	r3, r2
 80005f6:	4a02      	ldr	r2, [pc, #8]	; (8000600 <HAL_NVIC_EnableIRQ+0x14>)
 80005f8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	e000e100 	.word	0xe000e100

08000604 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000604:	6802      	ldr	r2, [r0, #0]
 8000606:	b2d3      	uxtb	r3, r2
 8000608:	3b10      	subs	r3, #16
 800060a:	490b      	ldr	r1, [pc, #44]	; (8000638 <DMA_CalcBaseAndBitshift+0x34>)
 800060c:	fba1 1303 	umull	r1, r3, r1, r3
 8000610:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000612:	490a      	ldr	r1, [pc, #40]	; (800063c <DMA_CalcBaseAndBitshift+0x38>)
 8000614:	5cc9      	ldrb	r1, [r1, r3]
 8000616:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000618:	2b03      	cmp	r3, #3
 800061a:	d806      	bhi.n	800062a <DMA_CalcBaseAndBitshift+0x26>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800061c:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8000620:	f022 0203 	bic.w	r2, r2, #3
 8000624:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8000626:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000628:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800062a:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 800062e:	f022 0203 	bic.w	r2, r2, #3
 8000632:	3204      	adds	r2, #4
 8000634:	6582      	str	r2, [r0, #88]	; 0x58
 8000636:	e7f6      	b.n	8000626 <DMA_CalcBaseAndBitshift+0x22>
 8000638:	aaaaaaab 	.word	0xaaaaaaab
 800063c:	080054f0 	.word	0x080054f0

08000640 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000640:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000642:	6982      	ldr	r2, [r0, #24]
 8000644:	b992      	cbnz	r2, 800066c <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8000646:	2b01      	cmp	r3, #1
 8000648:	d00a      	beq.n	8000660 <DMA_CheckFifoParam+0x20>
 800064a:	b11b      	cbz	r3, 8000654 <DMA_CheckFifoParam+0x14>
 800064c:	2b02      	cmp	r3, #2
 800064e:	d001      	beq.n	8000654 <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8000650:	2000      	movs	r0, #0
 8000652:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000654:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000656:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800065a:	d12c      	bne.n	80006b6 <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 800065c:	2000      	movs	r0, #0
 800065e:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000660:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000662:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000666:	d028      	beq.n	80006ba <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8000668:	2000      	movs	r0, #0
 800066a:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800066c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000670:	d005      	beq.n	800067e <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000672:	2b02      	cmp	r3, #2
 8000674:	d929      	bls.n	80006ca <DMA_CheckFifoParam+0x8a>
 8000676:	2b03      	cmp	r3, #3
 8000678:	d015      	beq.n	80006a6 <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 800067a:	2000      	movs	r0, #0
 800067c:	4770      	bx	lr
    switch (tmp)
 800067e:	2b03      	cmp	r3, #3
 8000680:	d803      	bhi.n	800068a <DMA_CheckFifoParam+0x4a>
 8000682:	e8df f003 	tbb	[pc, r3]
 8000686:	041c      	.short	0x041c
 8000688:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 800068a:	2000      	movs	r0, #0
 800068c:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800068e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000690:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8000694:	d115      	bne.n	80006c2 <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 8000696:	2000      	movs	r0, #0
 8000698:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800069a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800069c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80006a0:	d011      	beq.n	80006c6 <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 80006a2:	2000      	movs	r0, #0
 80006a4:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80006a6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80006a8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80006ac:	d001      	beq.n	80006b2 <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 80006ae:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 80006b0:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 80006b2:	2000      	movs	r0, #0
 80006b4:	4770      	bx	lr
        status = HAL_ERROR;
 80006b6:	2001      	movs	r0, #1
 80006b8:	4770      	bx	lr
        status = HAL_ERROR;
 80006ba:	2001      	movs	r0, #1
 80006bc:	4770      	bx	lr
      status = HAL_ERROR;
 80006be:	2001      	movs	r0, #1
 80006c0:	4770      	bx	lr
        status = HAL_ERROR;
 80006c2:	2001      	movs	r0, #1
 80006c4:	4770      	bx	lr
        status = HAL_ERROR;
 80006c6:	2001      	movs	r0, #1
 80006c8:	4770      	bx	lr
      status = HAL_ERROR;
 80006ca:	2001      	movs	r0, #1
 80006cc:	4770      	bx	lr
	...

080006d0 <HAL_DMA_Init>:
{
 80006d0:	b570      	push	{r4, r5, r6, lr}
 80006d2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80006d4:	f7ff ff2a 	bl	800052c <HAL_GetTick>
  if(hdma == NULL)
 80006d8:	2c00      	cmp	r4, #0
 80006da:	d05b      	beq.n	8000794 <HAL_DMA_Init+0xc4>
 80006dc:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 80006de:	2300      	movs	r3, #0
 80006e0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80006e4:	2302      	movs	r3, #2
 80006e6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80006ea:	6822      	ldr	r2, [r4, #0]
 80006ec:	6813      	ldr	r3, [r2, #0]
 80006ee:	f023 0301 	bic.w	r3, r3, #1
 80006f2:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80006f4:	6823      	ldr	r3, [r4, #0]
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	f012 0f01 	tst.w	r2, #1
 80006fc:	d00a      	beq.n	8000714 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80006fe:	f7ff ff15 	bl	800052c <HAL_GetTick>
 8000702:	1b40      	subs	r0, r0, r5
 8000704:	2805      	cmp	r0, #5
 8000706:	d9f5      	bls.n	80006f4 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000708:	2320      	movs	r3, #32
 800070a:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800070c:	2003      	movs	r0, #3
 800070e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8000712:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8000714:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000716:	4820      	ldr	r0, [pc, #128]	; (8000798 <HAL_DMA_Init+0xc8>)
 8000718:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800071a:	6861      	ldr	r1, [r4, #4]
 800071c:	68a2      	ldr	r2, [r4, #8]
 800071e:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000720:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000722:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000724:	6921      	ldr	r1, [r4, #16]
 8000726:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000728:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800072a:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800072c:	69a1      	ldr	r1, [r4, #24]
 800072e:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8000730:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000732:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8000734:	6a21      	ldr	r1, [r4, #32]
 8000736:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000738:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800073a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800073c:	2904      	cmp	r1, #4
 800073e:	d01e      	beq.n	800077e <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8000740:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8000742:	6826      	ldr	r6, [r4, #0]
 8000744:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000746:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 800074a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800074c:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800074e:	2b04      	cmp	r3, #4
 8000750:	d107      	bne.n	8000762 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8000752:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000754:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000756:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000758:	b11b      	cbz	r3, 8000762 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800075a:	4620      	mov	r0, r4
 800075c:	f7ff ff70 	bl	8000640 <DMA_CheckFifoParam>
 8000760:	b990      	cbnz	r0, 8000788 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8000762:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000764:	4620      	mov	r0, r4
 8000766:	f7ff ff4d 	bl	8000604 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800076a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800076c:	233f      	movs	r3, #63	; 0x3f
 800076e:	4093      	lsls	r3, r2
 8000770:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000772:	2000      	movs	r0, #0
 8000774:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000776:	2301      	movs	r3, #1
 8000778:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800077c:	e7c9      	b.n	8000712 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800077e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000780:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000782:	4301      	orrs	r1, r0
 8000784:	430a      	orrs	r2, r1
 8000786:	e7db      	b.n	8000740 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000788:	2340      	movs	r3, #64	; 0x40
 800078a:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800078c:	2001      	movs	r0, #1
 800078e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8000792:	e7be      	b.n	8000712 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8000794:	2001      	movs	r0, #1
 8000796:	e7bc      	b.n	8000712 <HAL_DMA_Init+0x42>
 8000798:	f010803f 	.word	0xf010803f

0800079c <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800079c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	2b02      	cmp	r3, #2
 80007a4:	d003      	beq.n	80007ae <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80007a6:	2380      	movs	r3, #128	; 0x80
 80007a8:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80007aa:	2001      	movs	r0, #1
 80007ac:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 80007ae:	2305      	movs	r3, #5
 80007b0:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80007b4:	6802      	ldr	r2, [r0, #0]
 80007b6:	6813      	ldr	r3, [r2, #0]
 80007b8:	f023 0301 	bic.w	r3, r3, #1
 80007bc:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80007be:	2000      	movs	r0, #0
}
 80007c0:	4770      	bx	lr
	...

080007c4 <HAL_DMA_IRQHandler>:
{
 80007c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007c6:	b083      	sub	sp, #12
 80007c8:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 80007ca:	2300      	movs	r3, #0
 80007cc:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80007ce:	4b72      	ldr	r3, [pc, #456]	; (8000998 <HAL_DMA_IRQHandler+0x1d4>)
 80007d0:	681d      	ldr	r5, [r3, #0]
 80007d2:	4b72      	ldr	r3, [pc, #456]	; (800099c <HAL_DMA_IRQHandler+0x1d8>)
 80007d4:	fba3 3505 	umull	r3, r5, r3, r5
 80007d8:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80007da:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 80007dc:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80007de:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80007e0:	2308      	movs	r3, #8
 80007e2:	4093      	lsls	r3, r2
 80007e4:	4233      	tst	r3, r6
 80007e6:	d010      	beq.n	800080a <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80007e8:	6803      	ldr	r3, [r0, #0]
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	f012 0f04 	tst.w	r2, #4
 80007f0:	d00b      	beq.n	800080a <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	f022 0204 	bic.w	r2, r2, #4
 80007f8:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80007fa:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80007fc:	2308      	movs	r3, #8
 80007fe:	4093      	lsls	r3, r2
 8000800:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000802:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800080a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800080c:	2301      	movs	r3, #1
 800080e:	4093      	lsls	r3, r2
 8000810:	4233      	tst	r3, r6
 8000812:	d009      	beq.n	8000828 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000814:	6822      	ldr	r2, [r4, #0]
 8000816:	6952      	ldr	r2, [r2, #20]
 8000818:	f012 0f80 	tst.w	r2, #128	; 0x80
 800081c:	d004      	beq.n	8000828 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800081e:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000820:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000822:	f043 0302 	orr.w	r3, r3, #2
 8000826:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000828:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800082a:	2304      	movs	r3, #4
 800082c:	4093      	lsls	r3, r2
 800082e:	4233      	tst	r3, r6
 8000830:	d009      	beq.n	8000846 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000832:	6822      	ldr	r2, [r4, #0]
 8000834:	6812      	ldr	r2, [r2, #0]
 8000836:	f012 0f02 	tst.w	r2, #2
 800083a:	d004      	beq.n	8000846 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800083c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800083e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000840:	f043 0304 	orr.w	r3, r3, #4
 8000844:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000846:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000848:	2310      	movs	r3, #16
 800084a:	4093      	lsls	r3, r2
 800084c:	4233      	tst	r3, r6
 800084e:	d024      	beq.n	800089a <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000850:	6822      	ldr	r2, [r4, #0]
 8000852:	6812      	ldr	r2, [r2, #0]
 8000854:	f012 0f08 	tst.w	r2, #8
 8000858:	d01f      	beq.n	800089a <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800085a:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800085c:	6823      	ldr	r3, [r4, #0]
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8000864:	d00d      	beq.n	8000882 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800086c:	d104      	bne.n	8000878 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 800086e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000870:	b19b      	cbz	r3, 800089a <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8000872:	4620      	mov	r0, r4
 8000874:	4798      	blx	r3
 8000876:	e010      	b.n	800089a <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000878:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800087a:	b173      	cbz	r3, 800089a <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 800087c:	4620      	mov	r0, r4
 800087e:	4798      	blx	r3
 8000880:	e00b      	b.n	800089a <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	f412 7f80 	tst.w	r2, #256	; 0x100
 8000888:	d103      	bne.n	8000892 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	f022 0208 	bic.w	r2, r2, #8
 8000890:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8000892:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000894:	b10b      	cbz	r3, 800089a <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8000896:	4620      	mov	r0, r4
 8000898:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800089a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800089c:	2320      	movs	r3, #32
 800089e:	4093      	lsls	r3, r2
 80008a0:	4233      	tst	r3, r6
 80008a2:	d055      	beq.n	8000950 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80008a4:	6822      	ldr	r2, [r4, #0]
 80008a6:	6812      	ldr	r2, [r2, #0]
 80008a8:	f012 0f10 	tst.w	r2, #16
 80008ac:	d050      	beq.n	8000950 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80008ae:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80008b0:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	2b05      	cmp	r3, #5
 80008b8:	d00e      	beq.n	80008d8 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80008ba:	6823      	ldr	r3, [r4, #0]
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80008c2:	d033      	beq.n	800092c <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80008ca:	d12a      	bne.n	8000922 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 80008cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d03e      	beq.n	8000950 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 80008d2:	4620      	mov	r0, r4
 80008d4:	4798      	blx	r3
 80008d6:	e03b      	b.n	8000950 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80008d8:	6822      	ldr	r2, [r4, #0]
 80008da:	6813      	ldr	r3, [r2, #0]
 80008dc:	f023 0316 	bic.w	r3, r3, #22
 80008e0:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80008e2:	6822      	ldr	r2, [r4, #0]
 80008e4:	6953      	ldr	r3, [r2, #20]
 80008e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80008ea:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80008ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80008ee:	b1a3      	cbz	r3, 800091a <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80008f0:	6822      	ldr	r2, [r4, #0]
 80008f2:	6813      	ldr	r3, [r2, #0]
 80008f4:	f023 0308 	bic.w	r3, r3, #8
 80008f8:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80008fa:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80008fc:	233f      	movs	r3, #63	; 0x3f
 80008fe:	4093      	lsls	r3, r2
 8000900:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8000902:	2300      	movs	r3, #0
 8000904:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000908:	2301      	movs	r3, #1
 800090a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 800090e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000910:	2b00      	cmp	r3, #0
 8000912:	d03f      	beq.n	8000994 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8000914:	4620      	mov	r0, r4
 8000916:	4798      	blx	r3
 8000918:	e03c      	b.n	8000994 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800091a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800091c:	2b00      	cmp	r3, #0
 800091e:	d1e7      	bne.n	80008f0 <HAL_DMA_IRQHandler+0x12c>
 8000920:	e7eb      	b.n	80008fa <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8000922:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000924:	b1a3      	cbz	r3, 8000950 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8000926:	4620      	mov	r0, r4
 8000928:	4798      	blx	r3
 800092a:	e011      	b.n	8000950 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8000932:	d109      	bne.n	8000948 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	f022 0210 	bic.w	r2, r2, #16
 800093a:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 800093c:	2300      	movs	r3, #0
 800093e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000942:	2301      	movs	r3, #1
 8000944:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8000948:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800094a:	b10b      	cbz	r3, 8000950 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 800094c:	4620      	mov	r0, r4
 800094e:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000950:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000952:	b1fb      	cbz	r3, 8000994 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000954:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000956:	f013 0f01 	tst.w	r3, #1
 800095a:	d017      	beq.n	800098c <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 800095c:	2305      	movs	r3, #5
 800095e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000962:	6822      	ldr	r2, [r4, #0]
 8000964:	6813      	ldr	r3, [r2, #0]
 8000966:	f023 0301 	bic.w	r3, r3, #1
 800096a:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 800096c:	9b01      	ldr	r3, [sp, #4]
 800096e:	3301      	adds	r3, #1
 8000970:	9301      	str	r3, [sp, #4]
 8000972:	42ab      	cmp	r3, r5
 8000974:	d804      	bhi.n	8000980 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000976:	6823      	ldr	r3, [r4, #0]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f013 0f01 	tst.w	r3, #1
 800097e:	d1f5      	bne.n	800096c <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8000980:	2300      	movs	r3, #0
 8000982:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000986:	2301      	movs	r3, #1
 8000988:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 800098c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800098e:	b10b      	cbz	r3, 8000994 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8000990:	4620      	mov	r0, r4
 8000992:	4798      	blx	r3
}
 8000994:	b003      	add	sp, #12
 8000996:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000998:	2000000c 	.word	0x2000000c
 800099c:	1b4e81b5 	.word	0x1b4e81b5

080009a0 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80009a0:	2300      	movs	r3, #0
 80009a2:	2b0f      	cmp	r3, #15
 80009a4:	f200 80c5 	bhi.w	8000b32 <HAL_GPIO_Init+0x192>
{
 80009a8:	b4f0      	push	{r4, r5, r6, r7}
 80009aa:	b082      	sub	sp, #8
 80009ac:	e039      	b.n	8000a22 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009ae:	2204      	movs	r2, #4
 80009b0:	e000      	b.n	80009b4 <HAL_GPIO_Init+0x14>
 80009b2:	2200      	movs	r2, #0
 80009b4:	40b2      	lsls	r2, r6
 80009b6:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80009b8:	3402      	adds	r4, #2
 80009ba:	4e5e      	ldr	r6, [pc, #376]	; (8000b34 <HAL_GPIO_Init+0x194>)
 80009bc:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009c0:	4a5d      	ldr	r2, [pc, #372]	; (8000b38 <HAL_GPIO_Init+0x198>)
 80009c2:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80009c4:	43ea      	mvns	r2, r5
 80009c6:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009ca:	684f      	ldr	r7, [r1, #4]
 80009cc:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80009d0:	d001      	beq.n	80009d6 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 80009d2:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 80009d6:	4c58      	ldr	r4, [pc, #352]	; (8000b38 <HAL_GPIO_Init+0x198>)
 80009d8:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 80009da:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80009dc:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009e0:	684f      	ldr	r7, [r1, #4]
 80009e2:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80009e6:	d001      	beq.n	80009ec <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 80009e8:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 80009ec:	4c52      	ldr	r4, [pc, #328]	; (8000b38 <HAL_GPIO_Init+0x198>)
 80009ee:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009f0:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 80009f2:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009f6:	684f      	ldr	r7, [r1, #4]
 80009f8:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80009fc:	d001      	beq.n	8000a02 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 80009fe:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8000a02:	4c4d      	ldr	r4, [pc, #308]	; (8000b38 <HAL_GPIO_Init+0x198>)
 8000a04:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8000a06:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000a08:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a0a:	684e      	ldr	r6, [r1, #4]
 8000a0c:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000a10:	d001      	beq.n	8000a16 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8000a12:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8000a16:	4c48      	ldr	r4, [pc, #288]	; (8000b38 <HAL_GPIO_Init+0x198>)
 8000a18:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	2b0f      	cmp	r3, #15
 8000a1e:	f200 8085 	bhi.w	8000b2c <HAL_GPIO_Init+0x18c>
    ioposition = 0x01U << position;
 8000a22:	2201      	movs	r2, #1
 8000a24:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a26:	680c      	ldr	r4, [r1, #0]
 8000a28:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8000a2c:	42aa      	cmp	r2, r5
 8000a2e:	d1f4      	bne.n	8000a1a <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a30:	684c      	ldr	r4, [r1, #4]
 8000a32:	2c02      	cmp	r4, #2
 8000a34:	d001      	beq.n	8000a3a <HAL_GPIO_Init+0x9a>
 8000a36:	2c12      	cmp	r4, #18
 8000a38:	d110      	bne.n	8000a5c <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3U];
 8000a3a:	08de      	lsrs	r6, r3, #3
 8000a3c:	3608      	adds	r6, #8
 8000a3e:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a42:	f003 0407 	and.w	r4, r3, #7
 8000a46:	00a7      	lsls	r7, r4, #2
 8000a48:	240f      	movs	r4, #15
 8000a4a:	40bc      	lsls	r4, r7
 8000a4c:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000a50:	690c      	ldr	r4, [r1, #16]
 8000a52:	40bc      	lsls	r4, r7
 8000a54:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000a58:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8000a5c:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a5e:	005f      	lsls	r7, r3, #1
 8000a60:	2603      	movs	r6, #3
 8000a62:	40be      	lsls	r6, r7
 8000a64:	43f6      	mvns	r6, r6
 8000a66:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a6a:	684c      	ldr	r4, [r1, #4]
 8000a6c:	f004 0403 	and.w	r4, r4, #3
 8000a70:	40bc      	lsls	r4, r7
 8000a72:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8000a76:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a78:	684c      	ldr	r4, [r1, #4]
 8000a7a:	f104 3cff 	add.w	ip, r4, #4294967295
 8000a7e:	f1bc 0f01 	cmp.w	ip, #1
 8000a82:	d903      	bls.n	8000a8c <HAL_GPIO_Init+0xec>
 8000a84:	2c11      	cmp	r4, #17
 8000a86:	d001      	beq.n	8000a8c <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a88:	2c12      	cmp	r4, #18
 8000a8a:	d110      	bne.n	8000aae <HAL_GPIO_Init+0x10e>
        temp = GPIOx->OSPEEDR; 
 8000a8c:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a8e:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a92:	68cc      	ldr	r4, [r1, #12]
 8000a94:	40bc      	lsls	r4, r7
 8000a96:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 8000a9a:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000a9c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a9e:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000aa2:	684c      	ldr	r4, [r1, #4]
 8000aa4:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8000aa8:	409c      	lsls	r4, r3
 8000aaa:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8000aac:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8000aae:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ab0:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ab2:	688a      	ldr	r2, [r1, #8]
 8000ab4:	40ba      	lsls	r2, r7
 8000ab6:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 8000ab8:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000aba:	684a      	ldr	r2, [r1, #4]
 8000abc:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000ac0:	d0ab      	beq.n	8000a1a <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	9201      	str	r2, [sp, #4]
 8000ac6:	4a1d      	ldr	r2, [pc, #116]	; (8000b3c <HAL_GPIO_Init+0x19c>)
 8000ac8:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8000aca:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000ace:	6454      	str	r4, [r2, #68]	; 0x44
 8000ad0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000ad2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000ad6:	9201      	str	r2, [sp, #4]
 8000ad8:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000ada:	089c      	lsrs	r4, r3, #2
 8000adc:	1ca6      	adds	r6, r4, #2
 8000ade:	4a15      	ldr	r2, [pc, #84]	; (8000b34 <HAL_GPIO_Init+0x194>)
 8000ae0:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ae4:	f003 0203 	and.w	r2, r3, #3
 8000ae8:	0096      	lsls	r6, r2, #2
 8000aea:	220f      	movs	r2, #15
 8000aec:	40b2      	lsls	r2, r6
 8000aee:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000af2:	4a13      	ldr	r2, [pc, #76]	; (8000b40 <HAL_GPIO_Init+0x1a0>)
 8000af4:	4290      	cmp	r0, r2
 8000af6:	f43f af5c 	beq.w	80009b2 <HAL_GPIO_Init+0x12>
 8000afa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000afe:	4290      	cmp	r0, r2
 8000b00:	d00e      	beq.n	8000b20 <HAL_GPIO_Init+0x180>
 8000b02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b06:	4290      	cmp	r0, r2
 8000b08:	d00c      	beq.n	8000b24 <HAL_GPIO_Init+0x184>
 8000b0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b0e:	4290      	cmp	r0, r2
 8000b10:	d00a      	beq.n	8000b28 <HAL_GPIO_Init+0x188>
 8000b12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b16:	4290      	cmp	r0, r2
 8000b18:	f43f af49 	beq.w	80009ae <HAL_GPIO_Init+0xe>
 8000b1c:	2207      	movs	r2, #7
 8000b1e:	e749      	b.n	80009b4 <HAL_GPIO_Init+0x14>
 8000b20:	2201      	movs	r2, #1
 8000b22:	e747      	b.n	80009b4 <HAL_GPIO_Init+0x14>
 8000b24:	2202      	movs	r2, #2
 8000b26:	e745      	b.n	80009b4 <HAL_GPIO_Init+0x14>
 8000b28:	2203      	movs	r2, #3
 8000b2a:	e743      	b.n	80009b4 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8000b2c:	b002      	add	sp, #8
 8000b2e:	bcf0      	pop	{r4, r5, r6, r7}
 8000b30:	4770      	bx	lr
 8000b32:	4770      	bx	lr
 8000b34:	40013800 	.word	0x40013800
 8000b38:	40013c00 	.word	0x40013c00
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40020000 	.word	0x40020000

08000b44 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b44:	b912      	cbnz	r2, 8000b4c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b46:	0409      	lsls	r1, r1, #16
 8000b48:	6181      	str	r1, [r0, #24]
  }
}
 8000b4a:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8000b4c:	6181      	str	r1, [r0, #24]
 8000b4e:	4770      	bx	lr

08000b50 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;  
 8000b52:	6806      	ldr	r6, [r0, #0]
  uint32_t pktsts;
  uint32_t pktcnt; 
  uint32_t temp = 0U;
  uint32_t tmpreg = 0U;
  
  temp = hhcd->Instance->GRXSTSP;
 8000b54:	6a34      	ldr	r4, [r6, #32]
  channelnum = temp &  USB_OTG_GRXSTSP_EPNUM;  
 8000b56:	f004 070f 	and.w	r7, r4, #15
  pktsts = (temp &  USB_OTG_GRXSTSP_PKTSTS) >> 17U;
 8000b5a:	f3c4 4343 	ubfx	r3, r4, #17, #4
  pktcnt = (temp &  USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000b5e:	f3c4 140a 	ubfx	r4, r4, #4, #11
  
  switch (pktsts)
 8000b62:	2b02      	cmp	r3, #2
 8000b64:	d12e      	bne.n	8000bc4 <HCD_RXQLVL_IRQHandler+0x74>
  {
  case GRXSTS_PKTSTS_IN:
    /* Read the data into the host buffer. */
    if ((pktcnt > 0U) && (hhcd->hc[channelnum].xfer_buff != (void  *)0))
 8000b66:	b36c      	cbz	r4, 8000bc4 <HCD_RXQLVL_IRQHandler+0x74>
 8000b68:	eb07 0287 	add.w	r2, r7, r7, lsl #2
 8000b6c:	00d3      	lsls	r3, r2, #3
 8000b6e:	4403      	add	r3, r0
 8000b70:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000b72:	b339      	cbz	r1, 8000bc4 <HCD_RXQLVL_IRQHandler+0x74>
 8000b74:	4605      	mov	r5, r0
    {  
      
      USB_ReadPacket(hhcd->Instance, hhcd->hc[channelnum].xfer_buff, pktcnt);
 8000b76:	4622      	mov	r2, r4
 8000b78:	4630      	mov	r0, r6
 8000b7a:	f002 feeb 	bl	8003954 <USB_ReadPacket>
      
      /*manage multiple Xfer */
      hhcd->hc[channelnum].xfer_buff += pktcnt;           
 8000b7e:	00ba      	lsls	r2, r7, #2
 8000b80:	443a      	add	r2, r7
 8000b82:	00d3      	lsls	r3, r2, #3
 8000b84:	442b      	add	r3, r5
 8000b86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b88:	4422      	add	r2, r4
 8000b8a:	645a      	str	r2, [r3, #68]	; 0x44
      hhcd->hc[channelnum].xfer_count  += pktcnt;
 8000b8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b8e:	4422      	add	r2, r4
 8000b90:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 8000b92:	eb06 1347 	add.w	r3, r6, r7, lsl #5
 8000b96:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
 8000b9a:	4a0b      	ldr	r2, [pc, #44]	; (8000bc8 <HCD_RXQLVL_IRQHandler+0x78>)
 8000b9c:	400a      	ands	r2, r1
 8000b9e:	b18a      	cbz	r2, 8000bc4 <HCD_RXQLVL_IRQHandler+0x74>
      {
        /* re-activate the channel when more packets are expected */
        tmpreg = USBx_HC(channelnum)->HCCHAR;
 8000ba0:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8000ba4:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8000ba8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
        USBx_HC(channelnum)->HCCHAR = tmpreg;
 8000bac:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
        hhcd->hc[channelnum].toggle_in ^= 1;
 8000bb0:	00bb      	lsls	r3, r7, #2
 8000bb2:	19d9      	adds	r1, r3, r7
 8000bb4:	00ca      	lsls	r2, r1, #3
 8000bb6:	442a      	add	r2, r5
 8000bb8:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8000bbc:	f083 0301 	eor.w	r3, r3, #1
 8000bc0:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
  case GRXSTS_PKTSTS_IN_XFER_COMP:
  case GRXSTS_PKTSTS_CH_HALTED:
  default:
    break;
  }
}
 8000bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	1ff80000 	.word	0x1ff80000

08000bcc <HAL_HCD_Init>:
  if(hhcd == NULL)
 8000bcc:	2800      	cmp	r0, #0
 8000bce:	d037      	beq.n	8000c40 <HAL_HCD_Init+0x74>
{ 
 8000bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd2:	b08b      	sub	sp, #44	; 0x2c
 8000bd4:	4606      	mov	r6, r0
  hhcd->State = HAL_HCD_STATE_BUSY;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	f880 3291 	strb.w	r3, [r0, #657]	; 0x291
  HAL_HCD_MspInit(hhcd);
 8000bdc:	f004 fb30 	bl	8005240 <HAL_HCD_MspInit>
  __HAL_HCD_DISABLE(hhcd);
 8000be0:	6830      	ldr	r0, [r6, #0]
 8000be2:	f002 fe74 	bl	80038ce <USB_DisableGlobalInt>
  USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000be6:	4634      	mov	r4, r6
 8000be8:	f854 cb10 	ldr.w	ip, [r4], #16
 8000bec:	466d      	mov	r5, sp
 8000bee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bf4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bf6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000bfa:	e885 0003 	stmia.w	r5, {r0, r1}
 8000bfe:	1d37      	adds	r7, r6, #4
 8000c00:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000c04:	4660      	mov	r0, ip
 8000c06:	f002 fe24 	bl	8003852 <USB_CoreInit>
  USB_SetCurrentMode(hhcd->Instance , USB_OTG_HOST_MODE);
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	6830      	ldr	r0, [r6, #0]
 8000c0e:	f002 fe64 	bl	80038da <USB_SetCurrentMode>
  USB_HostInit(hhcd->Instance, hhcd->Init);
 8000c12:	4634      	mov	r4, r6
 8000c14:	f854 cb10 	ldr.w	ip, [r4], #16
 8000c18:	466d      	mov	r5, sp
 8000c1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c22:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c26:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c2a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000c2e:	4660      	mov	r0, ip
 8000c30:	f002 feca 	bl	80039c8 <USB_HostInit>
  hhcd->State= HAL_HCD_STATE_READY;
 8000c34:	2301      	movs	r3, #1
 8000c36:	f886 3291 	strb.w	r3, [r6, #657]	; 0x291
  return HAL_OK;
 8000c3a:	2000      	movs	r0, #0
}
 8000c3c:	b00b      	add	sp, #44	; 0x2c
 8000c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8000c40:	2001      	movs	r0, #1
}
 8000c42:	4770      	bx	lr

08000c44 <HAL_HCD_SOF_Callback>:
}
 8000c44:	4770      	bx	lr

08000c46 <HAL_HCD_Connect_Callback>:
}
 8000c46:	4770      	bx	lr

08000c48 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler  (HCD_HandleTypeDef *hhcd)
{
 8000c48:	b530      	push	{r4, r5, lr}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	4605      	mov	r5, r0
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;  
 8000c4e:	6804      	ldr	r4, [r0, #0]
  __IO uint32_t hprt0, hprt0_dup;
  
  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8000c50:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 8000c54:	9301      	str	r3, [sp, #4]
  hprt0_dup = USBx_HPRT0;
 8000c56:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 8000c5a:	9300      	str	r3, [sp, #0]
  
  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8000c5c:	9b00      	ldr	r3, [sp, #0]
 8000c5e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8000c62:	9300      	str	r3, [sp, #0]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  /* Check whether Port Connect Detected */
  if((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8000c64:	9b01      	ldr	r3, [sp, #4]
 8000c66:	f013 0f02 	tst.w	r3, #2
 8000c6a:	d007      	beq.n	8000c7c <HCD_Port_IRQHandler+0x34>
  {  
    if((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8000c6c:	9b01      	ldr	r3, [sp, #4]
 8000c6e:	f013 0f01 	tst.w	r3, #1
 8000c72:	d125      	bne.n	8000cc0 <HCD_Port_IRQHandler+0x78>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
      HAL_HCD_Connect_Callback(hhcd);
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8000c74:	9b00      	ldr	r3, [sp, #0]
 8000c76:	f043 0302 	orr.w	r3, r3, #2
 8000c7a:	9300      	str	r3, [sp, #0]
    
  }
  
  /* Check whether Port Enable Changed */
  if((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8000c7c:	9b01      	ldr	r3, [sp, #4]
 8000c7e:	f013 0f08 	tst.w	r3, #8
 8000c82:	d010      	beq.n	8000ca6 <HCD_Port_IRQHandler+0x5e>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8000c84:	9b00      	ldr	r3, [sp, #0]
 8000c86:	f043 0308 	orr.w	r3, r3, #8
 8000c8a:	9300      	str	r3, [sp, #0]
    
    if((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8000c8c:	9b01      	ldr	r3, [sp, #4]
 8000c8e:	f013 0f04 	tst.w	r3, #4
 8000c92:	d031      	beq.n	8000cf8 <HCD_Port_IRQHandler+0xb0>
    {    
      if(hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8000c94:	69ab      	ldr	r3, [r5, #24]
 8000c96:	2b02      	cmp	r3, #2
 8000c98:	d019      	beq.n	8000cce <HCD_Port_IRQHandler+0x86>
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
        }
      }
      else
      {
        if(hhcd->Init.speed == HCD_SPEED_FULL)
 8000c9a:	68eb      	ldr	r3, [r5, #12]
 8000c9c:	2b03      	cmp	r3, #3
 8000c9e:	d026      	beq.n	8000cee <HCD_Port_IRQHandler+0xa6>
        {
          USBx_HOST->HFIR = 60000U;
        }
      }
      
      HAL_HCD_Connect_Callback(hhcd);
 8000ca0:	4628      	mov	r0, r5
 8000ca2:	f7ff ffd0 	bl	8000c46 <HAL_HCD_Connect_Callback>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT); 
    }    
  }
  
  /* Check for an over current */
  if((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8000ca6:	9b01      	ldr	r3, [sp, #4]
 8000ca8:	f013 0f20 	tst.w	r3, #32
 8000cac:	d003      	beq.n	8000cb6 <HCD_Port_IRQHandler+0x6e>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8000cae:	9b00      	ldr	r3, [sp, #0]
 8000cb0:	f043 0320 	orr.w	r3, r3, #32
 8000cb4:	9300      	str	r3, [sp, #0]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8000cb6:	9b00      	ldr	r3, [sp, #0]
 8000cb8:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
}
 8000cbc:	b003      	add	sp, #12
 8000cbe:	bd30      	pop	{r4, r5, pc}
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8000cc0:	69a3      	ldr	r3, [r4, #24]
 8000cc2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000cc6:	61a3      	str	r3, [r4, #24]
      HAL_HCD_Connect_Callback(hhcd);
 8000cc8:	f7ff ffbd 	bl	8000c46 <HAL_HCD_Connect_Callback>
 8000ccc:	e7d2      	b.n	8000c74 <HCD_Port_IRQHandler+0x2c>
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17U))
 8000cce:	9b01      	ldr	r3, [sp, #4]
 8000cd0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8000cd4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000cd8:	d004      	beq.n	8000ce4 <HCD_Port_IRQHandler+0x9c>
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8000cda:	2101      	movs	r1, #1
 8000cdc:	6828      	ldr	r0, [r5, #0]
 8000cde:	f002 fee9 	bl	8003ab4 <USB_InitFSLSPClkSel>
 8000ce2:	e7dd      	b.n	8000ca0 <HCD_Port_IRQHandler+0x58>
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_6_MHZ );
 8000ce4:	2102      	movs	r1, #2
 8000ce6:	6828      	ldr	r0, [r5, #0]
 8000ce8:	f002 fee4 	bl	8003ab4 <USB_InitFSLSPClkSel>
 8000cec:	e7d8      	b.n	8000ca0 <HCD_Port_IRQHandler+0x58>
          USBx_HOST->HFIR = 60000U;
 8000cee:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000cf2:	f8c4 2404 	str.w	r2, [r4, #1028]	; 0x404
 8000cf6:	e7d3      	b.n	8000ca0 <HCD_Port_IRQHandler+0x58>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8000cf8:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 8000cfc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8000d00:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT); 
 8000d04:	682a      	ldr	r2, [r5, #0]
 8000d06:	6993      	ldr	r3, [r2, #24]
 8000d08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000d0c:	6193      	str	r3, [r2, #24]
 8000d0e:	e7ca      	b.n	8000ca6 <HCD_Port_IRQHandler+0x5e>

08000d10 <HAL_HCD_Disconnect_Callback>:
} 
 8000d10:	4770      	bx	lr

08000d12 <HAL_HCD_HC_NotifyURBChange_Callback>:
}
 8000d12:	4770      	bx	lr

08000d14 <HCD_HC_IN_IRQHandler>:
{
 8000d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d16:	4606      	mov	r6, r0
 8000d18:	460d      	mov	r5, r1
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000d1a:	6807      	ldr	r7, [r0, #0]
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 8000d1c:	eb07 1741 	add.w	r7, r7, r1, lsl #5
 8000d20:	f507 64a0 	add.w	r4, r7, #1280	; 0x500
 8000d24:	68a3      	ldr	r3, [r4, #8]
 8000d26:	f013 0f04 	tst.w	r3, #4
 8000d2a:	d041      	beq.n	8000db0 <HCD_HC_IN_IRQHandler+0x9c>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8000d2c:	2304      	movs	r3, #4
 8000d2e:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8000d30:	68e3      	ldr	r3, [r4, #12]
 8000d32:	f043 0302 	orr.w	r3, r3, #2
 8000d36:	60e3      	str	r3, [r4, #12]
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 8000d38:	68a3      	ldr	r3, [r4, #8]
 8000d3a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8000d3e:	d16d      	bne.n	8000e1c <HCD_HC_IN_IRQHandler+0x108>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 8000d40:	68a3      	ldr	r3, [r4, #8]
 8000d42:	f013 0f01 	tst.w	r3, #1
 8000d46:	f000 808a 	beq.w	8000e5e <HCD_HC_IN_IRQHandler+0x14a>
    if (hhcd->Init.dma_enable)
 8000d4a:	6933      	ldr	r3, [r6, #16]
 8000d4c:	b163      	cbz	r3, 8000d68 <HCD_HC_IN_IRQHandler+0x54>
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 8000d4e:	00ab      	lsls	r3, r5, #2
 8000d50:	1959      	adds	r1, r3, r5
 8000d52:	00ca      	lsls	r2, r1, #3
 8000d54:	4432      	add	r2, r6
 8000d56:	6c91      	ldr	r1, [r2, #72]	; 0x48
        (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8000d58:	6922      	ldr	r2, [r4, #16]
 8000d5a:	f3c2 0212 	ubfx	r2, r2, #0, #19
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 8000d5e:	1a89      	subs	r1, r1, r2
 8000d60:	442b      	add	r3, r5
 8000d62:	00da      	lsls	r2, r3, #3
 8000d64:	4432      	add	r2, r6
 8000d66:	64d1      	str	r1, [r2, #76]	; 0x4c
    hhcd->hc[chnum].state = HC_XFRC;
 8000d68:	00aa      	lsls	r2, r5, #2
 8000d6a:	442a      	add	r2, r5
 8000d6c:	00d3      	lsls	r3, r2, #3
 8000d6e:	4433      	add	r3, r6
 8000d70:	2201      	movs	r2, #1
 8000d72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    hhcd->hc[chnum].ErrCnt = 0U;
 8000d76:	2100      	movs	r1, #0
 8000d78:	6599      	str	r1, [r3, #88]	; 0x58
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8000d7a:	60a2      	str	r2, [r4, #8]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8000d7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d057      	beq.n	8000e34 <HCD_HC_IN_IRQHandler+0x120>
 8000d84:	2b02      	cmp	r3, #2
 8000d86:	d055      	beq.n	8000e34 <HCD_HC_IN_IRQHandler+0x120>
    else if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8000d88:	2b03      	cmp	r3, #3
 8000d8a:	d15d      	bne.n	8000e48 <HCD_HC_IN_IRQHandler+0x134>
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8000d8c:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 8000d90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000d94:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
      hhcd->hc[chnum].urb_state = URB_DONE; 
 8000d98:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8000d9c:	00d3      	lsls	r3, r2, #3
 8000d9e:	4433      	add	r3, r6
 8000da0:	2201      	movs	r2, #1
 8000da2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8000da6:	4629      	mov	r1, r5
 8000da8:	4630      	mov	r0, r6
 8000daa:	f7ff ffb2 	bl	8000d12 <HAL_HCD_HC_NotifyURBChange_Callback>
 8000dae:	e04b      	b.n	8000e48 <HCD_HC_IN_IRQHandler+0x134>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 8000db0:	68a3      	ldr	r3, [r4, #8]
 8000db2:	f013 0f20 	tst.w	r3, #32
 8000db6:	d002      	beq.n	8000dbe <HCD_HC_IN_IRQHandler+0xaa>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8000db8:	2320      	movs	r3, #32
 8000dba:	60a3      	str	r3, [r4, #8]
 8000dbc:	e7bc      	b.n	8000d38 <HCD_HC_IN_IRQHandler+0x24>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)  
 8000dbe:	68a3      	ldr	r3, [r4, #8]
 8000dc0:	f013 0f08 	tst.w	r3, #8
 8000dc4:	d117      	bne.n	8000df6 <HCD_HC_IN_IRQHandler+0xe2>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 8000dc6:	68a3      	ldr	r3, [r4, #8]
 8000dc8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000dcc:	d0b4      	beq.n	8000d38 <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8000dce:	68e3      	ldr	r3, [r4, #12]
 8000dd0:	f043 0302 	orr.w	r3, r3, #2
 8000dd4:	60e3      	str	r3, [r4, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8000dd6:	6800      	ldr	r0, [r0, #0]
 8000dd8:	f002 febc 	bl	8003b54 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);    
 8000ddc:	2310      	movs	r3, #16
 8000dde:	60a3      	str	r3, [r4, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8000de0:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8000de4:	00d3      	lsls	r3, r2, #3
 8000de6:	4433      	add	r3, r6
 8000de8:	2208      	movs	r2, #8
 8000dea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8000dee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000df2:	60a3      	str	r3, [r4, #8]
 8000df4:	e7a0      	b.n	8000d38 <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8000df6:	68e3      	ldr	r3, [r4, #12]
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	60e3      	str	r3, [r4, #12]
    hhcd->hc[chnum].state = HC_STALL;
 8000dfe:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8000e02:	00d3      	lsls	r3, r2, #3
 8000e04:	4403      	add	r3, r0
 8000e06:	2205      	movs	r2, #5
 8000e08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8000e0c:	2310      	movs	r3, #16
 8000e0e:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);    
 8000e10:	2308      	movs	r3, #8
 8000e12:	60a3      	str	r3, [r4, #8]
    USB_HC_Halt(hhcd->Instance, chnum);    
 8000e14:	6800      	ldr	r0, [r0, #0]
 8000e16:	f002 fe9d 	bl	8003b54 <USB_HC_Halt>
 8000e1a:	e78d      	b.n	8000d38 <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000e1c:	68e3      	ldr	r3, [r4, #12]
 8000e1e:	f043 0302 	orr.w	r3, r3, #2
 8000e22:	60e3      	str	r3, [r4, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8000e24:	4629      	mov	r1, r5
 8000e26:	6830      	ldr	r0, [r6, #0]
 8000e28:	f002 fe94 	bl	8003b54 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8000e2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e30:	60a3      	str	r3, [r4, #8]
 8000e32:	e013      	b.n	8000e5c <HCD_HC_IN_IRQHandler+0x148>
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000e34:	68e3      	ldr	r3, [r4, #12]
 8000e36:	f043 0302 	orr.w	r3, r3, #2
 8000e3a:	60e3      	str	r3, [r4, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 8000e3c:	4629      	mov	r1, r5
 8000e3e:	6830      	ldr	r0, [r6, #0]
 8000e40:	f002 fe88 	bl	8003b54 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8000e44:	2310      	movs	r3, #16
 8000e46:	60a3      	str	r3, [r4, #8]
    hhcd->hc[chnum].toggle_in ^= 1U;
 8000e48:	00ab      	lsls	r3, r5, #2
 8000e4a:	1959      	adds	r1, r3, r5
 8000e4c:	00ca      	lsls	r2, r1, #3
 8000e4e:	4432      	add	r2, r6
 8000e50:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8000e54:	f083 0301 	eor.w	r3, r3, #1
 8000e58:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
}
 8000e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 8000e5e:	68a3      	ldr	r3, [r4, #8]
 8000e60:	f013 0f02 	tst.w	r3, #2
 8000e64:	d050      	beq.n	8000f08 <HCD_HC_IN_IRQHandler+0x1f4>
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 8000e66:	68e3      	ldr	r3, [r4, #12]
 8000e68:	f023 0302 	bic.w	r3, r3, #2
 8000e6c:	60e3      	str	r3, [r4, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 8000e6e:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8000e72:	00d3      	lsls	r3, r2, #3
 8000e74:	4433      	add	r3, r6
 8000e76:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d020      	beq.n	8000ec0 <HCD_HC_IN_IRQHandler+0x1ac>
    else if (hhcd->hc[chnum].state == HC_STALL) 
 8000e7e:	2b05      	cmp	r3, #5
 8000e80:	d032      	beq.n	8000ee8 <HCD_HC_IN_IRQHandler+0x1d4>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 8000e82:	2b06      	cmp	r3, #6
 8000e84:	d001      	beq.n	8000e8a <HCD_HC_IN_IRQHandler+0x176>
 8000e86:	2b08      	cmp	r3, #8
 8000e88:	d121      	bne.n	8000ece <HCD_HC_IN_IRQHandler+0x1ba>
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 8000e8a:	00aa      	lsls	r2, r5, #2
 8000e8c:	442a      	add	r2, r5
 8000e8e:	00d3      	lsls	r3, r2, #3
 8000e90:	4433      	add	r3, r6
 8000e92:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e94:	1c51      	adds	r1, r2, #1
 8000e96:	6599      	str	r1, [r3, #88]	; 0x58
 8000e98:	2a03      	cmp	r2, #3
 8000e9a:	d92d      	bls.n	8000ef8 <HCD_HC_IN_IRQHandler+0x1e4>
        hhcd->hc[chnum].ErrCnt = 0U;
 8000e9c:	00aa      	lsls	r2, r5, #2
 8000e9e:	442a      	add	r2, r5
 8000ea0:	00d3      	lsls	r3, r2, #3
 8000ea2:	4433      	add	r3, r6
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	659a      	str	r2, [r3, #88]	; 0x58
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8000ea8:	2204      	movs	r2, #4
 8000eaa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8000eae:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8000eb2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8000eb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      USBx_HC(chnum)->HCCHAR = tmpreg;
 8000eba:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 8000ebe:	e006      	b.n	8000ece <HCD_HC_IN_IRQHandler+0x1ba>
      hhcd->hc[chnum].urb_state  = URB_DONE;      
 8000ec0:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8000ec4:	00d3      	lsls	r3, r2, #3
 8000ec6:	4433      	add	r3, r6
 8000ec8:	2201      	movs	r2, #1
 8000eca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8000ece:	2302      	movs	r3, #2
 8000ed0:	60a3      	str	r3, [r4, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8000ed2:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8000ed6:	00d3      	lsls	r3, r2, #3
 8000ed8:	4433      	add	r3, r6
 8000eda:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8000ede:	4629      	mov	r1, r5
 8000ee0:	4630      	mov	r0, r6
 8000ee2:	f7ff ff16 	bl	8000d12 <HAL_HCD_HC_NotifyURBChange_Callback>
 8000ee6:	e7b9      	b.n	8000e5c <HCD_HC_IN_IRQHandler+0x148>
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8000ee8:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8000eec:	00d3      	lsls	r3, r2, #3
 8000eee:	4433      	add	r3, r6
 8000ef0:	2205      	movs	r2, #5
 8000ef2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8000ef6:	e7ea      	b.n	8000ece <HCD_HC_IN_IRQHandler+0x1ba>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8000ef8:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8000efc:	00d3      	lsls	r3, r2, #3
 8000efe:	4433      	add	r3, r6
 8000f00:	2202      	movs	r2, #2
 8000f02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8000f06:	e7d2      	b.n	8000eae <HCD_HC_IN_IRQHandler+0x19a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 8000f08:	68a3      	ldr	r3, [r4, #8]
 8000f0a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000f0e:	d126      	bne.n	8000f5e <HCD_HC_IN_IRQHandler+0x24a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 8000f10:	68a3      	ldr	r3, [r4, #8]
 8000f12:	f013 0f10 	tst.w	r3, #16
 8000f16:	d0a1      	beq.n	8000e5c <HCD_HC_IN_IRQHandler+0x148>
    if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8000f18:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8000f1c:	00d3      	lsls	r3, r2, #3
 8000f1e:	4433      	add	r3, r6
 8000f20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8000f24:	2b03      	cmp	r3, #3
 8000f26:	d032      	beq.n	8000f8e <HCD_HC_IN_IRQHandler+0x27a>
    hhcd->hc[chnum].state = HC_NAK;
 8000f28:	00ab      	lsls	r3, r5, #2
 8000f2a:	1959      	adds	r1, r3, r5
 8000f2c:	00ca      	lsls	r2, r1, #3
 8000f2e:	4432      	add	r2, r6
 8000f30:	2103      	movs	r1, #3
 8000f32:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8000f36:	2210      	movs	r2, #16
 8000f38:	60a2      	str	r2, [r4, #8]
    if  ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8000f3a:	441d      	add	r5, r3
 8000f3c:	fa05 f301 	lsl.w	r3, r5, r1
 8000f40:	441e      	add	r6, r3
 8000f42:	f896 303f 	ldrb.w	r3, [r6, #63]	; 0x3f
 8000f46:	b10b      	cbz	r3, 8000f4c <HCD_HC_IN_IRQHandler+0x238>
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d187      	bne.n	8000e5c <HCD_HC_IN_IRQHandler+0x148>
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8000f4c:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8000f50:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8000f54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      USBx_HC(chnum)->HCCHAR = tmpreg;
 8000f58:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
}
 8000f5c:	e77e      	b.n	8000e5c <HCD_HC_IN_IRQHandler+0x148>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000f5e:	68e3      	ldr	r3, [r4, #12]
 8000f60:	f043 0302 	orr.w	r3, r3, #2
 8000f64:	60e3      	str	r3, [r4, #12]
    hhcd->hc[chnum].ErrCnt++;
 8000f66:	00ab      	lsls	r3, r5, #2
 8000f68:	1959      	adds	r1, r3, r5
 8000f6a:	00ca      	lsls	r2, r1, #3
 8000f6c:	4432      	add	r2, r6
 8000f6e:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8000f70:	3101      	adds	r1, #1
 8000f72:	6591      	str	r1, [r2, #88]	; 0x58
    hhcd->hc[chnum].state = HC_XACTERR;
 8000f74:	442b      	add	r3, r5
 8000f76:	00da      	lsls	r2, r3, #3
 8000f78:	4432      	add	r2, r6
 8000f7a:	2306      	movs	r3, #6
 8000f7c:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
    USB_HC_Halt(hhcd->Instance, chnum);     
 8000f80:	4629      	mov	r1, r5
 8000f82:	6830      	ldr	r0, [r6, #0]
 8000f84:	f002 fde6 	bl	8003b54 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8000f88:	2380      	movs	r3, #128	; 0x80
 8000f8a:	60a3      	str	r3, [r4, #8]
 8000f8c:	e766      	b.n	8000e5c <HCD_HC_IN_IRQHandler+0x148>
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000f8e:	68e3      	ldr	r3, [r4, #12]
 8000f90:	f043 0302 	orr.w	r3, r3, #2
 8000f94:	60e3      	str	r3, [r4, #12]
      USB_HC_Halt(hhcd->Instance, chnum);  
 8000f96:	4629      	mov	r1, r5
 8000f98:	6830      	ldr	r0, [r6, #0]
 8000f9a:	f002 fddb 	bl	8003b54 <USB_HC_Halt>
 8000f9e:	e7c3      	b.n	8000f28 <HCD_HC_IN_IRQHandler+0x214>

08000fa0 <HCD_HC_OUT_IRQHandler>:
{
 8000fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000fa2:	6804      	ldr	r4, [r0, #0]
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 8000fa4:	eb04 1441 	add.w	r4, r4, r1, lsl #5
 8000fa8:	f504 64a0 	add.w	r4, r4, #1280	; 0x500
 8000fac:	68a3      	ldr	r3, [r4, #8]
 8000fae:	f013 0f04 	tst.w	r3, #4
 8000fb2:	d124      	bne.n	8000ffe <HCD_HC_OUT_IRQHandler+0x5e>
 8000fb4:	460e      	mov	r6, r1
 8000fb6:	4605      	mov	r5, r0
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 8000fb8:	68a3      	ldr	r3, [r4, #8]
 8000fba:	f013 0f20 	tst.w	r3, #32
 8000fbe:	d025      	beq.n	800100c <HCD_HC_OUT_IRQHandler+0x6c>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8000fc0:	2320      	movs	r3, #32
 8000fc2:	60a3      	str	r3, [r4, #8]
    if( hhcd->hc[chnum].do_ping == 1U)
 8000fc4:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8000fc8:	00d3      	lsls	r3, r2, #3
 8000fca:	4403      	add	r3, r0
 8000fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d11a      	bne.n	800100a <HCD_HC_OUT_IRQHandler+0x6a>
      hhcd->hc[chnum].state = HC_NYET;     
 8000fd4:	008f      	lsls	r7, r1, #2
 8000fd6:	187a      	adds	r2, r7, r1
 8000fd8:	00d3      	lsls	r3, r2, #3
 8000fda:	4403      	add	r3, r0
 8000fdc:	2204      	movs	r2, #4
 8000fde:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000fe2:	68e3      	ldr	r3, [r4, #12]
 8000fe4:	f043 0302 	orr.w	r3, r3, #2
 8000fe8:	60e3      	str	r3, [r4, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 8000fea:	6800      	ldr	r0, [r0, #0]
 8000fec:	f002 fdb2 	bl	8003b54 <USB_HC_Halt>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8000ff0:	19b9      	adds	r1, r7, r6
 8000ff2:	00c8      	lsls	r0, r1, #3
 8000ff4:	4428      	add	r0, r5
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
 8000ffc:	e005      	b.n	800100a <HCD_HC_OUT_IRQHandler+0x6a>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8000ffe:	2304      	movs	r3, #4
 8001000:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001002:	68e3      	ldr	r3, [r4, #12]
 8001004:	f043 0302 	orr.w	r3, r3, #2
 8001008:	60e3      	str	r3, [r4, #12]
} 
 800100a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NYET)
 800100c:	68a3      	ldr	r3, [r4, #8]
 800100e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001012:	d14c      	bne.n	80010ae <HCD_HC_OUT_IRQHandler+0x10e>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 8001014:	68a3      	ldr	r3, [r4, #8]
 8001016:	f413 7f00 	tst.w	r3, #512	; 0x200
 800101a:	d15f      	bne.n	80010dc <HCD_HC_OUT_IRQHandler+0x13c>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 800101c:	68a3      	ldr	r3, [r4, #8]
 800101e:	f013 0f01 	tst.w	r3, #1
 8001022:	d166      	bne.n	80010f2 <HCD_HC_OUT_IRQHandler+0x152>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)  
 8001024:	68a3      	ldr	r3, [r4, #8]
 8001026:	f013 0f08 	tst.w	r3, #8
 800102a:	d177      	bne.n	800111c <HCD_HC_OUT_IRQHandler+0x17c>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 800102c:	68a3      	ldr	r3, [r4, #8]
 800102e:	f013 0f10 	tst.w	r3, #16
 8001032:	f040 8084 	bne.w	800113e <HCD_HC_OUT_IRQHandler+0x19e>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 8001036:	68a3      	ldr	r3, [r4, #8]
 8001038:	f013 0f80 	tst.w	r3, #128	; 0x80
 800103c:	f040 8095 	bne.w	800116a <HCD_HC_OUT_IRQHandler+0x1ca>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 8001040:	68a3      	ldr	r3, [r4, #8]
 8001042:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001046:	f040 80a1 	bne.w	800118c <HCD_HC_OUT_IRQHandler+0x1ec>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 800104a:	68a3      	ldr	r3, [r4, #8]
 800104c:	f013 0f02 	tst.w	r3, #2
 8001050:	d0db      	beq.n	800100a <HCD_HC_OUT_IRQHandler+0x6a>
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 8001052:	68e3      	ldr	r3, [r4, #12]
 8001054:	f023 0302 	bic.w	r3, r3, #2
 8001058:	60e3      	str	r3, [r4, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 800105a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800105e:	00d3      	lsls	r3, r2, #3
 8001060:	4403      	add	r3, r0
 8001062:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001066:	2b01      	cmp	r3, #1
 8001068:	f000 80a4 	beq.w	80011b4 <HCD_HC_OUT_IRQHandler+0x214>
    else if (hhcd->hc[chnum].state == HC_NAK) 
 800106c:	2b03      	cmp	r3, #3
 800106e:	f000 80c4 	beq.w	80011fa <HCD_HC_OUT_IRQHandler+0x25a>
    else if (hhcd->hc[chnum].state == HC_NYET) 
 8001072:	2b04      	cmp	r3, #4
 8001074:	f000 80c9 	beq.w	800120a <HCD_HC_OUT_IRQHandler+0x26a>
    else if (hhcd->hc[chnum].state == HC_STALL) 
 8001078:	2b05      	cmp	r3, #5
 800107a:	f000 80d1 	beq.w	8001220 <HCD_HC_OUT_IRQHandler+0x280>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 800107e:	2b06      	cmp	r3, #6
 8001080:	d002      	beq.n	8001088 <HCD_HC_OUT_IRQHandler+0xe8>
 8001082:	2b08      	cmp	r3, #8
 8001084:	f040 80a1 	bne.w	80011ca <HCD_HC_OUT_IRQHandler+0x22a>
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 8001088:	00b2      	lsls	r2, r6, #2
 800108a:	4432      	add	r2, r6
 800108c:	00d3      	lsls	r3, r2, #3
 800108e:	442b      	add	r3, r5
 8001090:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001092:	1c51      	adds	r1, r2, #1
 8001094:	6599      	str	r1, [r3, #88]	; 0x58
 8001096:	2a03      	cmp	r2, #3
 8001098:	f240 80ca 	bls.w	8001230 <HCD_HC_OUT_IRQHandler+0x290>
        hhcd->hc[chnum].ErrCnt = 0U;
 800109c:	2328      	movs	r3, #40	; 0x28
 800109e:	fb03 5306 	mla	r3, r3, r6, r5
 80010a2:	2200      	movs	r2, #0
 80010a4:	659a      	str	r2, [r3, #88]	; 0x58
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80010a6:	2204      	movs	r2, #4
 80010a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80010ac:	e08d      	b.n	80011ca <HCD_HC_OUT_IRQHandler+0x22a>
    hhcd->hc[chnum].state = HC_NYET;
 80010ae:	008b      	lsls	r3, r1, #2
 80010b0:	1859      	adds	r1, r3, r1
 80010b2:	00ca      	lsls	r2, r1, #3
 80010b4:	4402      	add	r2, r0
 80010b6:	2104      	movs	r1, #4
 80010b8:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    hhcd->hc[chnum].ErrCnt= 0U;    
 80010bc:	4433      	add	r3, r6
 80010be:	00da      	lsls	r2, r3, #3
 80010c0:	4402      	add	r2, r0
 80010c2:	2300      	movs	r3, #0
 80010c4:	6593      	str	r3, [r2, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80010c6:	68e3      	ldr	r3, [r4, #12]
 80010c8:	f043 0302 	orr.w	r3, r3, #2
 80010cc:	60e3      	str	r3, [r4, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 80010ce:	4631      	mov	r1, r6
 80010d0:	6800      	ldr	r0, [r0, #0]
 80010d2:	f002 fd3f 	bl	8003b54 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80010d6:	2340      	movs	r3, #64	; 0x40
 80010d8:	60a3      	str	r3, [r4, #8]
 80010da:	e796      	b.n	800100a <HCD_HC_OUT_IRQHandler+0x6a>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80010dc:	68e3      	ldr	r3, [r4, #12]
 80010de:	f043 0302 	orr.w	r3, r3, #2
 80010e2:	60e3      	str	r3, [r4, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 80010e4:	6800      	ldr	r0, [r0, #0]
 80010e6:	f002 fd35 	bl	8003b54 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80010ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010ee:	60a3      	str	r3, [r4, #8]
 80010f0:	e78b      	b.n	800100a <HCD_HC_OUT_IRQHandler+0x6a>
      hhcd->hc[chnum].ErrCnt = 0U;  
 80010f2:	008f      	lsls	r7, r1, #2
 80010f4:	187a      	adds	r2, r7, r1
 80010f6:	00d3      	lsls	r3, r2, #3
 80010f8:	4403      	add	r3, r0
 80010fa:	2200      	movs	r2, #0
 80010fc:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80010fe:	68e3      	ldr	r3, [r4, #12]
 8001100:	f043 0302 	orr.w	r3, r3, #2
 8001104:	60e3      	str	r3, [r4, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 8001106:	6800      	ldr	r0, [r0, #0]
 8001108:	f002 fd24 	bl	8003b54 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800110c:	2301      	movs	r3, #1
 800110e:	60a3      	str	r3, [r4, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8001110:	19b9      	adds	r1, r7, r6
 8001112:	00c8      	lsls	r0, r1, #3
 8001114:	4428      	add	r0, r5
 8001116:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
 800111a:	e776      	b.n	800100a <HCD_HC_OUT_IRQHandler+0x6a>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);  
 800111c:	2308      	movs	r3, #8
 800111e:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001120:	68e3      	ldr	r3, [r4, #12]
 8001122:	f043 0302 	orr.w	r3, r3, #2
 8001126:	60e3      	str	r3, [r4, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 8001128:	6800      	ldr	r0, [r0, #0]
 800112a:	f002 fd13 	bl	8003b54 <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_STALL;    
 800112e:	eb06 0186 	add.w	r1, r6, r6, lsl #2
 8001132:	00c8      	lsls	r0, r1, #3
 8001134:	4428      	add	r0, r5
 8001136:	2305      	movs	r3, #5
 8001138:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
 800113c:	e765      	b.n	800100a <HCD_HC_OUT_IRQHandler+0x6a>
    hhcd->hc[chnum].ErrCnt = 0U;  
 800113e:	008f      	lsls	r7, r1, #2
 8001140:	187a      	adds	r2, r7, r1
 8001142:	00d3      	lsls	r3, r2, #3
 8001144:	4403      	add	r3, r0
 8001146:	2200      	movs	r2, #0
 8001148:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 800114a:	68e3      	ldr	r3, [r4, #12]
 800114c:	f043 0302 	orr.w	r3, r3, #2
 8001150:	60e3      	str	r3, [r4, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 8001152:	6800      	ldr	r0, [r0, #0]
 8001154:	f002 fcfe 	bl	8003b54 <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_NAK;
 8001158:	19b9      	adds	r1, r7, r6
 800115a:	00c8      	lsls	r0, r1, #3
 800115c:	4428      	add	r0, r5
 800115e:	2303      	movs	r3, #3
 8001160:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001164:	2310      	movs	r3, #16
 8001166:	60a3      	str	r3, [r4, #8]
 8001168:	e74f      	b.n	800100a <HCD_HC_OUT_IRQHandler+0x6a>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 800116a:	68e3      	ldr	r3, [r4, #12]
 800116c:	f043 0302 	orr.w	r3, r3, #2
 8001170:	60e3      	str	r3, [r4, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8001172:	6800      	ldr	r0, [r0, #0]
 8001174:	f002 fcee 	bl	8003b54 <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_XACTERR;  
 8001178:	eb06 0186 	add.w	r1, r6, r6, lsl #2
 800117c:	00cb      	lsls	r3, r1, #3
 800117e:	442b      	add	r3, r5
 8001180:	2206      	movs	r2, #6
 8001182:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
     __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001186:	2380      	movs	r3, #128	; 0x80
 8001188:	60a3      	str	r3, [r4, #8]
 800118a:	e73e      	b.n	800100a <HCD_HC_OUT_IRQHandler+0x6a>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 800118c:	68e3      	ldr	r3, [r4, #12]
 800118e:	f043 0302 	orr.w	r3, r3, #2
 8001192:	60e3      	str	r3, [r4, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8001194:	6800      	ldr	r0, [r0, #0]
 8001196:	f002 fcdd 	bl	8003b54 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800119a:	2310      	movs	r3, #16
 800119c:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);    
 800119e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011a2:	60a3      	str	r3, [r4, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80011a4:	eb06 0186 	add.w	r1, r6, r6, lsl #2
 80011a8:	00cb      	lsls	r3, r1, #3
 80011aa:	442b      	add	r3, r5
 80011ac:	2208      	movs	r2, #8
 80011ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 80011b2:	e72a      	b.n	800100a <HCD_HC_OUT_IRQHandler+0x6a>
      hhcd->hc[chnum].urb_state  = URB_DONE;
 80011b4:	008a      	lsls	r2, r1, #2
 80011b6:	440a      	add	r2, r1
 80011b8:	00d3      	lsls	r3, r2, #3
 80011ba:	4403      	add	r3, r0
 80011bc:	2201      	movs	r2, #1
 80011be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      if (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)
 80011c2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d00c      	beq.n	80011e4 <HCD_HC_OUT_IRQHandler+0x244>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80011ca:	2302      	movs	r3, #2
 80011cc:	60a3      	str	r3, [r4, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);  
 80011ce:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 80011d2:	00d3      	lsls	r3, r2, #3
 80011d4:	442b      	add	r3, r5
 80011d6:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 80011da:	4631      	mov	r1, r6
 80011dc:	4628      	mov	r0, r5
 80011de:	f7ff fd98 	bl	8000d12 <HAL_HCD_HC_NotifyURBChange_Callback>
} 
 80011e2:	e712      	b.n	800100a <HCD_HC_OUT_IRQHandler+0x6a>
        hhcd->hc[chnum].toggle_out ^= 1U; 
 80011e4:	008a      	lsls	r2, r1, #2
 80011e6:	440a      	add	r2, r1
 80011e8:	00d3      	lsls	r3, r2, #3
 80011ea:	4403      	add	r3, r0
 80011ec:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 80011f0:	f082 0201 	eor.w	r2, r2, #1
 80011f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80011f8:	e7e7      	b.n	80011ca <HCD_HC_OUT_IRQHandler+0x22a>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80011fa:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 80011fe:	00d3      	lsls	r3, r2, #3
 8001200:	4403      	add	r3, r0
 8001202:	2202      	movs	r2, #2
 8001204:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8001208:	e7df      	b.n	80011ca <HCD_HC_OUT_IRQHandler+0x22a>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800120a:	008a      	lsls	r2, r1, #2
 800120c:	440a      	add	r2, r1
 800120e:	00d3      	lsls	r3, r2, #3
 8001210:	4403      	add	r3, r0
 8001212:	2202      	movs	r2, #2
 8001214:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      hhcd->hc[chnum].do_ping = 0U;
 8001218:	2200      	movs	r2, #0
 800121a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800121e:	e7d4      	b.n	80011ca <HCD_HC_OUT_IRQHandler+0x22a>
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8001220:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8001224:	00d3      	lsls	r3, r2, #3
 8001226:	4403      	add	r3, r0
 8001228:	2205      	movs	r2, #5
 800122a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800122e:	e7cc      	b.n	80011ca <HCD_HC_OUT_IRQHandler+0x22a>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001230:	2328      	movs	r3, #40	; 0x28
 8001232:	fb03 5306 	mla	r3, r3, r6, r5
 8001236:	2202      	movs	r2, #2
 8001238:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800123c:	e7c5      	b.n	80011ca <HCD_HC_OUT_IRQHandler+0x22a>

0800123e <HAL_HCD_IRQHandler>:
{
 800123e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001240:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001242:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001244:	4628      	mov	r0, r5
 8001246:	f002 fb9d 	bl	8003984 <USB_GetMode>
 800124a:	2801      	cmp	r0, #1
 800124c:	d000      	beq.n	8001250 <HAL_HCD_IRQHandler+0x12>
}
 800124e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(__HAL_HCD_IS_INVALID_INTERRUPT(hhcd)) 
 8001250:	6820      	ldr	r0, [r4, #0]
 8001252:	f002 fb93 	bl	800397c <USB_ReadInterrupts>
 8001256:	2800      	cmp	r0, #0
 8001258:	d0f9      	beq.n	800124e <HAL_HCD_IRQHandler+0x10>
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800125a:	6820      	ldr	r0, [r4, #0]
 800125c:	f002 fb8e 	bl	800397c <USB_ReadInterrupts>
 8001260:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8001264:	d003      	beq.n	800126e <HAL_HCD_IRQHandler+0x30>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001266:	6823      	ldr	r3, [r4, #0]
 8001268:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800126c:	615a      	str	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800126e:	6820      	ldr	r0, [r4, #0]
 8001270:	f002 fb84 	bl	800397c <USB_ReadInterrupts>
 8001274:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8001278:	d003      	beq.n	8001282 <HAL_HCD_IRQHandler+0x44>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800127a:	6823      	ldr	r3, [r4, #0]
 800127c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001280:	615a      	str	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001282:	6820      	ldr	r0, [r4, #0]
 8001284:	f002 fb7a 	bl	800397c <USB_ReadInterrupts>
 8001288:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 800128c:	d003      	beq.n	8001296 <HAL_HCD_IRQHandler+0x58>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800128e:	6823      	ldr	r3, [r4, #0]
 8001290:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001294:	615a      	str	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001296:	6820      	ldr	r0, [r4, #0]
 8001298:	f002 fb70 	bl	800397c <USB_ReadInterrupts>
 800129c:	f010 0f02 	tst.w	r0, #2
 80012a0:	d002      	beq.n	80012a8 <HAL_HCD_IRQHandler+0x6a>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80012a2:	6823      	ldr	r3, [r4, #0]
 80012a4:	2202      	movs	r2, #2
 80012a6:	615a      	str	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80012a8:	6820      	ldr	r0, [r4, #0]
 80012aa:	f002 fb67 	bl	800397c <USB_ReadInterrupts>
 80012ae:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
 80012b2:	d125      	bne.n	8001300 <HAL_HCD_IRQHandler+0xc2>
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80012b4:	6820      	ldr	r0, [r4, #0]
 80012b6:	f002 fb61 	bl	800397c <USB_ReadInterrupts>
 80012ba:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 80012be:	d131      	bne.n	8001324 <HAL_HCD_IRQHandler+0xe6>
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80012c0:	6820      	ldr	r0, [r4, #0]
 80012c2:	f002 fb5b 	bl	800397c <USB_ReadInterrupts>
 80012c6:	f010 0f08 	tst.w	r0, #8
 80012ca:	d12f      	bne.n	800132c <HAL_HCD_IRQHandler+0xee>
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80012cc:	6820      	ldr	r0, [r4, #0]
 80012ce:	f002 fb55 	bl	800397c <USB_ReadInterrupts>
 80012d2:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 80012d6:	d130      	bne.n	800133a <HAL_HCD_IRQHandler+0xfc>
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL))
 80012d8:	6820      	ldr	r0, [r4, #0]
 80012da:	f002 fb4f 	bl	800397c <USB_ReadInterrupts>
 80012de:	f010 0f10 	tst.w	r0, #16
 80012e2:	d0b4      	beq.n	800124e <HAL_HCD_IRQHandler+0x10>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012e4:	6822      	ldr	r2, [r4, #0]
 80012e6:	6993      	ldr	r3, [r2, #24]
 80012e8:	f023 0310 	bic.w	r3, r3, #16
 80012ec:	6193      	str	r3, [r2, #24]
      HCD_RXQLVL_IRQHandler (hhcd);
 80012ee:	4620      	mov	r0, r4
 80012f0:	f7ff fc2e 	bl	8000b50 <HCD_RXQLVL_IRQHandler>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012f4:	6822      	ldr	r2, [r4, #0]
 80012f6:	6993      	ldr	r3, [r2, #24]
 80012f8:	f043 0310 	orr.w	r3, r3, #16
 80012fc:	6193      	str	r3, [r2, #24]
 80012fe:	e7a6      	b.n	800124e <HAL_HCD_IRQHandler+0x10>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8001300:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8001304:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001308:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
      HAL_HCD_Disconnect_Callback(hhcd);
 800130c:	4620      	mov	r0, r4
 800130e:	f7ff fcff 	bl	8000d10 <HAL_HCD_Disconnect_Callback>
      USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8001312:	2101      	movs	r1, #1
 8001314:	6820      	ldr	r0, [r4, #0]
 8001316:	f002 fbcd 	bl	8003ab4 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800131a:	6823      	ldr	r3, [r4, #0]
 800131c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001320:	615a      	str	r2, [r3, #20]
 8001322:	e7c7      	b.n	80012b4 <HAL_HCD_IRQHandler+0x76>
      HCD_Port_IRQHandler (hhcd);
 8001324:	4620      	mov	r0, r4
 8001326:	f7ff fc8f 	bl	8000c48 <HCD_Port_IRQHandler>
 800132a:	e7c9      	b.n	80012c0 <HAL_HCD_IRQHandler+0x82>
      HAL_HCD_SOF_Callback(hhcd);
 800132c:	4620      	mov	r0, r4
 800132e:	f7ff fc89 	bl	8000c44 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001332:	6823      	ldr	r3, [r4, #0]
 8001334:	2208      	movs	r2, #8
 8001336:	615a      	str	r2, [r3, #20]
 8001338:	e7c8      	b.n	80012cc <HAL_HCD_IRQHandler+0x8e>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800133a:	6820      	ldr	r0, [r4, #0]
 800133c:	f002 fbfb 	bl	8003b36 <USB_HC_ReadInterrupt>
 8001340:	4607      	mov	r7, r0
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001342:	2600      	movs	r6, #0
 8001344:	e004      	b.n	8001350 <HAL_HCD_IRQHandler+0x112>
            HCD_HC_OUT_IRQHandler (hhcd, i);
 8001346:	b2f1      	uxtb	r1, r6
 8001348:	4620      	mov	r0, r4
 800134a:	f7ff fe29 	bl	8000fa0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800134e:	3601      	adds	r6, #1
 8001350:	68a3      	ldr	r3, [r4, #8]
 8001352:	42b3      	cmp	r3, r6
 8001354:	d90f      	bls.n	8001376 <HAL_HCD_IRQHandler+0x138>
        if (interrupt & (1U << i))
 8001356:	2301      	movs	r3, #1
 8001358:	40b3      	lsls	r3, r6
 800135a:	423b      	tst	r3, r7
 800135c:	d0f7      	beq.n	800134e <HAL_HCD_IRQHandler+0x110>
          if ((USBx_HC(i)->HCCHAR) &  USB_OTG_HCCHAR_EPDIR)
 800135e:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8001362:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8001366:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800136a:	d0ec      	beq.n	8001346 <HAL_HCD_IRQHandler+0x108>
            HCD_HC_IN_IRQHandler(hhcd, i);
 800136c:	b2f1      	uxtb	r1, r6
 800136e:	4620      	mov	r0, r4
 8001370:	f7ff fcd0 	bl	8000d14 <HCD_HC_IN_IRQHandler>
 8001374:	e7eb      	b.n	800134e <HAL_HCD_IRQHandler+0x110>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001376:	6823      	ldr	r3, [r4, #0]
 8001378:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800137c:	615a      	str	r2, [r3, #20]
 800137e:	e7ab      	b.n	80012d8 <HAL_HCD_IRQHandler+0x9a>

08001380 <I2C_Master_SB>:
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
  if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001380:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b40      	cmp	r3, #64	; 0x40
 8001388:	d013      	beq.n	80013b2 <I2C_Master_SB+0x32>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
    }
  }
  else
  {
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800138a:	6903      	ldr	r3, [r0, #16]
 800138c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001390:	d01e      	beq.n	80013d0 <I2C_Master_SB+0x50>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
      }
    }
    else
    {
      if(hi2c->EventCount == 0U)
 8001392:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001394:	2b00      	cmp	r3, #0
 8001396:	d02d      	beq.n	80013f4 <I2C_Master_SB+0x74>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
      }
      else if(hi2c->EventCount == 1U)
 8001398:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800139a:	2b01      	cmp	r3, #1
 800139c:	d133      	bne.n	8001406 <I2C_Master_SB+0x86>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800139e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80013a0:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 80013a4:	6802      	ldr	r2, [r0, #0]
 80013a6:	f003 0306 	and.w	r3, r3, #6
 80013aa:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
 80013ae:	6113      	str	r3, [r2, #16]
 80013b0:	e029      	b.n	8001406 <I2C_Master_SB+0x86>
    if(hi2c->EventCount == 0U)
 80013b2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80013b4:	b92b      	cbnz	r3, 80013c2 <I2C_Master_SB+0x42>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80013b6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80013b8:	6802      	ldr	r2, [r0, #0]
 80013ba:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80013be:	6113      	str	r3, [r2, #16]
 80013c0:	e021      	b.n	8001406 <I2C_Master_SB+0x86>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80013c2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80013c4:	6802      	ldr	r2, [r0, #0]
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	6113      	str	r3, [r2, #16]
 80013ce:	e01a      	b.n	8001406 <I2C_Master_SB+0x86>
      if(hi2c->State == HAL_I2C_STATE_BUSY_TX) 
 80013d0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	2b21      	cmp	r3, #33	; 0x21
 80013d8:	d006      	beq.n	80013e8 <I2C_Master_SB+0x68>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80013da:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80013dc:	6802      	ldr	r2, [r0, #0]
 80013de:	f043 0301 	orr.w	r3, r3, #1
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	6113      	str	r3, [r2, #16]
 80013e6:	e00e      	b.n	8001406 <I2C_Master_SB+0x86>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80013e8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80013ea:	6802      	ldr	r2, [r0, #0]
 80013ec:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80013f0:	6113      	str	r3, [r2, #16]
 80013f2:	e008      	b.n	8001406 <I2C_Master_SB+0x86>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80013f4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80013f6:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 80013fa:	6802      	ldr	r2, [r0, #0]
 80013fc:	f003 0306 	and.w	r3, r3, #6
 8001400:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001404:	6113      	str	r3, [r2, #16]
      }
    }
  }

  return HAL_OK;
}
 8001406:	2000      	movs	r0, #0
 8001408:	4770      	bx	lr

0800140a <I2C_Master_ADD10>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800140a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800140c:	6802      	ldr	r2, [r0, #0]
 800140e:	b2db      	uxtb	r3, r3
 8001410:	6113      	str	r3, [r2, #16]

  return HAL_OK;
}
 8001412:	2000      	movs	r0, #0
 8001414:	4770      	bx	lr

08001416 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8001416:	b410      	push	{r4}
 8001418:	b08b      	sub	sp, #44	; 0x2c
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentMode        = hi2c->Mode;
 800141a:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800141e:	b2da      	uxtb	r2, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001420:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  uint32_t Prev_State         = hi2c->PreviousState;
 8001422:	6b04      	ldr	r4, [r0, #48]	; 0x30

  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001424:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b22      	cmp	r3, #34	; 0x22
 800142c:	d00c      	beq.n	8001448 <I2C_Master_ADDR+0x32>
    }
  }
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800142e:	2300      	movs	r3, #0
 8001430:	9309      	str	r3, [sp, #36]	; 0x24
 8001432:	6803      	ldr	r3, [r0, #0]
 8001434:	695a      	ldr	r2, [r3, #20]
 8001436:	9209      	str	r2, [sp, #36]	; 0x24
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	9309      	str	r3, [sp, #36]	; 0x24
 800143c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  }

  return HAL_OK;
}
 800143e:	2000      	movs	r0, #0
 8001440:	b00b      	add	sp, #44	; 0x2c
 8001442:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001446:	4770      	bx	lr
    if((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8001448:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800144a:	b90b      	cbnz	r3, 8001450 <I2C_Master_ADDR+0x3a>
 800144c:	2a40      	cmp	r2, #64	; 0x40
 800144e:	d017      	beq.n	8001480 <I2C_Master_ADDR+0x6a>
    else if((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8001450:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001452:	b91b      	cbnz	r3, 800145c <I2C_Master_ADDR+0x46>
 8001454:	6903      	ldr	r3, [r0, #16]
 8001456:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800145a:	d019      	beq.n	8001490 <I2C_Master_ADDR+0x7a>
      if(hi2c->XferCount == 0U)
 800145c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800145e:	b29b      	uxth	r3, r3
 8001460:	2b00      	cmp	r3, #0
 8001462:	d125      	bne.n	80014b0 <I2C_Master_ADDR+0x9a>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001464:	9302      	str	r3, [sp, #8]
 8001466:	6803      	ldr	r3, [r0, #0]
 8001468:	695a      	ldr	r2, [r3, #20]
 800146a:	9202      	str	r2, [sp, #8]
 800146c:	699a      	ldr	r2, [r3, #24]
 800146e:	9202      	str	r2, [sp, #8]
 8001470:	9a02      	ldr	r2, [sp, #8]
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001478:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 800147a:	2300      	movs	r3, #0
 800147c:	6503      	str	r3, [r0, #80]	; 0x50
 800147e:	e7de      	b.n	800143e <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	6803      	ldr	r3, [r0, #0]
 8001484:	695a      	ldr	r2, [r3, #20]
 8001486:	9200      	str	r2, [sp, #0]
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	9b00      	ldr	r3, [sp, #0]
 800148e:	e7d6      	b.n	800143e <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001490:	2300      	movs	r3, #0
 8001492:	9301      	str	r3, [sp, #4]
 8001494:	6803      	ldr	r3, [r0, #0]
 8001496:	695a      	ldr	r2, [r3, #20]
 8001498:	9201      	str	r2, [sp, #4]
 800149a:	699a      	ldr	r2, [r3, #24]
 800149c:	9201      	str	r2, [sp, #4]
 800149e:	9a01      	ldr	r2, [sp, #4]
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014a6:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80014a8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80014aa:	3301      	adds	r3, #1
 80014ac:	6503      	str	r3, [r0, #80]	; 0x50
 80014ae:	e7c6      	b.n	800143e <I2C_Master_ADDR+0x28>
      else if(hi2c->XferCount == 1U)   
 80014b0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d01a      	beq.n	80014ee <I2C_Master_ADDR+0xd8>
      else if(hi2c->XferCount == 2U)
 80014b8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d06b      	beq.n	8001598 <I2C_Master_ADDR+0x182>
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80014c0:	6802      	ldr	r2, [r0, #0]
 80014c2:	6813      	ldr	r3, [r2, #0]
 80014c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014c8:	6013      	str	r3, [r2, #0]
        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80014ca:	6803      	ldr	r3, [r0, #0]
 80014cc:	685a      	ldr	r2, [r3, #4]
 80014ce:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80014d2:	d003      	beq.n	80014dc <I2C_Master_ADDR+0xc6>
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 80014d4:	685a      	ldr	r2, [r3, #4]
 80014d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80014da:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014dc:	2300      	movs	r3, #0
 80014de:	9308      	str	r3, [sp, #32]
 80014e0:	6803      	ldr	r3, [r0, #0]
 80014e2:	695a      	ldr	r2, [r3, #20]
 80014e4:	9208      	str	r2, [sp, #32]
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	9308      	str	r3, [sp, #32]
 80014ea:	9b08      	ldr	r3, [sp, #32]
 80014ec:	e7c5      	b.n	800147a <I2C_Master_ADDR+0x64>
        if(CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80014ee:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 80014f2:	d016      	beq.n	8001522 <I2C_Master_ADDR+0x10c>
        else if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80014f4:	2904      	cmp	r1, #4
 80014f6:	d03d      	beq.n	8001574 <I2C_Master_ADDR+0x15e>
 80014f8:	2908      	cmp	r1, #8
 80014fa:	d03b      	beq.n	8001574 <I2C_Master_ADDR+0x15e>
          && (Prev_State != I2C_STATE_MASTER_BUSY_RX))
 80014fc:	2c12      	cmp	r4, #18
 80014fe:	d039      	beq.n	8001574 <I2C_Master_ADDR+0x15e>
          if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8001500:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001502:	2b02      	cmp	r3, #2
 8001504:	d030      	beq.n	8001568 <I2C_Master_ADDR+0x152>
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001506:	6802      	ldr	r2, [r0, #0]
 8001508:	6813      	ldr	r3, [r2, #0]
 800150a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800150e:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001510:	2300      	movs	r3, #0
 8001512:	9305      	str	r3, [sp, #20]
 8001514:	6803      	ldr	r3, [r0, #0]
 8001516:	695a      	ldr	r2, [r3, #20]
 8001518:	9205      	str	r2, [sp, #20]
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	9305      	str	r3, [sp, #20]
 800151e:	9b05      	ldr	r3, [sp, #20]
 8001520:	e7ab      	b.n	800147a <I2C_Master_ADDR+0x64>
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001522:	6802      	ldr	r2, [r0, #0]
 8001524:	6813      	ldr	r3, [r2, #0]
 8001526:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800152a:	6013      	str	r3, [r2, #0]
          if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800152c:	6803      	ldr	r3, [r0, #0]
 800152e:	685a      	ldr	r2, [r3, #4]
 8001530:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8001534:	d00c      	beq.n	8001550 <I2C_Master_ADDR+0x13a>
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800153c:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800153e:	2300      	movs	r3, #0
 8001540:	9303      	str	r3, [sp, #12]
 8001542:	6803      	ldr	r3, [r0, #0]
 8001544:	695a      	ldr	r2, [r3, #20]
 8001546:	9203      	str	r2, [sp, #12]
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	9303      	str	r3, [sp, #12]
 800154c:	9b03      	ldr	r3, [sp, #12]
 800154e:	e794      	b.n	800147a <I2C_Master_ADDR+0x64>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001550:	2200      	movs	r2, #0
 8001552:	9204      	str	r2, [sp, #16]
 8001554:	695a      	ldr	r2, [r3, #20]
 8001556:	9204      	str	r2, [sp, #16]
 8001558:	699a      	ldr	r2, [r3, #24]
 800155a:	9204      	str	r2, [sp, #16]
 800155c:	9a04      	ldr	r2, [sp, #16]
            hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	e788      	b.n	800147a <I2C_Master_ADDR+0x64>
            hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001568:	6802      	ldr	r2, [r0, #0]
 800156a:	6813      	ldr	r3, [r2, #0]
 800156c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001570:	6013      	str	r3, [r2, #0]
 8001572:	e7cd      	b.n	8001510 <I2C_Master_ADDR+0xfa>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001574:	6802      	ldr	r2, [r0, #0]
 8001576:	6813      	ldr	r3, [r2, #0]
 8001578:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800157c:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800157e:	2300      	movs	r3, #0
 8001580:	9306      	str	r3, [sp, #24]
 8001582:	6803      	ldr	r3, [r0, #0]
 8001584:	695a      	ldr	r2, [r3, #20]
 8001586:	9206      	str	r2, [sp, #24]
 8001588:	699a      	ldr	r2, [r3, #24]
 800158a:	9206      	str	r2, [sp, #24]
 800158c:	9a06      	ldr	r2, [sp, #24]
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	e770      	b.n	800147a <I2C_Master_ADDR+0x64>
        if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8001598:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800159a:	2b02      	cmp	r3, #2
 800159c:	d01b      	beq.n	80015d6 <I2C_Master_ADDR+0x1c0>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800159e:	6802      	ldr	r2, [r0, #0]
 80015a0:	6813      	ldr	r3, [r2, #0]
 80015a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80015a6:	6013      	str	r3, [r2, #0]
          hi2c->Instance->CR1 |= I2C_CR1_POS;
 80015a8:	6802      	ldr	r2, [r0, #0]
 80015aa:	6813      	ldr	r3, [r2, #0]
 80015ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015b0:	6013      	str	r3, [r2, #0]
        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80015b2:	6803      	ldr	r3, [r0, #0]
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80015ba:	d003      	beq.n	80015c4 <I2C_Master_ADDR+0x1ae>
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 80015bc:	685a      	ldr	r2, [r3, #4]
 80015be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80015c2:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015c4:	2300      	movs	r3, #0
 80015c6:	9307      	str	r3, [sp, #28]
 80015c8:	6803      	ldr	r3, [r0, #0]
 80015ca:	695a      	ldr	r2, [r3, #20]
 80015cc:	9207      	str	r2, [sp, #28]
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	9307      	str	r3, [sp, #28]
 80015d2:	9b07      	ldr	r3, [sp, #28]
 80015d4:	e751      	b.n	800147a <I2C_Master_ADDR+0x64>
          hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80015d6:	6802      	ldr	r2, [r0, #0]
 80015d8:	6813      	ldr	r3, [r2, #0]
 80015da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015de:	6013      	str	r3, [r2, #0]
 80015e0:	e7e7      	b.n	80015b2 <I2C_Master_ADDR+0x19c>

080015e2 <I2C_SlaveTransmit_BTF>:
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
  if(hi2c->XferCount != 0U)
 80015e2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	b14b      	cbz	r3, 80015fc <I2C_SlaveTransmit_BTF+0x1a>
  {
    /* Write data to DR */
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80015e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80015ea:	1c5a      	adds	r2, r3, #1
 80015ec:	6242      	str	r2, [r0, #36]	; 0x24
 80015ee:	6802      	ldr	r2, [r0, #0]
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	6113      	str	r3, [r2, #16]
    hi2c->XferCount--;
 80015f4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80015f6:	3b01      	subs	r3, #1
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	8543      	strh	r3, [r0, #42]	; 0x2a
  }
  return HAL_OK;
}
 80015fc:	2000      	movs	r0, #0
 80015fe:	4770      	bx	lr

08001600 <I2C_SlaveReceive_BTF>:
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
  if(hi2c->XferCount != 0U)
 8001600:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001602:	b29b      	uxth	r3, r3
 8001604:	b14b      	cbz	r3, 800161a <I2C_SlaveReceive_BTF+0x1a>
  {
    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001606:	6803      	ldr	r3, [r0, #0]
 8001608:	691a      	ldr	r2, [r3, #16]
 800160a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800160c:	1c59      	adds	r1, r3, #1
 800160e:	6241      	str	r1, [r0, #36]	; 0x24
 8001610:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8001612:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001614:	3b01      	subs	r3, #1
 8001616:	b29b      	uxth	r3, r3
 8001618:	8543      	strh	r3, [r0, #42]	; 0x2a
  }
  return HAL_OK;
}
 800161a:	2000      	movs	r0, #0
 800161c:	4770      	bx	lr

0800161e <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800161e:	6803      	ldr	r3, [r0, #0]
 8001620:	695a      	ldr	r2, [r3, #20]
 8001622:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001626:	d00d      	beq.n	8001644 <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001628:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800162c:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800162e:	2304      	movs	r3, #4
 8001630:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8001632:	2300      	movs	r3, #0
 8001634:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8001636:	2220      	movs	r2, #32
 8001638:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800163c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

    return HAL_ERROR;
 8001640:	2001      	movs	r0, #1
 8001642:	4770      	bx	lr
  }
  return HAL_OK;
 8001644:	2000      	movs	r0, #0
}
 8001646:	4770      	bx	lr

08001648 <I2C_WaitOnFlagUntilTimeout>:
{
 8001648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800164a:	4606      	mov	r6, r0
 800164c:	460c      	mov	r4, r1
 800164e:	4617      	mov	r7, r2
 8001650:	461d      	mov	r5, r3
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001652:	e01e      	b.n	8001692 <I2C_WaitOnFlagUntilTimeout+0x4a>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001654:	b12d      	cbz	r5, 8001662 <I2C_WaitOnFlagUntilTimeout+0x1a>
 8001656:	f7fe ff69 	bl	800052c <HAL_GetTick>
 800165a:	9b06      	ldr	r3, [sp, #24]
 800165c:	1ac0      	subs	r0, r0, r3
 800165e:	42a8      	cmp	r0, r5
 8001660:	d917      	bls.n	8001692 <I2C_WaitOnFlagUntilTimeout+0x4a>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001662:	2300      	movs	r3, #0
 8001664:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8001666:	2220      	movs	r2, #32
 8001668:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800166c:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        __HAL_UNLOCK(hi2c);
 8001670:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001674:	2003      	movs	r0, #3
 8001676:	e01a      	b.n	80016ae <I2C_WaitOnFlagUntilTimeout+0x66>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001678:	6833      	ldr	r3, [r6, #0]
 800167a:	695b      	ldr	r3, [r3, #20]
 800167c:	ea24 0303 	bic.w	r3, r4, r3
 8001680:	b29b      	uxth	r3, r3
 8001682:	fab3 f383 	clz	r3, r3
 8001686:	095b      	lsrs	r3, r3, #5
 8001688:	429f      	cmp	r7, r3
 800168a:	d10f      	bne.n	80016ac <I2C_WaitOnFlagUntilTimeout+0x64>
    if(Timeout != HAL_MAX_DELAY)
 800168c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001690:	d1e0      	bne.n	8001654 <I2C_WaitOnFlagUntilTimeout+0xc>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001692:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8001696:	2b01      	cmp	r3, #1
 8001698:	d0ee      	beq.n	8001678 <I2C_WaitOnFlagUntilTimeout+0x30>
 800169a:	6833      	ldr	r3, [r6, #0]
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	ea24 0303 	bic.w	r3, r4, r3
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	fab3 f383 	clz	r3, r3
 80016a8:	095b      	lsrs	r3, r3, #5
 80016aa:	e7ed      	b.n	8001688 <I2C_WaitOnFlagUntilTimeout+0x40>
  return HAL_OK;
 80016ac:	2000      	movs	r0, #0
}
 80016ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080016b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80016b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016b2:	4604      	mov	r4, r0
 80016b4:	460d      	mov	r5, r1
 80016b6:	4616      	mov	r6, r2
 80016b8:	461f      	mov	r7, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80016ba:	e032      	b.n	8001722 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016c2:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016c4:	6823      	ldr	r3, [r4, #0]
 80016c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80016ca:	615a      	str	r2, [r3, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80016cc:	2304      	movs	r3, #4
 80016ce:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 80016d0:	2300      	movs	r3, #0
 80016d2:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 80016d4:	2220      	movs	r2, #32
 80016d6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 80016da:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 80016de:	2001      	movs	r0, #1
 80016e0:	e02d      	b.n	800173e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8e>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80016e2:	b126      	cbz	r6, 80016ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>
 80016e4:	f7fe ff22 	bl	800052c <HAL_GetTick>
 80016e8:	1bc0      	subs	r0, r0, r7
 80016ea:	42b0      	cmp	r0, r6
 80016ec:	d919      	bls.n	8001722 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 80016ee:	2300      	movs	r3, #0
 80016f0:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80016f2:	2220      	movs	r2, #32
 80016f4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80016f8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 80016fc:	2003      	movs	r0, #3
 80016fe:	e01e      	b.n	800173e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8e>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001700:	6823      	ldr	r3, [r4, #0]
 8001702:	695b      	ldr	r3, [r3, #20]
 8001704:	ea25 0303 	bic.w	r3, r5, r3
 8001708:	b29b      	uxth	r3, r3
 800170a:	3300      	adds	r3, #0
 800170c:	bf18      	it	ne
 800170e:	2301      	movne	r3, #1
 8001710:	b1a3      	cbz	r3, 800173c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8c>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001712:	6823      	ldr	r3, [r4, #0]
 8001714:	695a      	ldr	r2, [r3, #20]
 8001716:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800171a:	d1cf      	bne.n	80016bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
    if(Timeout != HAL_MAX_DELAY)
 800171c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8001720:	d1df      	bne.n	80016e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x32>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001722:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8001726:	2b01      	cmp	r3, #1
 8001728:	d0ea      	beq.n	8001700 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x50>
 800172a:	6823      	ldr	r3, [r4, #0]
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	ea25 0303 	bic.w	r3, r5, r3
 8001732:	b29b      	uxth	r3, r3
 8001734:	3300      	adds	r3, #0
 8001736:	bf18      	it	ne
 8001738:	2301      	movne	r3, #1
 800173a:	e7e9      	b.n	8001710 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
  return HAL_OK;
 800173c:	2000      	movs	r0, #0
}
 800173e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001740 <I2C_MasterRequestWrite>:
{
 8001740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001742:	b083      	sub	sp, #12
 8001744:	4604      	mov	r4, r0
 8001746:	460d      	mov	r5, r1
 8001748:	4616      	mov	r6, r2
 800174a:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800174c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800174e:	2b04      	cmp	r3, #4
 8001750:	d00d      	beq.n	800176e <I2C_MasterRequestWrite+0x2e>
 8001752:	2b01      	cmp	r3, #1
 8001754:	d00b      	beq.n	800176e <I2C_MasterRequestWrite+0x2e>
 8001756:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800175a:	d008      	beq.n	800176e <I2C_MasterRequestWrite+0x2e>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800175c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800175e:	2b12      	cmp	r3, #18
 8001760:	d10a      	bne.n	8001778 <I2C_MasterRequestWrite+0x38>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001762:	6802      	ldr	r2, [r0, #0]
 8001764:	6813      	ldr	r3, [r2, #0]
 8001766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800176a:	6013      	str	r3, [r2, #0]
 800176c:	e004      	b.n	8001778 <I2C_MasterRequestWrite+0x38>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800176e:	6822      	ldr	r2, [r4, #0]
 8001770:	6813      	ldr	r3, [r2, #0]
 8001772:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001776:	6013      	str	r3, [r2, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001778:	9700      	str	r7, [sp, #0]
 800177a:	4633      	mov	r3, r6
 800177c:	2200      	movs	r2, #0
 800177e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001782:	4620      	mov	r0, r4
 8001784:	f7ff ff60 	bl	8001648 <I2C_WaitOnFlagUntilTimeout>
 8001788:	bb58      	cbnz	r0, 80017e2 <I2C_MasterRequestWrite+0xa2>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800178a:	6923      	ldr	r3, [r4, #16]
 800178c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001790:	d110      	bne.n	80017b4 <I2C_MasterRequestWrite+0x74>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001792:	6823      	ldr	r3, [r4, #0]
 8001794:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8001798:	611d      	str	r5, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800179a:	463b      	mov	r3, r7
 800179c:	4632      	mov	r2, r6
 800179e:	4915      	ldr	r1, [pc, #84]	; (80017f4 <I2C_MasterRequestWrite+0xb4>)
 80017a0:	4620      	mov	r0, r4
 80017a2:	f7ff ff85 	bl	80016b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017a6:	4603      	mov	r3, r0
 80017a8:	b1e0      	cbz	r0, 80017e4 <I2C_MasterRequestWrite+0xa4>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80017ac:	2b04      	cmp	r3, #4
 80017ae:	d11e      	bne.n	80017ee <I2C_MasterRequestWrite+0xae>
      return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e017      	b.n	80017e4 <I2C_MasterRequestWrite+0xa4>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80017b4:	11eb      	asrs	r3, r5, #7
 80017b6:	6822      	ldr	r2, [r4, #0]
 80017b8:	f003 0306 	and.w	r3, r3, #6
 80017bc:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80017c0:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80017c2:	463b      	mov	r3, r7
 80017c4:	4632      	mov	r2, r6
 80017c6:	490c      	ldr	r1, [pc, #48]	; (80017f8 <I2C_MasterRequestWrite+0xb8>)
 80017c8:	4620      	mov	r0, r4
 80017ca:	f7ff ff71 	bl	80016b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017ce:	b120      	cbz	r0, 80017da <I2C_MasterRequestWrite+0x9a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	d109      	bne.n	80017ea <I2C_MasterRequestWrite+0xaa>
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e004      	b.n	80017e4 <I2C_MasterRequestWrite+0xa4>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80017da:	6823      	ldr	r3, [r4, #0]
 80017dc:	b2ed      	uxtb	r5, r5
 80017de:	611d      	str	r5, [r3, #16]
 80017e0:	e7db      	b.n	800179a <I2C_MasterRequestWrite+0x5a>
    return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	b003      	add	sp, #12
 80017e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e7fa      	b.n	80017e4 <I2C_MasterRequestWrite+0xa4>
      return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e7f8      	b.n	80017e4 <I2C_MasterRequestWrite+0xa4>
 80017f2:	bf00      	nop
 80017f4:	00010002 	.word	0x00010002
 80017f8:	00010008 	.word	0x00010008

080017fc <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 80017fc:	b570      	push	{r4, r5, r6, lr}
 80017fe:	4604      	mov	r4, r0
 8001800:	460d      	mov	r5, r1
 8001802:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001804:	6823      	ldr	r3, [r4, #0]
 8001806:	695b      	ldr	r3, [r3, #20]
 8001808:	f013 0f80 	tst.w	r3, #128	; 0x80
 800180c:	d119      	bne.n	8001842 <I2C_WaitOnTXEFlagUntilTimeout+0x46>
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800180e:	4620      	mov	r0, r4
 8001810:	f7ff ff05 	bl	800161e <I2C_IsAcknowledgeFailed>
 8001814:	b9b8      	cbnz	r0, 8001846 <I2C_WaitOnTXEFlagUntilTimeout+0x4a>
    if(Timeout != HAL_MAX_DELAY)
 8001816:	f1b5 3fff 	cmp.w	r5, #4294967295
 800181a:	d0f3      	beq.n	8001804 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800181c:	b125      	cbz	r5, 8001828 <I2C_WaitOnTXEFlagUntilTimeout+0x2c>
 800181e:	f7fe fe85 	bl	800052c <HAL_GetTick>
 8001822:	1b80      	subs	r0, r0, r6
 8001824:	42a8      	cmp	r0, r5
 8001826:	d9ed      	bls.n	8001804 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001828:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800182a:	f043 0320 	orr.w	r3, r3, #32
 800182e:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8001830:	2300      	movs	r3, #0
 8001832:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8001834:	2220      	movs	r2, #32
 8001836:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 800183a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 800183e:	2003      	movs	r0, #3
 8001840:	e000      	b.n	8001844 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
  return HAL_OK;      
 8001842:	2000      	movs	r0, #0
}
 8001844:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001846:	2001      	movs	r0, #1
 8001848:	e7fc      	b.n	8001844 <I2C_WaitOnTXEFlagUntilTimeout+0x48>

0800184a <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 800184a:	b570      	push	{r4, r5, r6, lr}
 800184c:	4604      	mov	r4, r0
 800184e:	460d      	mov	r5, r1
 8001850:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001852:	6823      	ldr	r3, [r4, #0]
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	f013 0f04 	tst.w	r3, #4
 800185a:	d119      	bne.n	8001890 <I2C_WaitOnBTFFlagUntilTimeout+0x46>
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800185c:	4620      	mov	r0, r4
 800185e:	f7ff fede 	bl	800161e <I2C_IsAcknowledgeFailed>
 8001862:	b9b8      	cbnz	r0, 8001894 <I2C_WaitOnBTFFlagUntilTimeout+0x4a>
    if(Timeout != HAL_MAX_DELAY)
 8001864:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001868:	d0f3      	beq.n	8001852 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800186a:	b125      	cbz	r5, 8001876 <I2C_WaitOnBTFFlagUntilTimeout+0x2c>
 800186c:	f7fe fe5e 	bl	800052c <HAL_GetTick>
 8001870:	1b80      	subs	r0, r0, r6
 8001872:	42a8      	cmp	r0, r5
 8001874:	d9ed      	bls.n	8001852 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001876:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001878:	f043 0320 	orr.w	r3, r3, #32
 800187c:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 800187e:	2300      	movs	r3, #0
 8001880:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8001882:	2220      	movs	r2, #32
 8001884:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001888:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 800188c:	2003      	movs	r0, #3
 800188e:	e000      	b.n	8001892 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
  return HAL_OK;
 8001890:	2000      	movs	r0, #0
}
 8001892:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001894:	2001      	movs	r0, #1
 8001896:	e7fc      	b.n	8001892 <I2C_WaitOnBTFFlagUntilTimeout+0x48>

08001898 <HAL_I2C_Init>:
  if(hi2c == NULL)
 8001898:	2800      	cmp	r0, #0
 800189a:	f000 8082 	beq.w	80019a2 <HAL_I2C_Init+0x10a>
{
 800189e:	b510      	push	{r4, lr}
 80018a0:	4604      	mov	r4, r0
  if(hi2c->State == HAL_I2C_STATE_RESET)
 80018a2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d041      	beq.n	800192e <HAL_I2C_Init+0x96>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80018aa:	2324      	movs	r3, #36	; 0x24
 80018ac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80018b0:	6822      	ldr	r2, [r4, #0]
 80018b2:	6813      	ldr	r3, [r2, #0]
 80018b4:	f023 0301 	bic.w	r3, r3, #1
 80018b8:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018ba:	f001 fc97 	bl	80031ec <HAL_RCC_GetPCLK1Freq>
  freqrange = I2C_FREQRANGE(pclk1);
 80018be:	4b3a      	ldr	r3, [pc, #232]	; (80019a8 <HAL_I2C_Init+0x110>)
 80018c0:	fba3 2300 	umull	r2, r3, r3, r0
 80018c4:	0c9b      	lsrs	r3, r3, #18
  hi2c->Instance->CR2 = freqrange;
 80018c6:	6822      	ldr	r2, [r4, #0]
 80018c8:	6053      	str	r3, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80018ca:	6861      	ldr	r1, [r4, #4]
 80018cc:	4a37      	ldr	r2, [pc, #220]	; (80019ac <HAL_I2C_Init+0x114>)
 80018ce:	4291      	cmp	r1, r2
 80018d0:	d832      	bhi.n	8001938 <HAL_I2C_Init+0xa0>
 80018d2:	3301      	adds	r3, #1
 80018d4:	6822      	ldr	r2, [r4, #0]
 80018d6:	6213      	str	r3, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80018d8:	6863      	ldr	r3, [r4, #4]
 80018da:	4a34      	ldr	r2, [pc, #208]	; (80019ac <HAL_I2C_Init+0x114>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d835      	bhi.n	800194c <HAL_I2C_Init+0xb4>
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	fbb0 f0f3 	udiv	r0, r0, r3
 80018e6:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80018ea:	2b03      	cmp	r3, #3
 80018ec:	d800      	bhi.n	80018f0 <HAL_I2C_Init+0x58>
 80018ee:	2004      	movs	r0, #4
 80018f0:	6823      	ldr	r3, [r4, #0]
 80018f2:	61d8      	str	r0, [r3, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80018f4:	69e3      	ldr	r3, [r4, #28]
 80018f6:	6a21      	ldr	r1, [r4, #32]
 80018f8:	6822      	ldr	r2, [r4, #0]
 80018fa:	430b      	orrs	r3, r1
 80018fc:	6013      	str	r3, [r2, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80018fe:	6923      	ldr	r3, [r4, #16]
 8001900:	68e1      	ldr	r1, [r4, #12]
 8001902:	6822      	ldr	r2, [r4, #0]
 8001904:	430b      	orrs	r3, r1
 8001906:	6093      	str	r3, [r2, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001908:	6963      	ldr	r3, [r4, #20]
 800190a:	69a1      	ldr	r1, [r4, #24]
 800190c:	6822      	ldr	r2, [r4, #0]
 800190e:	430b      	orrs	r3, r1
 8001910:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001912:	6822      	ldr	r2, [r4, #0]
 8001914:	6813      	ldr	r3, [r2, #0]
 8001916:	f043 0301 	orr.w	r3, r3, #1
 800191a:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800191c:	2000      	movs	r0, #0
 800191e:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001920:	2320      	movs	r3, #32
 8001922:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001926:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001928:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 800192c:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800192e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001932:	f003 fb07 	bl	8004f44 <HAL_I2C_MspInit>
 8001936:	e7b8      	b.n	80018aa <HAL_I2C_Init+0x12>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001938:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800193c:	fb02 f303 	mul.w	r3, r2, r3
 8001940:	4a1b      	ldr	r2, [pc, #108]	; (80019b0 <HAL_I2C_Init+0x118>)
 8001942:	fba2 2303 	umull	r2, r3, r2, r3
 8001946:	099b      	lsrs	r3, r3, #6
 8001948:	3301      	adds	r3, #1
 800194a:	e7c3      	b.n	80018d4 <HAL_I2C_Init+0x3c>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800194c:	68a1      	ldr	r1, [r4, #8]
 800194e:	b989      	cbnz	r1, 8001974 <HAL_I2C_Init+0xdc>
 8001950:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8001954:	fbb0 f2f2 	udiv	r2, r0, r2
 8001958:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800195c:	fab2 f282 	clz	r2, r2
 8001960:	0952      	lsrs	r2, r2, #5
 8001962:	b9e2      	cbnz	r2, 800199e <HAL_I2C_Init+0x106>
 8001964:	b991      	cbnz	r1, 800198c <HAL_I2C_Init+0xf4>
 8001966:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800196a:	fbb0 f0f3 	udiv	r0, r0, r3
 800196e:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8001972:	e7bd      	b.n	80018f0 <HAL_I2C_Init+0x58>
 8001974:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8001978:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800197c:	fbb0 f2f2 	udiv	r2, r0, r2
 8001980:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001984:	fab2 f282 	clz	r2, r2
 8001988:	0952      	lsrs	r2, r2, #5
 800198a:	e7ea      	b.n	8001962 <HAL_I2C_Init+0xca>
 800198c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001990:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001994:	fbb0 f0f3 	udiv	r0, r0, r3
 8001998:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 800199c:	e7a8      	b.n	80018f0 <HAL_I2C_Init+0x58>
 800199e:	2001      	movs	r0, #1
 80019a0:	e7a6      	b.n	80018f0 <HAL_I2C_Init+0x58>
    return HAL_ERROR;
 80019a2:	2001      	movs	r0, #1
}
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	431bde83 	.word	0x431bde83
 80019ac:	000186a0 	.word	0x000186a0
 80019b0:	10624dd3 	.word	0x10624dd3

080019b4 <HAL_I2C_Master_Transmit>:
{
 80019b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019b8:	b084      	sub	sp, #16
 80019ba:	4604      	mov	r4, r0
 80019bc:	460e      	mov	r6, r1
 80019be:	4690      	mov	r8, r2
 80019c0:	461f      	mov	r7, r3
  tickstart = HAL_GetTick();
 80019c2:	f7fe fdb3 	bl	800052c <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 80019c6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	2b20      	cmp	r3, #32
 80019ce:	d004      	beq.n	80019da <HAL_I2C_Master_Transmit+0x26>
    return HAL_BUSY;
 80019d0:	2602      	movs	r6, #2
}
 80019d2:	4630      	mov	r0, r6
 80019d4:	b004      	add	sp, #16
 80019d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019da:	4605      	mov	r5, r0
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019dc:	9000      	str	r0, [sp, #0]
 80019de:	2319      	movs	r3, #25
 80019e0:	2201      	movs	r2, #1
 80019e2:	4954      	ldr	r1, [pc, #336]	; (8001b34 <HAL_I2C_Master_Transmit+0x180>)
 80019e4:	4620      	mov	r0, r4
 80019e6:	f7ff fe2f 	bl	8001648 <I2C_WaitOnFlagUntilTimeout>
 80019ea:	2800      	cmp	r0, #0
 80019ec:	f040 8099 	bne.w	8001b22 <HAL_I2C_Master_Transmit+0x16e>
    __HAL_LOCK(hi2c);
 80019f0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	f000 8096 	beq.w	8001b26 <HAL_I2C_Master_Transmit+0x172>
 80019fa:	2301      	movs	r3, #1
 80019fc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a00:	6823      	ldr	r3, [r4, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	f012 0f01 	tst.w	r2, #1
 8001a08:	d103      	bne.n	8001a12 <HAL_I2C_Master_Transmit+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	f042 0201 	orr.w	r2, r2, #1
 8001a10:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001a12:	6822      	ldr	r2, [r4, #0]
 8001a14:	6813      	ldr	r3, [r2, #0]
 8001a16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a1a:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a1c:	2321      	movs	r3, #33	; 0x21
 8001a1e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a22:	2310      	movs	r3, #16
 8001a24:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001a2c:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a30:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a32:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8001a36:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001a38:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001a3a:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a3c:	462b      	mov	r3, r5
 8001a3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001a40:	4631      	mov	r1, r6
 8001a42:	4620      	mov	r0, r4
 8001a44:	f7ff fe7c 	bl	8001740 <I2C_MasterRequestWrite>
 8001a48:	4606      	mov	r6, r0
 8001a4a:	b160      	cbz	r0, 8001a66 <HAL_I2C_Master_Transmit+0xb2>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	d104      	bne.n	8001a5c <HAL_I2C_Master_Transmit+0xa8>
        __HAL_UNLOCK(hi2c);
 8001a52:	2300      	movs	r3, #0
 8001a54:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8001a58:	2601      	movs	r6, #1
 8001a5a:	e7ba      	b.n	80019d2 <HAL_I2C_Master_Transmit+0x1e>
        __HAL_UNLOCK(hi2c);
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001a62:	2603      	movs	r6, #3
 8001a64:	e7b5      	b.n	80019d2 <HAL_I2C_Master_Transmit+0x1e>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a66:	2300      	movs	r3, #0
 8001a68:	9303      	str	r3, [sp, #12]
 8001a6a:	6823      	ldr	r3, [r4, #0]
 8001a6c:	695a      	ldr	r2, [r3, #20]
 8001a6e:	9203      	str	r2, [sp, #12]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	9303      	str	r3, [sp, #12]
 8001a74:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 8001a76:	e010      	b.n	8001a9a <HAL_I2C_Master_Transmit+0xe6>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a7a:	2b04      	cmp	r3, #4
 8001a7c:	d155      	bne.n	8001b2a <HAL_I2C_Master_Transmit+0x176>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001a7e:	6822      	ldr	r2, [r4, #0]
 8001a80:	6813      	ldr	r3, [r2, #0]
 8001a82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a86:	6013      	str	r3, [r2, #0]
          return HAL_ERROR;
 8001a88:	2601      	movs	r6, #1
 8001a8a:	e7a2      	b.n	80019d2 <HAL_I2C_Master_Transmit+0x1e>
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a8c:	462a      	mov	r2, r5
 8001a8e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001a90:	4620      	mov	r0, r4
 8001a92:	f7ff feda 	bl	800184a <I2C_WaitOnBTFFlagUntilTimeout>
 8001a96:	2800      	cmp	r0, #0
 8001a98:	d12b      	bne.n	8001af2 <HAL_I2C_Master_Transmit+0x13e>
    while(hi2c->XferSize > 0U)
 8001a9a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d032      	beq.n	8001b06 <HAL_I2C_Master_Transmit+0x152>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001aa0:	462a      	mov	r2, r5
 8001aa2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001aa4:	4620      	mov	r0, r4
 8001aa6:	f7ff fea9 	bl	80017fc <I2C_WaitOnTXEFlagUntilTimeout>
 8001aaa:	2800      	cmp	r0, #0
 8001aac:	d1e4      	bne.n	8001a78 <HAL_I2C_Master_Transmit+0xc4>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001aae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ab0:	1c5a      	adds	r2, r3, #1
 8001ab2:	6262      	str	r2, [r4, #36]	; 0x24
 8001ab4:	6822      	ldr	r2, [r4, #0]
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	6113      	str	r3, [r2, #16]
      hi2c->XferCount--;
 8001aba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001abc:	3b01      	subs	r3, #1
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001ac2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001aca:	6822      	ldr	r2, [r4, #0]
 8001acc:	6951      	ldr	r1, [r2, #20]
 8001ace:	f011 0f04 	tst.w	r1, #4
 8001ad2:	d0db      	beq.n	8001a8c <HAL_I2C_Master_Transmit+0xd8>
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d0d9      	beq.n	8001a8c <HAL_I2C_Master_Transmit+0xd8>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001ad8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ada:	1c59      	adds	r1, r3, #1
 8001adc:	6261      	str	r1, [r4, #36]	; 0x24
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	6113      	str	r3, [r2, #16]
        hi2c->XferCount--;
 8001ae2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001aea:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001aec:	3b01      	subs	r3, #1
 8001aee:	8523      	strh	r3, [r4, #40]	; 0x28
 8001af0:	e7cc      	b.n	8001a8c <HAL_I2C_Master_Transmit+0xd8>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001af2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001af4:	2b04      	cmp	r3, #4
 8001af6:	d11a      	bne.n	8001b2e <HAL_I2C_Master_Transmit+0x17a>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001af8:	6822      	ldr	r2, [r4, #0]
 8001afa:	6813      	ldr	r3, [r2, #0]
 8001afc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b00:	6013      	str	r3, [r2, #0]
          return HAL_ERROR;
 8001b02:	2601      	movs	r6, #1
 8001b04:	e765      	b.n	80019d2 <HAL_I2C_Master_Transmit+0x1e>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001b06:	6822      	ldr	r2, [r4, #0]
 8001b08:	6813      	ldr	r3, [r2, #0]
 8001b0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b0e:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001b10:	2320      	movs	r3, #32
 8001b12:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b16:	2300      	movs	r3, #0
 8001b18:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001b1c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001b20:	e757      	b.n	80019d2 <HAL_I2C_Master_Transmit+0x1e>
      return HAL_BUSY;
 8001b22:	2602      	movs	r6, #2
 8001b24:	e755      	b.n	80019d2 <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 8001b26:	2602      	movs	r6, #2
 8001b28:	e753      	b.n	80019d2 <HAL_I2C_Master_Transmit+0x1e>
          return HAL_TIMEOUT;
 8001b2a:	2603      	movs	r6, #3
 8001b2c:	e751      	b.n	80019d2 <HAL_I2C_Master_Transmit+0x1e>
          return HAL_TIMEOUT;
 8001b2e:	2603      	movs	r6, #3
 8001b30:	e74f      	b.n	80019d2 <HAL_I2C_Master_Transmit+0x1e>
 8001b32:	bf00      	nop
 8001b34:	00100002 	.word	0x00100002

08001b38 <HAL_I2C_Mem_Read_IT>:
{
 8001b38:	b470      	push	{r4, r5, r6}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	f8bd 601c 	ldrh.w	r6, [sp, #28]
  __IO uint32_t count = 0U;
 8001b40:	2400      	movs	r4, #0
 8001b42:	9401      	str	r4, [sp, #4]
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001b44:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8001b48:	b2e4      	uxtb	r4, r4
 8001b4a:	2c20      	cmp	r4, #32
 8001b4c:	d159      	bne.n	8001c02 <HAL_I2C_Mem_Read_IT+0xca>
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 8001b4e:	4c31      	ldr	r4, [pc, #196]	; (8001c14 <HAL_I2C_Mem_Read_IT+0xdc>)
 8001b50:	6824      	ldr	r4, [r4, #0]
 8001b52:	08e4      	lsrs	r4, r4, #3
 8001b54:	4d30      	ldr	r5, [pc, #192]	; (8001c18 <HAL_I2C_Mem_Read_IT+0xe0>)
 8001b56:	fba5 5404 	umull	r5, r4, r5, r4
 8001b5a:	0a24      	lsrs	r4, r4, #8
 8001b5c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8001b60:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8001b64:	9401      	str	r4, [sp, #4]
      if(count-- == 0U)
 8001b66:	9c01      	ldr	r4, [sp, #4]
 8001b68:	1e65      	subs	r5, r4, #1
 8001b6a:	9501      	str	r5, [sp, #4]
 8001b6c:	2c00      	cmp	r4, #0
 8001b6e:	d03f      	beq.n	8001bf0 <HAL_I2C_Mem_Read_IT+0xb8>
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001b70:	6804      	ldr	r4, [r0, #0]
 8001b72:	69a5      	ldr	r5, [r4, #24]
 8001b74:	f015 0f02 	tst.w	r5, #2
 8001b78:	d1f5      	bne.n	8001b66 <HAL_I2C_Mem_Read_IT+0x2e>
    __HAL_LOCK(hi2c);
 8001b7a:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
 8001b7e:	2d01      	cmp	r5, #1
 8001b80:	d043      	beq.n	8001c0a <HAL_I2C_Mem_Read_IT+0xd2>
 8001b82:	2501      	movs	r5, #1
 8001b84:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b88:	6825      	ldr	r5, [r4, #0]
 8001b8a:	f015 0f01 	tst.w	r5, #1
 8001b8e:	d103      	bne.n	8001b98 <HAL_I2C_Mem_Read_IT+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8001b90:	6825      	ldr	r5, [r4, #0]
 8001b92:	f045 0501 	orr.w	r5, r5, #1
 8001b96:	6025      	str	r5, [r4, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001b98:	6805      	ldr	r5, [r0, #0]
 8001b9a:	682c      	ldr	r4, [r5, #0]
 8001b9c:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 8001ba0:	602c      	str	r4, [r5, #0]
    hi2c->State = HAL_I2C_STATE_BUSY_RX;
 8001ba2:	2422      	movs	r4, #34	; 0x22
 8001ba4:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_MEM;
 8001ba8:	2440      	movs	r4, #64	; 0x40
 8001baa:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bae:	2400      	movs	r4, #0
 8001bb0:	6404      	str	r4, [r0, #64]	; 0x40
    hi2c->pBuffPtr = pData;
 8001bb2:	9d06      	ldr	r5, [sp, #24]
 8001bb4:	6245      	str	r5, [r0, #36]	; 0x24
    hi2c->XferSize = Size;
 8001bb6:	8506      	strh	r6, [r0, #40]	; 0x28
    hi2c->XferCount = Size;
 8001bb8:	8546      	strh	r6, [r0, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bba:	4d18      	ldr	r5, [pc, #96]	; (8001c1c <HAL_I2C_Mem_Read_IT+0xe4>)
 8001bbc:	62c5      	str	r5, [r0, #44]	; 0x2c
    hi2c->Devaddress = DevAddress;
 8001bbe:	6441      	str	r1, [r0, #68]	; 0x44
    hi2c->Memaddress = MemAddress;
 8001bc0:	6482      	str	r2, [r0, #72]	; 0x48
    hi2c->MemaddSize = MemAddSize;
 8001bc2:	64c3      	str	r3, [r0, #76]	; 0x4c
    hi2c->EventCount = 0U;
 8001bc4:	6504      	str	r4, [r0, #80]	; 0x50
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001bc6:	6802      	ldr	r2, [r0, #0]
 8001bc8:	6813      	ldr	r3, [r2, #0]
 8001bca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bce:	6013      	str	r3, [r2, #0]
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001bd0:	6802      	ldr	r2, [r0, #0]
 8001bd2:	6813      	ldr	r3, [r2, #0]
 8001bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd8:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8001bda:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    if(hi2c->XferSize > 0U)
 8001bde:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8001be0:	b1ab      	cbz	r3, 8001c0e <HAL_I2C_Mem_Read_IT+0xd6>
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001be2:	6802      	ldr	r2, [r0, #0]
 8001be4:	6853      	ldr	r3, [r2, #4]
 8001be6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bea:	6053      	str	r3, [r2, #4]
    return HAL_OK;
 8001bec:	4620      	mov	r0, r4
 8001bee:	e009      	b.n	8001c04 <HAL_I2C_Mem_Read_IT+0xcc>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8001bf4:	2220      	movs	r2, #32
 8001bf6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001bfa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        return HAL_TIMEOUT; 
 8001bfe:	2003      	movs	r0, #3
 8001c00:	e000      	b.n	8001c04 <HAL_I2C_Mem_Read_IT+0xcc>
    return HAL_BUSY;
 8001c02:	2002      	movs	r0, #2
}
 8001c04:	b003      	add	sp, #12
 8001c06:	bc70      	pop	{r4, r5, r6}
 8001c08:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001c0a:	2002      	movs	r0, #2
 8001c0c:	e7fa      	b.n	8001c04 <HAL_I2C_Mem_Read_IT+0xcc>
    return HAL_OK;
 8001c0e:	2000      	movs	r0, #0
 8001c10:	e7f8      	b.n	8001c04 <HAL_I2C_Mem_Read_IT+0xcc>
 8001c12:	bf00      	nop
 8001c14:	2000000c 	.word	0x2000000c
 8001c18:	14f8b589 	.word	0x14f8b589
 8001c1c:	ffff0000 	.word	0xffff0000

08001c20 <HAL_I2C_MasterTxCpltCallback>:
}
 8001c20:	4770      	bx	lr

08001c22 <HAL_I2C_MasterRxCpltCallback>:
}
 8001c22:	4770      	bx	lr

08001c24 <HAL_I2C_SlaveTxCpltCallback>:
}
 8001c24:	4770      	bx	lr

08001c26 <I2C_SlaveTransmit_TXE>:
{
 8001c26:	b508      	push	{r3, lr}
  uint32_t CurrentState = hi2c->State;
 8001c28:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001c2c:	b2da      	uxtb	r2, r3
  if(hi2c->XferCount != 0U)
 8001c2e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	b173      	cbz	r3, 8001c52 <I2C_SlaveTransmit_TXE+0x2c>
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001c34:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001c36:	1c59      	adds	r1, r3, #1
 8001c38:	6241      	str	r1, [r0, #36]	; 0x24
 8001c3a:	6801      	ldr	r1, [r0, #0]
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	610b      	str	r3, [r1, #16]
    hi2c->XferCount--;
 8001c40:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001c42:	3b01      	subs	r3, #1
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	8543      	strh	r3, [r0, #42]	; 0x2a
    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001c48:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	b90b      	cbnz	r3, 8001c52 <I2C_SlaveTransmit_TXE+0x2c>
 8001c4e:	2a29      	cmp	r2, #41	; 0x29
 8001c50:	d001      	beq.n	8001c56 <I2C_SlaveTransmit_TXE+0x30>
}
 8001c52:	2000      	movs	r0, #0
 8001c54:	bd08      	pop	{r3, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001c56:	6802      	ldr	r2, [r0, #0]
 8001c58:	6853      	ldr	r3, [r2, #4]
 8001c5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001c5e:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001c60:	2321      	movs	r3, #33	; 0x21
 8001c62:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001c64:	2328      	movs	r3, #40	; 0x28
 8001c66:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001c6a:	f7ff ffdb 	bl	8001c24 <HAL_I2C_SlaveTxCpltCallback>
 8001c6e:	e7f0      	b.n	8001c52 <I2C_SlaveTransmit_TXE+0x2c>

08001c70 <HAL_I2C_SlaveRxCpltCallback>:
}
 8001c70:	4770      	bx	lr

08001c72 <I2C_SlaveReceive_RXNE>:
  uint32_t CurrentState = hi2c->State;
 8001c72:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001c76:	b2da      	uxtb	r2, r3
  if(hi2c->XferCount != 0U)
 8001c78:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	b1f3      	cbz	r3, 8001cbc <I2C_SlaveReceive_RXNE+0x4a>
{
 8001c7e:	b510      	push	{r4, lr}
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001c80:	6803      	ldr	r3, [r0, #0]
 8001c82:	6919      	ldr	r1, [r3, #16]
 8001c84:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001c86:	1c5c      	adds	r4, r3, #1
 8001c88:	6244      	str	r4, [r0, #36]	; 0x24
 8001c8a:	7019      	strb	r1, [r3, #0]
    hi2c->XferCount--;
 8001c8c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	8543      	strh	r3, [r0, #42]	; 0x2a
    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001c94:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	b90b      	cbnz	r3, 8001c9e <I2C_SlaveReceive_RXNE+0x2c>
 8001c9a:	2a2a      	cmp	r2, #42	; 0x2a
 8001c9c:	d001      	beq.n	8001ca2 <I2C_SlaveReceive_RXNE+0x30>
}
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	bd10      	pop	{r4, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001ca2:	6802      	ldr	r2, [r0, #0]
 8001ca4:	6853      	ldr	r3, [r2, #4]
 8001ca6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001caa:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001cac:	2322      	movs	r3, #34	; 0x22
 8001cae:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001cb0:	2328      	movs	r3, #40	; 0x28
 8001cb2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001cb6:	f7ff ffdb 	bl	8001c70 <HAL_I2C_SlaveRxCpltCallback>
 8001cba:	e7f0      	b.n	8001c9e <I2C_SlaveReceive_RXNE+0x2c>
}
 8001cbc:	2000      	movs	r0, #0
 8001cbe:	4770      	bx	lr

08001cc0 <HAL_I2C_AddrCallback>:
}
 8001cc0:	4770      	bx	lr

08001cc2 <I2C_Slave_ADDR>:
{
 8001cc2:	b508      	push	{r3, lr}
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET)
 8001cc4:	6803      	ldr	r3, [r0, #0]
 8001cc6:	699a      	ldr	r2, [r3, #24]
 8001cc8:	f012 0f04 	tst.w	r2, #4
 8001ccc:	d009      	beq.n	8001ce2 <I2C_Slave_ADDR+0x20>
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8001cce:	2100      	movs	r1, #0
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001cd6:	d006      	beq.n	8001ce6 <I2C_Slave_ADDR+0x24>
    SlaveAddrCode = hi2c->Init.OwnAddress2;
 8001cd8:	8b02      	ldrh	r2, [r0, #24]
  HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8001cda:	f7ff fff1 	bl	8001cc0 <HAL_I2C_AddrCallback>
}
 8001cde:	2000      	movs	r0, #0
 8001ce0:	bd08      	pop	{r3, pc}
    TransferDirection = I2C_DIRECTION_TRANSMIT;
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	e7f4      	b.n	8001cd0 <I2C_Slave_ADDR+0xe>
    SlaveAddrCode = hi2c->Init.OwnAddress1;
 8001ce6:	8982      	ldrh	r2, [r0, #12]
 8001ce8:	e7f7      	b.n	8001cda <I2C_Slave_ADDR+0x18>

08001cea <HAL_I2C_ListenCpltCallback>:
}
 8001cea:	4770      	bx	lr

08001cec <I2C_Slave_AF>:
{
 8001cec:	b508      	push	{r3, lr}
  uint32_t CurrentState       = hi2c->State;
 8001cee:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001cf2:	b2db      	uxtb	r3, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001cf4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if(((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8001cf6:	2a04      	cmp	r2, #4
 8001cf8:	d001      	beq.n	8001cfe <I2C_Slave_AF+0x12>
 8001cfa:	2a08      	cmp	r2, #8
 8001cfc:	d101      	bne.n	8001d02 <I2C_Slave_AF+0x16>
 8001cfe:	2b28      	cmp	r3, #40	; 0x28
 8001d00:	d007      	beq.n	8001d12 <I2C_Slave_AF+0x26>
  else if(CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001d02:	2b21      	cmp	r3, #33	; 0x21
 8001d04:	d01f      	beq.n	8001d46 <I2C_Slave_AF+0x5a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d06:	6803      	ldr	r3, [r0, #0]
 8001d08:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d0c:	615a      	str	r2, [r3, #20]
}
 8001d0e:	2000      	movs	r0, #0
 8001d10:	bd08      	pop	{r3, pc}
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d12:	4b1a      	ldr	r3, [pc, #104]	; (8001d7c <I2C_Slave_AF+0x90>)
 8001d14:	62c3      	str	r3, [r0, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d16:	6802      	ldr	r2, [r0, #0]
 8001d18:	6853      	ldr	r3, [r2, #4]
 8001d1a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d1e:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d20:	6803      	ldr	r3, [r0, #0]
 8001d22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d26:	615a      	str	r2, [r3, #20]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001d28:	6802      	ldr	r2, [r0, #0]
 8001d2a:	6813      	ldr	r3, [r2, #0]
 8001d2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d30:	6013      	str	r3, [r2, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001d32:	2300      	movs	r3, #0
 8001d34:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 8001d36:	2220      	movs	r2, #32
 8001d38:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d3c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8001d40:	f7ff ffd3 	bl	8001cea <HAL_I2C_ListenCpltCallback>
 8001d44:	e7e3      	b.n	8001d0e <I2C_Slave_AF+0x22>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d46:	4b0d      	ldr	r3, [pc, #52]	; (8001d7c <I2C_Slave_AF+0x90>)
 8001d48:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001d4a:	2321      	movs	r3, #33	; 0x21
 8001d4c:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 8001d4e:	2320      	movs	r3, #32
 8001d50:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d54:	2300      	movs	r3, #0
 8001d56:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d5a:	6802      	ldr	r2, [r0, #0]
 8001d5c:	6853      	ldr	r3, [r2, #4]
 8001d5e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d62:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d64:	6803      	ldr	r3, [r0, #0]
 8001d66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d6a:	615a      	str	r2, [r3, #20]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001d6c:	6802      	ldr	r2, [r0, #0]
 8001d6e:	6813      	ldr	r3, [r2, #0]
 8001d70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d74:	6013      	str	r3, [r2, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001d76:	f7ff ff55 	bl	8001c24 <HAL_I2C_SlaveTxCpltCallback>
 8001d7a:	e7c8      	b.n	8001d0e <I2C_Slave_AF+0x22>
 8001d7c:	ffff0000 	.word	0xffff0000

08001d80 <HAL_I2C_MemTxCpltCallback>:
}
 8001d80:	4770      	bx	lr

08001d82 <I2C_MasterTransmit_TXE>:
{
 8001d82:	b510      	push	{r4, lr}
  uint32_t CurrentState       = hi2c->State;
 8001d84:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001d88:	b2db      	uxtb	r3, r3
  uint32_t CurrentMode        = hi2c->Mode;
 8001d8a:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8001d8e:	b2d2      	uxtb	r2, r2
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d90:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001d92:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8001d94:	b909      	cbnz	r1, 8001d9a <I2C_MasterTransmit_TXE+0x18>
 8001d96:	2b21      	cmp	r3, #33	; 0x21
 8001d98:	d005      	beq.n	8001da6 <I2C_MasterTransmit_TXE+0x24>
  else if((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001d9a:	2b21      	cmp	r3, #33	; 0x21
 8001d9c:	d03c      	beq.n	8001e18 <I2C_MasterTransmit_TXE+0x96>
 8001d9e:	2a40      	cmp	r2, #64	; 0x40
 8001da0:	d038      	beq.n	8001e14 <I2C_MasterTransmit_TXE+0x92>
}
 8001da2:	2000      	movs	r0, #0
 8001da4:	bd10      	pop	{r4, pc}
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001da6:	2c04      	cmp	r4, #4
 8001da8:	d004      	beq.n	8001db4 <I2C_MasterTransmit_TXE+0x32>
 8001daa:	2c08      	cmp	r4, #8
 8001dac:	d002      	beq.n	8001db4 <I2C_MasterTransmit_TXE+0x32>
 8001dae:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
 8001db2:	d119      	bne.n	8001de8 <I2C_MasterTransmit_TXE+0x66>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001db4:	6802      	ldr	r2, [r0, #0]
 8001db6:	6853      	ldr	r3, [r2, #4]
 8001db8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001dbc:	6053      	str	r3, [r2, #4]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001dbe:	6802      	ldr	r2, [r0, #0]
 8001dc0:	6813      	ldr	r3, [r2, #0]
 8001dc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dc6:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001dcc:	2320      	movs	r3, #32
 8001dce:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001dd2:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b40      	cmp	r3, #64	; 0x40
 8001dda:	d015      	beq.n	8001e08 <I2C_MasterTransmit_TXE+0x86>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001de2:	f7ff ff1d 	bl	8001c20 <HAL_I2C_MasterTxCpltCallback>
 8001de6:	e7dc      	b.n	8001da2 <I2C_MasterTransmit_TXE+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001de8:	6802      	ldr	r2, [r0, #0]
 8001dea:	6853      	ldr	r3, [r2, #4]
 8001dec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001df0:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001df2:	2311      	movs	r3, #17
 8001df4:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001df6:	2300      	movs	r3, #0
 8001df8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001dfc:	2320      	movs	r3, #32
 8001dfe:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001e02:	f7ff ff0d 	bl	8001c20 <HAL_I2C_MasterTxCpltCallback>
 8001e06:	e7cc      	b.n	8001da2 <I2C_MasterTransmit_TXE+0x20>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001e0e:	f7ff ffb7 	bl	8001d80 <HAL_I2C_MemTxCpltCallback>
 8001e12:	e7c6      	b.n	8001da2 <I2C_MasterTransmit_TXE+0x20>
    ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001e14:	2b22      	cmp	r3, #34	; 0x22
 8001e16:	d1c4      	bne.n	8001da2 <I2C_MasterTransmit_TXE+0x20>
    if(hi2c->XferCount == 0U)
 8001e18:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	b17b      	cbz	r3, 8001e3e <I2C_MasterTransmit_TXE+0xbc>
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e1e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b40      	cmp	r3, #64	; 0x40
 8001e26:	d010      	beq.n	8001e4a <I2C_MasterTransmit_TXE+0xc8>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001e28:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001e2a:	1c5a      	adds	r2, r3, #1
 8001e2c:	6242      	str	r2, [r0, #36]	; 0x24
 8001e2e:	6802      	ldr	r2, [r0, #0]
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	6113      	str	r3, [r2, #16]
        hi2c->XferCount--;
 8001e34:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001e36:	3b01      	subs	r3, #1
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	8543      	strh	r3, [r0, #42]	; 0x2a
 8001e3c:	e7b1      	b.n	8001da2 <I2C_MasterTransmit_TXE+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001e3e:	6802      	ldr	r2, [r0, #0]
 8001e40:	6853      	ldr	r3, [r2, #4]
 8001e42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e46:	6053      	str	r3, [r2, #4]
 8001e48:	e7ab      	b.n	8001da2 <I2C_MasterTransmit_TXE+0x20>
        if(hi2c->EventCount == 0)
 8001e4a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001e4c:	b99b      	cbnz	r3, 8001e76 <I2C_MasterTransmit_TXE+0xf4>
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001e4e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d008      	beq.n	8001e66 <I2C_MasterTransmit_TXE+0xe4>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001e54:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001e56:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8001e5a:	6802      	ldr	r2, [r0, #0]
 8001e5c:	6113      	str	r3, [r2, #16]
            hi2c->EventCount++;
 8001e5e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001e60:	3301      	adds	r3, #1
 8001e62:	6503      	str	r3, [r0, #80]	; 0x50
 8001e64:	e79d      	b.n	8001da2 <I2C_MasterTransmit_TXE+0x20>
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001e66:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001e68:	6802      	ldr	r2, [r0, #0]
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	6113      	str	r3, [r2, #16]
            hi2c->EventCount += 2;
 8001e6e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001e70:	3302      	adds	r3, #2
 8001e72:	6503      	str	r3, [r0, #80]	; 0x50
 8001e74:	e795      	b.n	8001da2 <I2C_MasterTransmit_TXE+0x20>
        else if(hi2c->EventCount == 1)
 8001e76:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d017      	beq.n	8001eac <I2C_MasterTransmit_TXE+0x12a>
        else if(hi2c->EventCount == 2)
 8001e7c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d18f      	bne.n	8001da2 <I2C_MasterTransmit_TXE+0x20>
          if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001e82:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b22      	cmp	r3, #34	; 0x22
 8001e8a:	d017      	beq.n	8001ebc <I2C_MasterTransmit_TXE+0x13a>
          else if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001e8c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b21      	cmp	r3, #33	; 0x21
 8001e94:	d185      	bne.n	8001da2 <I2C_MasterTransmit_TXE+0x20>
            hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001e96:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001e98:	1c5a      	adds	r2, r3, #1
 8001e9a:	6242      	str	r2, [r0, #36]	; 0x24
 8001e9c:	6802      	ldr	r2, [r0, #0]
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	6113      	str	r3, [r2, #16]
            hi2c->XferCount--;
 8001ea2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	8543      	strh	r3, [r0, #42]	; 0x2a
 8001eaa:	e77a      	b.n	8001da2 <I2C_MasterTransmit_TXE+0x20>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001eac:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001eae:	6802      	ldr	r2, [r0, #0]
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	6113      	str	r3, [r2, #16]
          hi2c->EventCount++;
 8001eb4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	6503      	str	r3, [r0, #80]	; 0x50
 8001eba:	e772      	b.n	8001da2 <I2C_MasterTransmit_TXE+0x20>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8001ebc:	6802      	ldr	r2, [r0, #0]
 8001ebe:	6813      	ldr	r3, [r2, #0]
 8001ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec4:	6013      	str	r3, [r2, #0]
 8001ec6:	e76c      	b.n	8001da2 <I2C_MasterTransmit_TXE+0x20>

08001ec8 <I2C_MasterTransmit_BTF>:
{
 8001ec8:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001eca:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001ecc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b21      	cmp	r3, #33	; 0x21
 8001ed4:	d001      	beq.n	8001eda <I2C_MasterTransmit_BTF+0x12>
}
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	bd08      	pop	{r3, pc}
    if(hi2c->XferCount != 0U)
 8001eda:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	bb03      	cbnz	r3, 8001f22 <I2C_MasterTransmit_BTF+0x5a>
      if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001ee0:	2a04      	cmp	r2, #4
 8001ee2:	d004      	beq.n	8001eee <I2C_MasterTransmit_BTF+0x26>
 8001ee4:	2a08      	cmp	r2, #8
 8001ee6:	d002      	beq.n	8001eee <I2C_MasterTransmit_BTF+0x26>
 8001ee8:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001eec:	d124      	bne.n	8001f38 <I2C_MasterTransmit_BTF+0x70>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001eee:	6802      	ldr	r2, [r0, #0]
 8001ef0:	6853      	ldr	r3, [r2, #4]
 8001ef2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ef6:	6053      	str	r3, [r2, #4]
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001ef8:	6802      	ldr	r2, [r0, #0]
 8001efa:	6813      	ldr	r3, [r2, #0]
 8001efc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f00:	6013      	str	r3, [r2, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001f02:	2300      	movs	r3, #0
 8001f04:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001f06:	2320      	movs	r3, #32
 8001f08:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f0c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b40      	cmp	r3, #64	; 0x40
 8001f14:	d020      	beq.n	8001f58 <I2C_MasterTransmit_BTF+0x90>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f16:	2300      	movs	r3, #0
 8001f18:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001f1c:	f7ff fe80 	bl	8001c20 <HAL_I2C_MasterTxCpltCallback>
 8001f20:	e7d9      	b.n	8001ed6 <I2C_MasterTransmit_BTF+0xe>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001f22:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001f24:	1c5a      	adds	r2, r3, #1
 8001f26:	6242      	str	r2, [r0, #36]	; 0x24
 8001f28:	6802      	ldr	r2, [r0, #0]
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	6113      	str	r3, [r2, #16]
      hi2c->XferCount--;
 8001f2e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001f30:	3b01      	subs	r3, #1
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	8543      	strh	r3, [r0, #42]	; 0x2a
 8001f36:	e7ce      	b.n	8001ed6 <I2C_MasterTransmit_BTF+0xe>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f38:	6802      	ldr	r2, [r0, #0]
 8001f3a:	6853      	ldr	r3, [r2, #4]
 8001f3c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f40:	6053      	str	r3, [r2, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001f42:	2311      	movs	r3, #17
 8001f44:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f46:	2300      	movs	r3, #0
 8001f48:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001f4c:	2320      	movs	r3, #32
 8001f4e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001f52:	f7ff fe65 	bl	8001c20 <HAL_I2C_MasterTxCpltCallback>
 8001f56:	e7be      	b.n	8001ed6 <I2C_MasterTransmit_BTF+0xe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001f5e:	f7ff ff0f 	bl	8001d80 <HAL_I2C_MemTxCpltCallback>
 8001f62:	e7b8      	b.n	8001ed6 <I2C_MasterTransmit_BTF+0xe>

08001f64 <I2C_MasterReceive_RXNE>:
{
 8001f64:	b508      	push	{r3, lr}
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001f66:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	2b22      	cmp	r3, #34	; 0x22
 8001f6e:	d001      	beq.n	8001f74 <I2C_MasterReceive_RXNE+0x10>
}
 8001f70:	2000      	movs	r0, #0
 8001f72:	bd08      	pop	{r3, pc}
    tmp = hi2c->XferCount;
 8001f74:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001f76:	b29b      	uxth	r3, r3
    if(tmp > 3U)
 8001f78:	2b03      	cmp	r3, #3
 8001f7a:	d913      	bls.n	8001fa4 <I2C_MasterReceive_RXNE+0x40>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001f7c:	6803      	ldr	r3, [r0, #0]
 8001f7e:	691a      	ldr	r2, [r3, #16]
 8001f80:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001f82:	1c59      	adds	r1, r3, #1
 8001f84:	6241      	str	r1, [r0, #36]	; 0x24
 8001f86:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8001f88:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	8543      	strh	r3, [r0, #42]	; 0x2a
      if(hi2c->XferCount == 3)
 8001f90:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	2b03      	cmp	r3, #3
 8001f96:	d1eb      	bne.n	8001f70 <I2C_MasterReceive_RXNE+0xc>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001f98:	6802      	ldr	r2, [r0, #0]
 8001f9a:	6853      	ldr	r3, [r2, #4]
 8001f9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001fa0:	6053      	str	r3, [r2, #4]
 8001fa2:	e7e5      	b.n	8001f70 <I2C_MasterReceive_RXNE+0xc>
    else if((tmp == 1U) || (tmp == 0U))
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d8e3      	bhi.n	8001f70 <I2C_MasterReceive_RXNE+0xc>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001fa8:	6802      	ldr	r2, [r0, #0]
 8001faa:	6813      	ldr	r3, [r2, #0]
 8001fac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001fb0:	6013      	str	r3, [r2, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001fb2:	6802      	ldr	r2, [r0, #0]
 8001fb4:	6853      	ldr	r3, [r2, #4]
 8001fb6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001fba:	6053      	str	r3, [r2, #4]
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001fbc:	6803      	ldr	r3, [r0, #0]
 8001fbe:	691a      	ldr	r2, [r3, #16]
 8001fc0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001fc2:	1c59      	adds	r1, r3, #1
 8001fc4:	6241      	str	r1, [r0, #36]	; 0x24
 8001fc6:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8001fc8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8001fd0:	2320      	movs	r3, #32
 8001fd2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      hi2c->PreviousState = I2C_STATE_NONE;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	6303      	str	r3, [r0, #48]	; 0x30
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001fda:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b40      	cmp	r3, #64	; 0x40
 8001fe2:	d005      	beq.n	8001ff0 <I2C_MasterReceive_RXNE+0x8c>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8001fea:	f7ff fe1a 	bl	8001c22 <HAL_I2C_MasterRxCpltCallback>
 8001fee:	e7bf      	b.n	8001f70 <I2C_MasterReceive_RXNE+0xc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MemRxCpltCallback(hi2c);
 8001ff6:	f002 fd29 	bl	8004a4c <HAL_I2C_MemRxCpltCallback>
 8001ffa:	e7b9      	b.n	8001f70 <I2C_MasterReceive_RXNE+0xc>

08001ffc <I2C_MasterReceive_BTF>:
{
 8001ffc:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ffe:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if(hi2c->XferCount == 4U)
 8002000:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002002:	b29b      	uxth	r3, r3
 8002004:	2b04      	cmp	r3, #4
 8002006:	d013      	beq.n	8002030 <I2C_MasterReceive_BTF+0x34>
  else if(hi2c->XferCount == 3U)
 8002008:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800200a:	b29b      	uxth	r3, r3
 800200c:	2b03      	cmp	r3, #3
 800200e:	d01f      	beq.n	8002050 <I2C_MasterReceive_BTF+0x54>
  else if(hi2c->XferCount == 2U)
 8002010:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002012:	b29b      	uxth	r3, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d030      	beq.n	800207a <I2C_MasterReceive_BTF+0x7e>
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002018:	6803      	ldr	r3, [r0, #0]
 800201a:	691a      	ldr	r2, [r3, #16]
 800201c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800201e:	1c59      	adds	r1, r3, #1
 8002020:	6241      	str	r1, [r0, #36]	; 0x24
 8002022:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8002024:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002026:	3b01      	subs	r3, #1
 8002028:	b29b      	uxth	r3, r3
 800202a:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 800202c:	2000      	movs	r0, #0
 800202e:	bd08      	pop	{r3, pc}
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002030:	6802      	ldr	r2, [r0, #0]
 8002032:	6853      	ldr	r3, [r2, #4]
 8002034:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002038:	6053      	str	r3, [r2, #4]
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800203a:	6803      	ldr	r3, [r0, #0]
 800203c:	691a      	ldr	r2, [r3, #16]
 800203e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002040:	1c59      	adds	r1, r3, #1
 8002042:	6241      	str	r1, [r0, #36]	; 0x24
 8002044:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8002046:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002048:	3b01      	subs	r3, #1
 800204a:	b29b      	uxth	r3, r3
 800204c:	8543      	strh	r3, [r0, #42]	; 0x2a
 800204e:	e7ed      	b.n	800202c <I2C_MasterReceive_BTF+0x30>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002050:	6802      	ldr	r2, [r0, #0]
 8002052:	6853      	ldr	r3, [r2, #4]
 8002054:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002058:	6053      	str	r3, [r2, #4]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800205a:	6802      	ldr	r2, [r0, #0]
 800205c:	6813      	ldr	r3, [r2, #0]
 800205e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002062:	6013      	str	r3, [r2, #0]
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002064:	6803      	ldr	r3, [r0, #0]
 8002066:	691a      	ldr	r2, [r3, #16]
 8002068:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800206a:	1c59      	adds	r1, r3, #1
 800206c:	6241      	str	r1, [r0, #36]	; 0x24
 800206e:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8002070:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002072:	3b01      	subs	r3, #1
 8002074:	b29b      	uxth	r3, r3
 8002076:	8543      	strh	r3, [r0, #42]	; 0x2a
 8002078:	e7d8      	b.n	800202c <I2C_MasterReceive_BTF+0x30>
    if((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME))
 800207a:	3a01      	subs	r2, #1
 800207c:	2a01      	cmp	r2, #1
 800207e:	d92d      	bls.n	80020dc <I2C_MasterReceive_BTF+0xe0>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002080:	6802      	ldr	r2, [r0, #0]
 8002082:	6813      	ldr	r3, [r2, #0]
 8002084:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002088:	6013      	str	r3, [r2, #0]
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800208a:	6803      	ldr	r3, [r0, #0]
 800208c:	691a      	ldr	r2, [r3, #16]
 800208e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002090:	1c59      	adds	r1, r3, #1
 8002092:	6241      	str	r1, [r0, #36]	; 0x24
 8002094:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8002096:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002098:	3b01      	subs	r3, #1
 800209a:	b29b      	uxth	r3, r3
 800209c:	8543      	strh	r3, [r0, #42]	; 0x2a
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800209e:	6803      	ldr	r3, [r0, #0]
 80020a0:	691a      	ldr	r2, [r3, #16]
 80020a2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80020a4:	1c59      	adds	r1, r3, #1
 80020a6:	6241      	str	r1, [r0, #36]	; 0x24
 80020a8:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 80020aa:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80020ac:	3b01      	subs	r3, #1
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	8543      	strh	r3, [r0, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80020b2:	6802      	ldr	r2, [r0, #0]
 80020b4:	6853      	ldr	r3, [r2, #4]
 80020b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020ba:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80020bc:	2320      	movs	r3, #32
 80020be:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 80020c2:	2300      	movs	r3, #0
 80020c4:	6303      	str	r3, [r0, #48]	; 0x30
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80020c6:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b40      	cmp	r3, #64	; 0x40
 80020ce:	d010      	beq.n	80020f2 <I2C_MasterReceive_BTF+0xf6>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020d0:	2300      	movs	r3, #0
 80020d2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80020d6:	f7ff fda4 	bl	8001c22 <HAL_I2C_MasterRxCpltCallback>
 80020da:	e7a7      	b.n	800202c <I2C_MasterReceive_BTF+0x30>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80020dc:	6802      	ldr	r2, [r0, #0]
 80020de:	6813      	ldr	r3, [r2, #0]
 80020e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80020e4:	6013      	str	r3, [r2, #0]
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80020e6:	6802      	ldr	r2, [r0, #0]
 80020e8:	6813      	ldr	r3, [r2, #0]
 80020ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ee:	6013      	str	r3, [r2, #0]
 80020f0:	e7cb      	b.n	800208a <I2C_MasterReceive_BTF+0x8e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020f2:	2300      	movs	r3, #0
 80020f4:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_MemRxCpltCallback(hi2c);
 80020f8:	f002 fca8 	bl	8004a4c <HAL_I2C_MemRxCpltCallback>
 80020fc:	e796      	b.n	800202c <I2C_MasterReceive_BTF+0x30>

080020fe <HAL_I2C_ErrorCallback>:
}
 80020fe:	4770      	bx	lr

08002100 <HAL_I2C_AbortCpltCallback>:
}
 8002100:	4770      	bx	lr
	...

08002104 <I2C_ITError>:
{
 8002104:	b510      	push	{r4, lr}
 8002106:	4604      	mov	r4, r0
  uint32_t CurrentState = hi2c->State;
 8002108:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800210c:	3b29      	subs	r3, #41	; 0x29
 800210e:	2b01      	cmp	r3, #1
 8002110:	d937      	bls.n	8002182 <I2C_ITError+0x7e>
    if((hi2c->State != HAL_I2C_STATE_ABORT) && ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) != I2C_CR2_DMAEN))
 8002112:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2b60      	cmp	r3, #96	; 0x60
 800211a:	d007      	beq.n	800212c <I2C_ITError+0x28>
 800211c:	6803      	ldr	r3, [r0, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002124:	d102      	bne.n	800212c <I2C_ITError+0x28>
      hi2c->State = HAL_I2C_STATE_READY;
 8002126:	2320      	movs	r3, #32
 8002128:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 800212c:	2300      	movs	r3, #0
 800212e:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002130:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002134:	6822      	ldr	r2, [r4, #0]
 8002136:	6813      	ldr	r3, [r2, #0]
 8002138:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800213c:	6013      	str	r3, [r2, #0]
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800213e:	6823      	ldr	r3, [r4, #0]
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8002146:	d03f      	beq.n	80021c8 <I2C_ITError+0xc4>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002148:	685a      	ldr	r2, [r3, #4]
 800214a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800214e:	605a      	str	r2, [r3, #4]
    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002150:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002152:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8002156:	b2db      	uxtb	r3, r3
 8002158:	2b01      	cmp	r3, #1
 800215a:	d018      	beq.n	800218e <I2C_ITError+0x8a>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800215c:	4b3a      	ldr	r3, [pc, #232]	; (8002248 <I2C_ITError+0x144>)
 800215e:	6513      	str	r3, [r2, #80]	; 0x50
      if(HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002160:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002162:	f7fe fb1b 	bl	800079c <HAL_DMA_Abort_IT>
 8002166:	2800      	cmp	r0, #0
 8002168:	d03f      	beq.n	80021ea <I2C_ITError+0xe6>
        __HAL_I2C_DISABLE(hi2c);
 800216a:	6822      	ldr	r2, [r4, #0]
 800216c:	6813      	ldr	r3, [r2, #0]
 800216e:	f023 0301 	bic.w	r3, r3, #1
 8002172:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8002174:	2320      	movs	r3, #32
 8002176:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800217a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800217c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800217e:	4798      	blx	r3
 8002180:	e033      	b.n	80021ea <I2C_ITError+0xe6>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002182:	2300      	movs	r3, #0
 8002184:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002186:	2328      	movs	r3, #40	; 0x28
 8002188:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 800218c:	e7d2      	b.n	8002134 <I2C_ITError+0x30>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800218e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002190:	4a2d      	ldr	r2, [pc, #180]	; (8002248 <I2C_ITError+0x144>)
 8002192:	651a      	str	r2, [r3, #80]	; 0x50
      if(HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002194:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002196:	f7fe fb01 	bl	800079c <HAL_DMA_Abort_IT>
 800219a:	b330      	cbz	r0, 80021ea <I2C_ITError+0xe6>
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800219c:	6823      	ldr	r3, [r4, #0]
 800219e:	695a      	ldr	r2, [r3, #20]
 80021a0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80021a4:	d004      	beq.n	80021b0 <I2C_ITError+0xac>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80021a6:	691a      	ldr	r2, [r3, #16]
 80021a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80021aa:	1c59      	adds	r1, r3, #1
 80021ac:	6261      	str	r1, [r4, #36]	; 0x24
 80021ae:	701a      	strb	r2, [r3, #0]
        __HAL_I2C_DISABLE(hi2c);
 80021b0:	6822      	ldr	r2, [r4, #0]
 80021b2:	6813      	ldr	r3, [r2, #0]
 80021b4:	f023 0301 	bic.w	r3, r3, #1
 80021b8:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 80021ba:	2320      	movs	r3, #32
 80021bc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80021c0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80021c2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80021c4:	4798      	blx	r3
 80021c6:	e010      	b.n	80021ea <I2C_ITError+0xe6>
  else if(hi2c->State == HAL_I2C_STATE_ABORT)
 80021c8:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	2a60      	cmp	r2, #96	; 0x60
 80021d0:	d011      	beq.n	80021f6 <I2C_ITError+0xf2>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80021d2:	695a      	ldr	r2, [r3, #20]
 80021d4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80021d8:	d004      	beq.n	80021e4 <I2C_ITError+0xe0>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80021da:	691a      	ldr	r2, [r3, #16]
 80021dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80021de:	1c59      	adds	r1, r3, #1
 80021e0:	6261      	str	r1, [r4, #36]	; 0x24
 80021e2:	701a      	strb	r2, [r3, #0]
    HAL_I2C_ErrorCallback(hi2c);
 80021e4:	4620      	mov	r0, r4
 80021e6:	f7ff ff8a 	bl	80020fe <HAL_I2C_ErrorCallback>
  if((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF))
 80021ea:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b28      	cmp	r3, #40	; 0x28
 80021f2:	d017      	beq.n	8002224 <I2C_ITError+0x120>
}
 80021f4:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80021f6:	2220      	movs	r2, #32
 80021f8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021fc:	2200      	movs	r2, #0
 80021fe:	6422      	str	r2, [r4, #64]	; 0x40
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002200:	695a      	ldr	r2, [r3, #20]
 8002202:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002206:	d004      	beq.n	8002212 <I2C_ITError+0x10e>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002208:	691a      	ldr	r2, [r3, #16]
 800220a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800220c:	1c59      	adds	r1, r3, #1
 800220e:	6261      	str	r1, [r4, #36]	; 0x24
 8002210:	701a      	strb	r2, [r3, #0]
    __HAL_I2C_DISABLE(hi2c);
 8002212:	6822      	ldr	r2, [r4, #0]
 8002214:	6813      	ldr	r3, [r2, #0]
 8002216:	f023 0301 	bic.w	r3, r3, #1
 800221a:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 800221c:	4620      	mov	r0, r4
 800221e:	f7ff ff6f 	bl	8002100 <HAL_I2C_AbortCpltCallback>
 8002222:	e7e2      	b.n	80021ea <I2C_ITError+0xe6>
  if((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF))
 8002224:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002226:	f013 0f04 	tst.w	r3, #4
 800222a:	d0e3      	beq.n	80021f4 <I2C_ITError+0xf0>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800222c:	4b07      	ldr	r3, [pc, #28]	; (800224c <I2C_ITError+0x148>)
 800222e:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002230:	2300      	movs	r3, #0
 8002232:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 8002234:	2220      	movs	r2, #32
 8002236:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800223a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 800223e:	4620      	mov	r0, r4
 8002240:	f7ff fd53 	bl	8001cea <HAL_I2C_ListenCpltCallback>
}
 8002244:	e7d6      	b.n	80021f4 <I2C_ITError+0xf0>
 8002246:	bf00      	nop
 8002248:	0800258d 	.word	0x0800258d
 800224c:	ffff0000 	.word	0xffff0000

08002250 <I2C_Slave_STOPF>:
{
 8002250:	b510      	push	{r4, lr}
 8002252:	b082      	sub	sp, #8
  uint32_t CurrentState = hi2c->State;
 8002254:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002258:	b2db      	uxtb	r3, r3
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800225a:	6801      	ldr	r1, [r0, #0]
 800225c:	684a      	ldr	r2, [r1, #4]
 800225e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002262:	604a      	str	r2, [r1, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002264:	2200      	movs	r2, #0
 8002266:	9201      	str	r2, [sp, #4]
 8002268:	6802      	ldr	r2, [r0, #0]
 800226a:	6951      	ldr	r1, [r2, #20]
 800226c:	9101      	str	r1, [sp, #4]
 800226e:	6811      	ldr	r1, [r2, #0]
 8002270:	f041 0101 	orr.w	r1, r1, #1
 8002274:	6011      	str	r1, [r2, #0]
 8002276:	9a01      	ldr	r2, [sp, #4]
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002278:	6801      	ldr	r1, [r0, #0]
 800227a:	680a      	ldr	r2, [r1, #0]
 800227c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002280:	600a      	str	r2, [r1, #0]
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002282:	6801      	ldr	r1, [r0, #0]
 8002284:	684a      	ldr	r2, [r1, #4]
 8002286:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800228a:	d014      	beq.n	80022b6 <I2C_Slave_STOPF+0x66>
    if((hi2c->State == HAL_I2C_STATE_BUSY_RX) || (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800228c:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8002290:	b2d2      	uxtb	r2, r2
 8002292:	2a22      	cmp	r2, #34	; 0x22
 8002294:	d00a      	beq.n	80022ac <I2C_Slave_STOPF+0x5c>
 8002296:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	2a2a      	cmp	r2, #42	; 0x2a
 800229e:	d005      	beq.n	80022ac <I2C_Slave_STOPF+0x5c>
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80022a0:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80022a2:	6812      	ldr	r2, [r2, #0]
 80022a4:	6852      	ldr	r2, [r2, #4]
 80022a6:	b292      	uxth	r2, r2
 80022a8:	8542      	strh	r2, [r0, #42]	; 0x2a
 80022aa:	e004      	b.n	80022b6 <I2C_Slave_STOPF+0x66>
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80022ac:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80022ae:	6812      	ldr	r2, [r2, #0]
 80022b0:	6852      	ldr	r2, [r2, #4]
 80022b2:	b292      	uxth	r2, r2
 80022b4:	8542      	strh	r2, [r0, #42]	; 0x2a
  if(hi2c->XferCount != 0U)
 80022b6:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80022b8:	b292      	uxth	r2, r2
 80022ba:	b1f2      	cbz	r2, 80022fa <I2C_Slave_STOPF+0xaa>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80022bc:	694a      	ldr	r2, [r1, #20]
 80022be:	f012 0f04 	tst.w	r2, #4
 80022c2:	d008      	beq.n	80022d6 <I2C_Slave_STOPF+0x86>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80022c4:	6909      	ldr	r1, [r1, #16]
 80022c6:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80022c8:	1c54      	adds	r4, r2, #1
 80022ca:	6244      	str	r4, [r0, #36]	; 0x24
 80022cc:	7011      	strb	r1, [r2, #0]
      hi2c->XferCount--;
 80022ce:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80022d0:	3a01      	subs	r2, #1
 80022d2:	b292      	uxth	r2, r2
 80022d4:	8542      	strh	r2, [r0, #42]	; 0x2a
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80022d6:	6802      	ldr	r2, [r0, #0]
 80022d8:	6951      	ldr	r1, [r2, #20]
 80022da:	f011 0f40 	tst.w	r1, #64	; 0x40
 80022de:	d008      	beq.n	80022f2 <I2C_Slave_STOPF+0xa2>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80022e0:	6911      	ldr	r1, [r2, #16]
 80022e2:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80022e4:	1c54      	adds	r4, r2, #1
 80022e6:	6244      	str	r4, [r0, #36]	; 0x24
 80022e8:	7011      	strb	r1, [r2, #0]
      hi2c->XferCount--;
 80022ea:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80022ec:	3a01      	subs	r2, #1
 80022ee:	b292      	uxth	r2, r2
 80022f0:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80022f2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80022f4:	f042 0204 	orr.w	r2, r2, #4
 80022f8:	6402      	str	r2, [r0, #64]	; 0x40
  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80022fa:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80022fc:	b9a2      	cbnz	r2, 8002328 <I2C_Slave_STOPF+0xd8>
    if((CurrentState == HAL_I2C_STATE_LISTEN ) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN) || \
 80022fe:	2b28      	cmp	r3, #40	; 0x28
 8002300:	d015      	beq.n	800232e <I2C_Slave_STOPF+0xde>
 8002302:	2b2a      	cmp	r3, #42	; 0x2a
 8002304:	d013      	beq.n	800232e <I2C_Slave_STOPF+0xde>
 8002306:	2b29      	cmp	r3, #41	; 0x29
 8002308:	d011      	beq.n	800232e <I2C_Slave_STOPF+0xde>
      if((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800230a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800230c:	2a22      	cmp	r2, #34	; 0x22
 800230e:	d001      	beq.n	8002314 <I2C_Slave_STOPF+0xc4>
 8002310:	2b22      	cmp	r3, #34	; 0x22
 8002312:	d117      	bne.n	8002344 <I2C_Slave_STOPF+0xf4>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002314:	2300      	movs	r3, #0
 8002316:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002318:	2220      	movs	r2, #32
 800231a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800231e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002322:	f7ff fca5 	bl	8001c70 <HAL_I2C_SlaveRxCpltCallback>
 8002326:	e00d      	b.n	8002344 <I2C_Slave_STOPF+0xf4>
    I2C_ITError(hi2c);
 8002328:	f7ff feec 	bl	8002104 <I2C_ITError>
 800232c:	e00a      	b.n	8002344 <I2C_Slave_STOPF+0xf4>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800232e:	4b07      	ldr	r3, [pc, #28]	; (800234c <I2C_Slave_STOPF+0xfc>)
 8002330:	62c3      	str	r3, [r0, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002332:	2300      	movs	r3, #0
 8002334:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002336:	2220      	movs	r2, #32
 8002338:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800233c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002340:	f7ff fcd3 	bl	8001cea <HAL_I2C_ListenCpltCallback>
}
 8002344:	2000      	movs	r0, #0
 8002346:	b002      	add	sp, #8
 8002348:	bd10      	pop	{r4, pc}
 800234a:	bf00      	nop
 800234c:	ffff0000 	.word	0xffff0000

08002350 <HAL_I2C_EV_IRQHandler>:
{
 8002350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002352:	4605      	mov	r5, r0
  uint32_t sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002354:	6803      	ldr	r3, [r0, #0]
 8002356:	699f      	ldr	r7, [r3, #24]
  uint32_t sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002358:	695c      	ldr	r4, [r3, #20]
  uint32_t itsources    = READ_REG(hi2c->Instance->CR2);
 800235a:	685e      	ldr	r6, [r3, #4]
  uint32_t CurrentMode  = hi2c->Mode;
 800235c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002360:	b2db      	uxtb	r3, r3
  if((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002362:	2b10      	cmp	r3, #16
 8002364:	d025      	beq.n	80023b2 <HAL_I2C_EV_IRQHandler+0x62>
 8002366:	2b40      	cmp	r3, #64	; 0x40
 8002368:	d023      	beq.n	80023b2 <HAL_I2C_EV_IRQHandler+0x62>
    if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800236a:	4b4c      	ldr	r3, [pc, #304]	; (800249c <HAL_I2C_EV_IRQHandler+0x14c>)
 800236c:	4023      	ands	r3, r4
 800236e:	b113      	cbz	r3, 8002376 <HAL_I2C_EV_IRQHandler+0x26>
 8002370:	f416 7f00 	tst.w	r6, #512	; 0x200
 8002374:	d16e      	bne.n	8002454 <HAL_I2C_EV_IRQHandler+0x104>
    else if(((sr1itflags & I2C_FLAG_STOPF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002376:	4b4a      	ldr	r3, [pc, #296]	; (80024a0 <HAL_I2C_EV_IRQHandler+0x150>)
 8002378:	4023      	ands	r3, r4
 800237a:	b113      	cbz	r3, 8002382 <HAL_I2C_EV_IRQHandler+0x32>
 800237c:	f416 7f00 	tst.w	r6, #512	; 0x200
 8002380:	d16b      	bne.n	800245a <HAL_I2C_EV_IRQHandler+0x10a>
    else if((sr2itflags & I2C_FLAG_TRA) != RESET)
 8002382:	4b48      	ldr	r3, [pc, #288]	; (80024a4 <HAL_I2C_EV_IRQHandler+0x154>)
 8002384:	403b      	ands	r3, r7
 8002386:	2b00      	cmp	r3, #0
 8002388:	d06f      	beq.n	800246a <HAL_I2C_EV_IRQHandler+0x11a>
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 800238a:	4b47      	ldr	r3, [pc, #284]	; (80024a8 <HAL_I2C_EV_IRQHandler+0x158>)
 800238c:	4023      	ands	r3, r4
 800238e:	b133      	cbz	r3, 800239e <HAL_I2C_EV_IRQHandler+0x4e>
 8002390:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8002394:	d003      	beq.n	800239e <HAL_I2C_EV_IRQHandler+0x4e>
 8002396:	4b45      	ldr	r3, [pc, #276]	; (80024ac <HAL_I2C_EV_IRQHandler+0x15c>)
 8002398:	4023      	ands	r3, r4
 800239a:	2b00      	cmp	r3, #0
 800239c:	d061      	beq.n	8002462 <HAL_I2C_EV_IRQHandler+0x112>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800239e:	4b43      	ldr	r3, [pc, #268]	; (80024ac <HAL_I2C_EV_IRQHandler+0x15c>)
 80023a0:	4023      	ands	r3, r4
 80023a2:	b353      	cbz	r3, 80023fa <HAL_I2C_EV_IRQHandler+0xaa>
 80023a4:	f416 7f00 	tst.w	r6, #512	; 0x200
 80023a8:	d027      	beq.n	80023fa <HAL_I2C_EV_IRQHandler+0xaa>
        I2C_SlaveTransmit_BTF(hi2c);
 80023aa:	4628      	mov	r0, r5
 80023ac:	f7ff f919 	bl	80015e2 <I2C_SlaveTransmit_BTF>
 80023b0:	e023      	b.n	80023fa <HAL_I2C_EV_IRQHandler+0xaa>
    if(((sr1itflags & I2C_FLAG_SB) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80023b2:	f014 1f01 	tst.w	r4, #65537	; 0x10001
 80023b6:	d002      	beq.n	80023be <HAL_I2C_EV_IRQHandler+0x6e>
 80023b8:	f416 7f00 	tst.w	r6, #512	; 0x200
 80023bc:	d11e      	bne.n	80023fc <HAL_I2C_EV_IRQHandler+0xac>
    else if(((sr1itflags & I2C_FLAG_ADD10) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80023be:	4b3c      	ldr	r3, [pc, #240]	; (80024b0 <HAL_I2C_EV_IRQHandler+0x160>)
 80023c0:	4023      	ands	r3, r4
 80023c2:	b113      	cbz	r3, 80023ca <HAL_I2C_EV_IRQHandler+0x7a>
 80023c4:	f416 7f00 	tst.w	r6, #512	; 0x200
 80023c8:	d11c      	bne.n	8002404 <HAL_I2C_EV_IRQHandler+0xb4>
    else if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80023ca:	4b34      	ldr	r3, [pc, #208]	; (800249c <HAL_I2C_EV_IRQHandler+0x14c>)
 80023cc:	4023      	ands	r3, r4
 80023ce:	b113      	cbz	r3, 80023d6 <HAL_I2C_EV_IRQHandler+0x86>
 80023d0:	f416 7f00 	tst.w	r6, #512	; 0x200
 80023d4:	d11a      	bne.n	800240c <HAL_I2C_EV_IRQHandler+0xbc>
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 80023d6:	4b33      	ldr	r3, [pc, #204]	; (80024a4 <HAL_I2C_EV_IRQHandler+0x154>)
 80023d8:	403b      	ands	r3, r7
 80023da:	b31b      	cbz	r3, 8002424 <HAL_I2C_EV_IRQHandler+0xd4>
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 80023dc:	4b32      	ldr	r3, [pc, #200]	; (80024a8 <HAL_I2C_EV_IRQHandler+0x158>)
 80023de:	4023      	ands	r3, r4
 80023e0:	b12b      	cbz	r3, 80023ee <HAL_I2C_EV_IRQHandler+0x9e>
 80023e2:	f416 6f80 	tst.w	r6, #1024	; 0x400
 80023e6:	d002      	beq.n	80023ee <HAL_I2C_EV_IRQHandler+0x9e>
 80023e8:	4b30      	ldr	r3, [pc, #192]	; (80024ac <HAL_I2C_EV_IRQHandler+0x15c>)
 80023ea:	4023      	ands	r3, r4
 80023ec:	b193      	cbz	r3, 8002414 <HAL_I2C_EV_IRQHandler+0xc4>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80023ee:	4b2f      	ldr	r3, [pc, #188]	; (80024ac <HAL_I2C_EV_IRQHandler+0x15c>)
 80023f0:	4023      	ands	r3, r4
 80023f2:	b113      	cbz	r3, 80023fa <HAL_I2C_EV_IRQHandler+0xaa>
 80023f4:	f416 7f00 	tst.w	r6, #512	; 0x200
 80023f8:	d110      	bne.n	800241c <HAL_I2C_EV_IRQHandler+0xcc>
}
 80023fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      I2C_Master_SB(hi2c);
 80023fc:	4628      	mov	r0, r5
 80023fe:	f7fe ffbf 	bl	8001380 <I2C_Master_SB>
 8002402:	e7e8      	b.n	80023d6 <HAL_I2C_EV_IRQHandler+0x86>
      I2C_Master_ADD10(hi2c);
 8002404:	4628      	mov	r0, r5
 8002406:	f7ff f800 	bl	800140a <I2C_Master_ADD10>
 800240a:	e7e4      	b.n	80023d6 <HAL_I2C_EV_IRQHandler+0x86>
      I2C_Master_ADDR(hi2c);
 800240c:	4628      	mov	r0, r5
 800240e:	f7ff f802 	bl	8001416 <I2C_Master_ADDR>
 8002412:	e7e0      	b.n	80023d6 <HAL_I2C_EV_IRQHandler+0x86>
        I2C_MasterTransmit_TXE(hi2c);
 8002414:	4628      	mov	r0, r5
 8002416:	f7ff fcb4 	bl	8001d82 <I2C_MasterTransmit_TXE>
 800241a:	e7ee      	b.n	80023fa <HAL_I2C_EV_IRQHandler+0xaa>
        I2C_MasterTransmit_BTF(hi2c);
 800241c:	4628      	mov	r0, r5
 800241e:	f7ff fd53 	bl	8001ec8 <I2C_MasterTransmit_BTF>
 8002422:	e7ea      	b.n	80023fa <HAL_I2C_EV_IRQHandler+0xaa>
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8002424:	4b23      	ldr	r3, [pc, #140]	; (80024b4 <HAL_I2C_EV_IRQHandler+0x164>)
 8002426:	4023      	ands	r3, r4
 8002428:	b12b      	cbz	r3, 8002436 <HAL_I2C_EV_IRQHandler+0xe6>
 800242a:	f416 6f80 	tst.w	r6, #1024	; 0x400
 800242e:	d002      	beq.n	8002436 <HAL_I2C_EV_IRQHandler+0xe6>
 8002430:	4b1e      	ldr	r3, [pc, #120]	; (80024ac <HAL_I2C_EV_IRQHandler+0x15c>)
 8002432:	4023      	ands	r3, r4
 8002434:	b153      	cbz	r3, 800244c <HAL_I2C_EV_IRQHandler+0xfc>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002436:	4b1d      	ldr	r3, [pc, #116]	; (80024ac <HAL_I2C_EV_IRQHandler+0x15c>)
 8002438:	4023      	ands	r3, r4
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0dd      	beq.n	80023fa <HAL_I2C_EV_IRQHandler+0xaa>
 800243e:	f416 7f00 	tst.w	r6, #512	; 0x200
 8002442:	d0da      	beq.n	80023fa <HAL_I2C_EV_IRQHandler+0xaa>
        I2C_MasterReceive_BTF(hi2c);
 8002444:	4628      	mov	r0, r5
 8002446:	f7ff fdd9 	bl	8001ffc <I2C_MasterReceive_BTF>
 800244a:	e7d6      	b.n	80023fa <HAL_I2C_EV_IRQHandler+0xaa>
        I2C_MasterReceive_RXNE(hi2c);
 800244c:	4628      	mov	r0, r5
 800244e:	f7ff fd89 	bl	8001f64 <I2C_MasterReceive_RXNE>
 8002452:	e7d2      	b.n	80023fa <HAL_I2C_EV_IRQHandler+0xaa>
      I2C_Slave_ADDR(hi2c);
 8002454:	f7ff fc35 	bl	8001cc2 <I2C_Slave_ADDR>
 8002458:	e7cf      	b.n	80023fa <HAL_I2C_EV_IRQHandler+0xaa>
      I2C_Slave_STOPF(hi2c);
 800245a:	4628      	mov	r0, r5
 800245c:	f7ff fef8 	bl	8002250 <I2C_Slave_STOPF>
 8002460:	e7cb      	b.n	80023fa <HAL_I2C_EV_IRQHandler+0xaa>
        I2C_SlaveTransmit_TXE(hi2c);
 8002462:	4628      	mov	r0, r5
 8002464:	f7ff fbdf 	bl	8001c26 <I2C_SlaveTransmit_TXE>
 8002468:	e7c7      	b.n	80023fa <HAL_I2C_EV_IRQHandler+0xaa>
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 800246a:	4b12      	ldr	r3, [pc, #72]	; (80024b4 <HAL_I2C_EV_IRQHandler+0x164>)
 800246c:	4023      	ands	r3, r4
 800246e:	b12b      	cbz	r3, 800247c <HAL_I2C_EV_IRQHandler+0x12c>
 8002470:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8002474:	d002      	beq.n	800247c <HAL_I2C_EV_IRQHandler+0x12c>
 8002476:	4b0d      	ldr	r3, [pc, #52]	; (80024ac <HAL_I2C_EV_IRQHandler+0x15c>)
 8002478:	4023      	ands	r3, r4
 800247a:	b153      	cbz	r3, 8002492 <HAL_I2C_EV_IRQHandler+0x142>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800247c:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <HAL_I2C_EV_IRQHandler+0x15c>)
 800247e:	4023      	ands	r3, r4
 8002480:	2b00      	cmp	r3, #0
 8002482:	d0ba      	beq.n	80023fa <HAL_I2C_EV_IRQHandler+0xaa>
 8002484:	f416 7f00 	tst.w	r6, #512	; 0x200
 8002488:	d0b7      	beq.n	80023fa <HAL_I2C_EV_IRQHandler+0xaa>
        I2C_SlaveReceive_BTF(hi2c);
 800248a:	4628      	mov	r0, r5
 800248c:	f7ff f8b8 	bl	8001600 <I2C_SlaveReceive_BTF>
}
 8002490:	e7b3      	b.n	80023fa <HAL_I2C_EV_IRQHandler+0xaa>
        I2C_SlaveReceive_RXNE(hi2c);
 8002492:	4628      	mov	r0, r5
 8002494:	f7ff fbed 	bl	8001c72 <I2C_SlaveReceive_RXNE>
 8002498:	e7af      	b.n	80023fa <HAL_I2C_EV_IRQHandler+0xaa>
 800249a:	bf00      	nop
 800249c:	00010002 	.word	0x00010002
 80024a0:	00010010 	.word	0x00010010
 80024a4:	00100004 	.word	0x00100004
 80024a8:	00010080 	.word	0x00010080
 80024ac:	00010004 	.word	0x00010004
 80024b0:	00010008 	.word	0x00010008
 80024b4:	00010040 	.word	0x00010040

080024b8 <HAL_I2C_ER_IRQHandler>:
{
 80024b8:	b570      	push	{r4, r5, r6, lr}
 80024ba:	4604      	mov	r4, r0
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80024bc:	6803      	ldr	r3, [r0, #0]
 80024be:	695d      	ldr	r5, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80024c0:	685e      	ldr	r6, [r3, #4]
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 80024c2:	4a31      	ldr	r2, [pc, #196]	; (8002588 <HAL_I2C_ER_IRQHandler+0xd0>)
 80024c4:	4215      	tst	r5, r2
 80024c6:	d009      	beq.n	80024dc <HAL_I2C_ER_IRQHandler+0x24>
 80024c8:	f416 7f80 	tst.w	r6, #256	; 0x100
 80024cc:	d006      	beq.n	80024dc <HAL_I2C_ER_IRQHandler+0x24>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80024ce:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80024d0:	f042 0201 	orr.w	r2, r2, #1
 80024d4:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80024d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80024da:	615a      	str	r2, [r3, #20]
  if(((sr1itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 80024dc:	f415 3f81 	tst.w	r5, #66048	; 0x10200
 80024e0:	d00a      	beq.n	80024f8 <HAL_I2C_ER_IRQHandler+0x40>
 80024e2:	f416 7f80 	tst.w	r6, #256	; 0x100
 80024e6:	d007      	beq.n	80024f8 <HAL_I2C_ER_IRQHandler+0x40>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80024e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80024ea:	f043 0302 	orr.w	r3, r3, #2
 80024ee:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80024f0:	6823      	ldr	r3, [r4, #0]
 80024f2:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80024f6:	615a      	str	r2, [r3, #20]
  if(((sr1itflags & I2C_FLAG_AF) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 80024f8:	f415 3f82 	tst.w	r5, #66560	; 0x10400
 80024fc:	d01a      	beq.n	8002534 <HAL_I2C_ER_IRQHandler+0x7c>
 80024fe:	f416 7f80 	tst.w	r6, #256	; 0x100
 8002502:	d017      	beq.n	8002534 <HAL_I2C_ER_IRQHandler+0x7c>
    tmp1 = hi2c->Mode;
 8002504:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8002508:	b2db      	uxtb	r3, r3
    tmp2 = hi2c->XferCount;
 800250a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800250c:	b291      	uxth	r1, r2
    tmp3 = hi2c->State;
 800250e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8002512:	b2d2      	uxtb	r2, r2
    tmp4 = hi2c->PreviousState;
 8002514:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002516:	2b20      	cmp	r3, #32
 8002518:	d01d      	beq.n	8002556 <HAL_I2C_ER_IRQHandler+0x9e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800251a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800251c:	f043 0304 	orr.w	r3, r3, #4
 8002520:	6423      	str	r3, [r4, #64]	; 0x40
      if(hi2c->Mode == HAL_I2C_MODE_MASTER)
 8002522:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b10      	cmp	r3, #16
 800252a:	d022      	beq.n	8002572 <HAL_I2C_ER_IRQHandler+0xba>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800252c:	6823      	ldr	r3, [r4, #0]
 800252e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002532:	615a      	str	r2, [r3, #20]
  if(((sr1itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8002534:	f415 3f84 	tst.w	r5, #67584	; 0x10800
 8002538:	d00a      	beq.n	8002550 <HAL_I2C_ER_IRQHandler+0x98>
 800253a:	f416 7f80 	tst.w	r6, #256	; 0x100
 800253e:	d007      	beq.n	8002550 <HAL_I2C_ER_IRQHandler+0x98>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002540:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002542:	f043 0308 	orr.w	r3, r3, #8
 8002546:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002548:	6823      	ldr	r3, [r4, #0]
 800254a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800254e:	615a      	str	r2, [r3, #20]
  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002550:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002552:	b9a3      	cbnz	r3, 800257e <HAL_I2C_ER_IRQHandler+0xc6>
}
 8002554:	bd70      	pop	{r4, r5, r6, pc}
    if((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002556:	2900      	cmp	r1, #0
 8002558:	d1df      	bne.n	800251a <HAL_I2C_ER_IRQHandler+0x62>
 800255a:	2a21      	cmp	r2, #33	; 0x21
 800255c:	d005      	beq.n	800256a <HAL_I2C_ER_IRQHandler+0xb2>
      ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800255e:	2a29      	cmp	r2, #41	; 0x29
 8002560:	d003      	beq.n	800256a <HAL_I2C_ER_IRQHandler+0xb2>
 8002562:	2a28      	cmp	r2, #40	; 0x28
 8002564:	d1d9      	bne.n	800251a <HAL_I2C_ER_IRQHandler+0x62>
      ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002566:	2821      	cmp	r0, #33	; 0x21
 8002568:	d1d7      	bne.n	800251a <HAL_I2C_ER_IRQHandler+0x62>
      I2C_Slave_AF(hi2c);
 800256a:	4620      	mov	r0, r4
 800256c:	f7ff fbbe 	bl	8001cec <I2C_Slave_AF>
 8002570:	e7e0      	b.n	8002534 <HAL_I2C_ER_IRQHandler+0x7c>
        SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
 8002572:	6822      	ldr	r2, [r4, #0]
 8002574:	6813      	ldr	r3, [r2, #0]
 8002576:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800257a:	6013      	str	r3, [r2, #0]
 800257c:	e7d6      	b.n	800252c <HAL_I2C_ER_IRQHandler+0x74>
    I2C_ITError(hi2c);
 800257e:	4620      	mov	r0, r4
 8002580:	f7ff fdc0 	bl	8002104 <I2C_ITError>
}
 8002584:	e7e6      	b.n	8002554 <HAL_I2C_ER_IRQHandler+0x9c>
 8002586:	bf00      	nop
 8002588:	00010100 	.word	0x00010100

0800258c <I2C_DMAAbort>:
{
 800258c:	b508      	push	{r3, lr}
  I2C_HandleTypeDef* hi2c = ( I2C_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800258e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002590:	6802      	ldr	r2, [r0, #0]
 8002592:	6813      	ldr	r3, [r2, #0]
 8002594:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002598:	6013      	str	r3, [r2, #0]
  hi2c->XferCount = 0U;
 800259a:	2300      	movs	r3, #0
 800259c:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2c->hdmatx->XferAbortCallback = NULL;
 800259e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80025a0:	6513      	str	r3, [r2, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 80025a2:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80025a4:	6513      	str	r3, [r2, #80]	; 0x50
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 80025a6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b60      	cmp	r3, #96	; 0x60
 80025ae:	d00d      	beq.n	80025cc <I2C_DMAAbort+0x40>
    hi2c->State = HAL_I2C_STATE_READY;
 80025b0:	2320      	movs	r3, #32
 80025b2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025b6:	2300      	movs	r3, #0
 80025b8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    __HAL_I2C_DISABLE(hi2c);
 80025bc:	6802      	ldr	r2, [r0, #0]
 80025be:	6813      	ldr	r3, [r2, #0]
 80025c0:	f023 0301 	bic.w	r3, r3, #1
 80025c4:	6013      	str	r3, [r2, #0]
    HAL_I2C_ErrorCallback(hi2c);
 80025c6:	f7ff fd9a 	bl	80020fe <HAL_I2C_ErrorCallback>
}
 80025ca:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80025cc:	2320      	movs	r3, #32
 80025ce:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025d2:	2300      	movs	r3, #0
 80025d4:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025d8:	6403      	str	r3, [r0, #64]	; 0x40
    __HAL_I2C_DISABLE(hi2c);
 80025da:	6802      	ldr	r2, [r0, #0]
 80025dc:	6813      	ldr	r3, [r2, #0]
 80025de:	f023 0301 	bic.w	r3, r3, #1
 80025e2:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 80025e4:	f7ff fd8c 	bl	8002100 <HAL_I2C_AbortCpltCallback>
 80025e8:	e7ef      	b.n	80025ca <I2C_DMAAbort+0x3e>

080025ea <HAL_I2S_TxCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hi2s);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80025ea:	4770      	bx	lr

080025ec <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80025ec:	b508      	push	{r3, lr}
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80025ee:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80025f0:	1c9a      	adds	r2, r3, #2
 80025f2:	6242      	str	r2, [r0, #36]	; 0x24
 80025f4:	6802      	ldr	r2, [r0, #0]
 80025f6:	881b      	ldrh	r3, [r3, #0]
 80025f8:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 80025fa:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80025fc:	3b01      	subs	r3, #1
 80025fe:	b29b      	uxth	r3, r3
 8002600:	8543      	strh	r3, [r0, #42]	; 0x2a

  if(hi2s->TxXferCount == 0U)
 8002602:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002604:	b29b      	uxth	r3, r3
 8002606:	b103      	cbz	r3, 800260a <I2S_Transmit_IT+0x1e>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));

    hi2s->State = HAL_I2S_STATE_READY;
    HAL_I2S_TxCpltCallback(hi2s);
  }
}
 8002608:	bd08      	pop	{r3, pc}
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800260a:	6802      	ldr	r2, [r0, #0]
 800260c:	6853      	ldr	r3, [r2, #4]
 800260e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002612:	041b      	lsls	r3, r3, #16
 8002614:	0c1b      	lsrs	r3, r3, #16
 8002616:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8002618:	2301      	movs	r3, #1
 800261a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 800261e:	f7ff ffe4 	bl	80025ea <HAL_I2S_TxCpltCallback>
}
 8002622:	e7f1      	b.n	8002608 <I2S_Transmit_IT+0x1c>

08002624 <HAL_I2S_RxCpltCallback>:
}
 8002624:	4770      	bx	lr

08002626 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002626:	b508      	push	{r3, lr}
  /* Receive data */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002628:	6803      	ldr	r3, [r0, #0]
 800262a:	68da      	ldr	r2, [r3, #12]
 800262c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800262e:	1c99      	adds	r1, r3, #2
 8002630:	62c1      	str	r1, [r0, #44]	; 0x2c
 8002632:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002634:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8002636:	3b01      	subs	r3, #1
 8002638:	b29b      	uxth	r3, r3
 800263a:	8643      	strh	r3, [r0, #50]	; 0x32

  if(hi2s->RxXferCount == 0U)
 800263c:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800263e:	b29b      	uxth	r3, r3
 8002640:	b103      	cbz	r3, 8002644 <I2S_Receive_IT+0x1e>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));

    hi2s->State = HAL_I2S_STATE_READY;
    HAL_I2S_RxCpltCallback(hi2s);
  }
}
 8002642:	bd08      	pop	{r3, pc}
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002644:	6802      	ldr	r2, [r0, #0]
 8002646:	6853      	ldr	r3, [r2, #4]
 8002648:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800264c:	041b      	lsls	r3, r3, #16
 800264e:	0c1b      	lsrs	r3, r3, #16
 8002650:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8002652:	2301      	movs	r3, #1
 8002654:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8002658:	f7ff ffe4 	bl	8002624 <HAL_I2S_RxCpltCallback>
}
 800265c:	e7f1      	b.n	8002642 <I2S_Receive_IT+0x1c>

0800265e <HAL_I2S_ErrorCallback>:
}
 800265e:	4770      	bx	lr

08002660 <HAL_I2S_Init>:
  if(hi2s == NULL)
 8002660:	2800      	cmp	r0, #0
 8002662:	f000 80bb 	beq.w	80027dc <HAL_I2S_Init+0x17c>
{
 8002666:	b570      	push	{r4, r5, r6, lr}
 8002668:	4604      	mov	r4, r0
  hi2s->State = HAL_I2S_STATE_BUSY;
 800266a:	2502      	movs	r5, #2
 800266c:	f880 5041 	strb.w	r5, [r0, #65]	; 0x41
  hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002670:	4b5b      	ldr	r3, [pc, #364]	; (80027e0 <HAL_I2S_Init+0x180>)
 8002672:	6343      	str	r3, [r0, #52]	; 0x34
  HAL_I2S_MspInit(hi2s);
 8002674:	f002 fcce 	bl	8005014 <HAL_I2S_MspInit>
  CLEAR_BIT(hi2s->Instance->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002678:	6822      	ldr	r2, [r4, #0]
 800267a:	69d3      	ldr	r3, [r2, #28]
 800267c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002680:	f023 030f 	bic.w	r3, r3, #15
 8002684:	61d3      	str	r3, [r2, #28]
  hi2s->Instance->I2SPR = 0x0002U;
 8002686:	6823      	ldr	r3, [r4, #0]
 8002688:	621d      	str	r5, [r3, #32]
  tmpreg = hi2s->Instance->I2SCFGR;
 800268a:	6823      	ldr	r3, [r4, #0]
 800268c:	69dd      	ldr	r5, [r3, #28]
  if(hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800268e:	6963      	ldr	r3, [r4, #20]
 8002690:	2b02      	cmp	r3, #2
 8002692:	d05b      	beq.n	800274c <HAL_I2S_Init+0xec>
    if(hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002694:	68e3      	ldr	r3, [r4, #12]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d03e      	beq.n	8002718 <HAL_I2S_Init+0xb8>
      packetlength = 32U;
 800269a:	2620      	movs	r6, #32
    if(hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800269c:	68a3      	ldr	r3, [r4, #8]
 800269e:	2b20      	cmp	r3, #32
 80026a0:	d800      	bhi.n	80026a4 <HAL_I2S_Init+0x44>
      packetlength = packetlength * 2U;
 80026a2:	0076      	lsls	r6, r6, #1
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80026a4:	2001      	movs	r0, #1
 80026a6:	f000 fe97 	bl	80033d8 <HAL_RCCEx_GetPeriphCLKFreq>
    if(hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80026aa:	6923      	ldr	r3, [r4, #16]
 80026ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026b0:	d034      	beq.n	800271c <HAL_I2S_Init+0xbc>
      tmp = (uint32_t)(((((i2sclk / packetlength) *10 ) / hi2s->Init.AudioFreq)) + 5);
 80026b2:	fbb0 f0f6 	udiv	r0, r0, r6
 80026b6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026ba:	0043      	lsls	r3, r0, #1
 80026bc:	6962      	ldr	r2, [r4, #20]
 80026be:	fbb3 f3f2 	udiv	r3, r3, r2
 80026c2:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 80026c4:	4a47      	ldr	r2, [pc, #284]	; (80027e4 <HAL_I2S_Init+0x184>)
 80026c6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ca:	08db      	lsrs	r3, r3, #3
    i2sodd = (uint16_t)(tmp & (uint16_t)1U);
 80026cc:	f003 0201 	and.w	r2, r3, #1
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2U);
 80026d0:	1a9b      	subs	r3, r3, r2
 80026d2:	f3c3 034f 	ubfx	r3, r3, #1, #16
    i2sodd = (uint32_t) (i2sodd << 8U);
 80026d6:	0211      	lsls	r1, r2, #8
  if((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80026d8:	1e9a      	subs	r2, r3, #2
 80026da:	2afd      	cmp	r2, #253	; 0xfd
 80026dc:	d838      	bhi.n	8002750 <HAL_I2S_Init+0xf0>
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80026de:	6922      	ldr	r2, [r4, #16]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	6821      	ldr	r1, [r4, #0]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	620b      	str	r3, [r1, #32]
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
 80026e8:	6862      	ldr	r2, [r4, #4]
                       (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80026ea:	68a1      	ldr	r1, [r4, #8]
 80026ec:	68e0      	ldr	r0, [r4, #12]
                       (uint16_t)hi2s->Init.CPOL))));
 80026ee:	8b23      	ldrh	r3, [r4, #24]
                       (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80026f0:	4303      	orrs	r3, r0
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	430b      	orrs	r3, r1
 80026f6:	b29b      	uxth	r3, r3
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
 80026f8:	4313      	orrs	r3, r2
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002700:	431d      	orrs	r5, r3
  WRITE_REG(hi2s->Instance->I2SCFGR, tmpreg);
 8002702:	6823      	ldr	r3, [r4, #0]
 8002704:	61dd      	str	r5, [r3, #28]
  if(hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002706:	6a23      	ldr	r3, [r4, #32]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d02a      	beq.n	8002762 <HAL_I2S_Init+0x102>
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800270c:	2000      	movs	r0, #0
 800270e:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002710:	2301      	movs	r3, #1
 8002712:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8002716:	bd70      	pop	{r4, r5, r6, pc}
      packetlength = 16U;
 8002718:	2610      	movs	r6, #16
 800271a:	e7bf      	b.n	800269c <HAL_I2S_Init+0x3c>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800271c:	68e3      	ldr	r3, [r4, #12]
 800271e:	b153      	cbz	r3, 8002736 <HAL_I2S_Init+0xd6>
        tmp = (uint32_t)(((((i2sclk / (packetlength*4)) * 10) / hi2s->Init.AudioFreq)) + 5);
 8002720:	00b6      	lsls	r6, r6, #2
 8002722:	fbb0 f0f6 	udiv	r0, r0, r6
 8002726:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800272a:	0043      	lsls	r3, r0, #1
 800272c:	6962      	ldr	r2, [r4, #20]
 800272e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002732:	3305      	adds	r3, #5
 8002734:	e7c6      	b.n	80026c4 <HAL_I2S_Init+0x64>
        tmp = (uint32_t)(((((i2sclk / (packetlength*8)) * 10) / hi2s->Init.AudioFreq)) + 5);
 8002736:	00f6      	lsls	r6, r6, #3
 8002738:	fbb0 f0f6 	udiv	r0, r0, r6
 800273c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002740:	0043      	lsls	r3, r0, #1
 8002742:	6962      	ldr	r2, [r4, #20]
 8002744:	fbb3 f3f2 	udiv	r3, r3, r2
 8002748:	3305      	adds	r3, #5
 800274a:	e7bb      	b.n	80026c4 <HAL_I2S_Init+0x64>
  uint32_t tmpreg = 0U, i2sdiv = 2U, i2sodd = 0U, packetlength = 16U;
 800274c:	2100      	movs	r1, #0
 800274e:	e7c3      	b.n	80026d8 <HAL_I2S_Init+0x78>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002750:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002752:	f043 0310 	orr.w	r3, r3, #16
 8002756:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_I2S_ErrorCallback(hi2s);
 8002758:	4620      	mov	r0, r4
 800275a:	f7ff ff80 	bl	800265e <HAL_I2S_ErrorCallback>
    return  HAL_ERROR;
 800275e:	2001      	movs	r0, #1
 8002760:	e7d9      	b.n	8002716 <HAL_I2S_Init+0xb6>
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002762:	4b21      	ldr	r3, [pc, #132]	; (80027e8 <HAL_I2S_Init+0x188>)
 8002764:	6363      	str	r3, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002766:	6822      	ldr	r2, [r4, #0]
 8002768:	4b20      	ldr	r3, [pc, #128]	; (80027ec <HAL_I2S_Init+0x18c>)
 800276a:	429a      	cmp	r2, r3
 800276c:	d01e      	beq.n	80027ac <HAL_I2S_Init+0x14c>
 800276e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002772:	69d3      	ldr	r3, [r2, #28]
 8002774:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002778:	f023 030f 	bic.w	r3, r3, #15
 800277c:	61d3      	str	r3, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800277e:	6822      	ldr	r2, [r4, #0]
 8002780:	4b1a      	ldr	r3, [pc, #104]	; (80027ec <HAL_I2S_Init+0x18c>)
 8002782:	429a      	cmp	r2, r3
 8002784:	d014      	beq.n	80027b0 <HAL_I2S_Init+0x150>
 8002786:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800278a:	2202      	movs	r2, #2
 800278c:	621a      	str	r2, [r3, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800278e:	6822      	ldr	r2, [r4, #0]
 8002790:	4b16      	ldr	r3, [pc, #88]	; (80027ec <HAL_I2S_Init+0x18c>)
 8002792:	429a      	cmp	r2, r3
 8002794:	d00f      	beq.n	80027b6 <HAL_I2S_Init+0x156>
 8002796:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800279a:	69d0      	ldr	r0, [r2, #28]
    if((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800279c:	6861      	ldr	r1, [r4, #4]
 800279e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80027a2:	d00a      	beq.n	80027ba <HAL_I2S_Init+0x15a>
 80027a4:	b9c1      	cbnz	r1, 80027d8 <HAL_I2S_Init+0x178>
      tmp = I2S_MODE_SLAVE_RX;
 80027a6:	f44f 7680 	mov.w	r6, #256	; 0x100
 80027aa:	e008      	b.n	80027be <HAL_I2S_Init+0x15e>
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80027ac:	4a10      	ldr	r2, [pc, #64]	; (80027f0 <HAL_I2S_Init+0x190>)
 80027ae:	e7e0      	b.n	8002772 <HAL_I2S_Init+0x112>
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80027b0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80027b4:	e7e9      	b.n	800278a <HAL_I2S_Init+0x12a>
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80027b6:	4a0e      	ldr	r2, [pc, #56]	; (80027f0 <HAL_I2S_Init+0x190>)
 80027b8:	e7ef      	b.n	800279a <HAL_I2S_Init+0x13a>
      tmp = I2S_MODE_SLAVE_RX;
 80027ba:	f44f 7680 	mov.w	r6, #256	; 0x100
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80027be:	68a1      	ldr	r1, [r4, #8]
 80027c0:	68e5      	ldr	r5, [r4, #12]
                         (uint16_t)hi2s->Init.CPOL))));
 80027c2:	8b23      	ldrh	r3, [r4, #24]
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80027c4:	432b      	orrs	r3, r5
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	430b      	orrs	r3, r1
 80027ca:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80027cc:	4333      	orrs	r3, r6
 80027ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027d2:	4303      	orrs	r3, r0
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR,tmpreg);
 80027d4:	61d3      	str	r3, [r2, #28]
 80027d6:	e799      	b.n	800270c <HAL_I2S_Init+0xac>
      tmp = I2S_MODE_SLAVE_TX;
 80027d8:	2600      	movs	r6, #0
 80027da:	e7f0      	b.n	80027be <HAL_I2S_Init+0x15e>
    return HAL_ERROR;
 80027dc:	2001      	movs	r0, #1
}
 80027de:	4770      	bx	lr
 80027e0:	080027f5 	.word	0x080027f5
 80027e4:	cccccccd 	.word	0xcccccccd
 80027e8:	08002a11 	.word	0x08002a11
 80027ec:	40003800 	.word	0x40003800
 80027f0:	40003400 	.word	0x40003400

080027f4 <I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80027f4:	b510      	push	{r4, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	4604      	mov	r4, r0
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80027fa:	6802      	ldr	r2, [r0, #0]
 80027fc:	6893      	ldr	r3, [r2, #8]
 80027fe:	9303      	str	r3, [sp, #12]

  if(hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002800:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b04      	cmp	r3, #4
 8002808:	d006      	beq.n	8002818 <I2S_IRQHandler+0x24>
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
      HAL_I2S_ErrorCallback(hi2s);
      }
    }

    if(hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800280a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b03      	cmp	r3, #3
 8002812:	d02e      	beq.n	8002872 <I2S_IRQHandler+0x7e>
      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
      HAL_I2S_ErrorCallback(hi2s);
    }
  }
}
 8002814:	b004      	add	sp, #16
 8002816:	bd10      	pop	{r4, pc}
    if(((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002818:	9b03      	ldr	r3, [sp, #12]
 800281a:	f013 0f01 	tst.w	r3, #1
 800281e:	d003      	beq.n	8002828 <I2S_IRQHandler+0x34>
 8002820:	6853      	ldr	r3, [r2, #4]
 8002822:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002826:	d121      	bne.n	800286c <I2S_IRQHandler+0x78>
    if(((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002828:	9b03      	ldr	r3, [sp, #12]
 800282a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800282e:	d0ec      	beq.n	800280a <I2S_IRQHandler+0x16>
 8002830:	6823      	ldr	r3, [r4, #0]
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	f012 0f20 	tst.w	r2, #32
 8002838:	d0e7      	beq.n	800280a <I2S_IRQHandler+0x16>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002840:	0412      	lsls	r2, r2, #16
 8002842:	0c12      	lsrs	r2, r2, #16
 8002844:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002846:	2300      	movs	r3, #0
 8002848:	9301      	str	r3, [sp, #4]
 800284a:	6823      	ldr	r3, [r4, #0]
 800284c:	68da      	ldr	r2, [r3, #12]
 800284e:	9201      	str	r2, [sp, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	9301      	str	r3, [sp, #4]
 8002854:	9b01      	ldr	r3, [sp, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8002856:	2301      	movs	r3, #1
 8002858:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 800285c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800285e:	f043 0302 	orr.w	r3, r3, #2
 8002862:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002864:	4620      	mov	r0, r4
 8002866:	f7ff fefa 	bl	800265e <HAL_I2S_ErrorCallback>
 800286a:	e7ce      	b.n	800280a <I2S_IRQHandler+0x16>
      I2S_Receive_IT(hi2s);
 800286c:	f7ff fedb 	bl	8002626 <I2S_Receive_IT>
 8002870:	e7da      	b.n	8002828 <I2S_IRQHandler+0x34>
    if(((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002872:	9b03      	ldr	r3, [sp, #12]
 8002874:	f013 0f02 	tst.w	r3, #2
 8002878:	d004      	beq.n	8002884 <I2S_IRQHandler+0x90>
 800287a:	6823      	ldr	r3, [r4, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002882:	d11f      	bne.n	80028c4 <I2S_IRQHandler+0xd0>
    if(((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002884:	9b03      	ldr	r3, [sp, #12]
 8002886:	f013 0f08 	tst.w	r3, #8
 800288a:	d0c3      	beq.n	8002814 <I2S_IRQHandler+0x20>
 800288c:	6823      	ldr	r3, [r4, #0]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	f012 0f20 	tst.w	r2, #32
 8002894:	d0be      	beq.n	8002814 <I2S_IRQHandler+0x20>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800289c:	0412      	lsls	r2, r2, #16
 800289e:	0c12      	lsrs	r2, r2, #16
 80028a0:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80028a2:	2300      	movs	r3, #0
 80028a4:	9302      	str	r3, [sp, #8]
 80028a6:	6823      	ldr	r3, [r4, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	9302      	str	r3, [sp, #8]
 80028ac:	9b02      	ldr	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 80028ae:	2301      	movs	r3, #1
 80028b0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80028b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80028b6:	f043 0304 	orr.w	r3, r3, #4
 80028ba:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80028bc:	4620      	mov	r0, r4
 80028be:	f7ff fece 	bl	800265e <HAL_I2S_ErrorCallback>
}
 80028c2:	e7a7      	b.n	8002814 <I2S_IRQHandler+0x20>
        I2S_Transmit_IT(hi2s);
 80028c4:	4620      	mov	r0, r4
 80028c6:	f7ff fe91 	bl	80025ec <I2S_Transmit_IT>
 80028ca:	e7db      	b.n	8002884 <I2S_IRQHandler+0x90>

080028cc <HAL_I2SEx_TxRxCpltCallback>:
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80028cc:	4770      	bx	lr
	...

080028d0 <I2SEx_FullDuplexTx_IT>:
  * @param hi2s I2S handle
  * @param i2sUsed indicate if I2Sx or I2Sx_ext is concerned
  * @retval None
  */
static void I2SEx_FullDuplexTx_IT(I2S_HandleTypeDef *hi2s, I2S_UseTypeDef i2sUsed)
{
 80028d0:	b508      	push	{r3, lr}
  if(i2sUsed == I2S_USE_I2S)
 80028d2:	b9e9      	cbnz	r1, 8002910 <I2SEx_FullDuplexTx_IT+0x40>
  {
    /* Write Data on DR register */
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80028d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80028d6:	1c9a      	adds	r2, r3, #2
 80028d8:	6242      	str	r2, [r0, #36]	; 0x24
 80028da:	6802      	ldr	r2, [r0, #0]
 80028dc:	881b      	ldrh	r3, [r3, #0]
 80028de:	60d3      	str	r3, [r2, #12]
    hi2s->TxXferCount--;
 80028e0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80028e2:	3b01      	subs	r3, #1
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	8543      	strh	r3, [r0, #42]	; 0x2a

    if(hi2s->TxXferCount == 0U)
 80028e8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	b94b      	cbnz	r3, 8002902 <I2SEx_FullDuplexTx_IT+0x32>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80028ee:	6802      	ldr	r2, [r0, #0]
 80028f0:	6853      	ldr	r3, [r2, #4]
 80028f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028f6:	041b      	lsls	r3, r3, #16
 80028f8:	0c1b      	lsrs	r3, r3, #16
 80028fa:	6053      	str	r3, [r2, #4]

      if(hi2s->RxXferCount == 0U)
 80028fc:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80028fe:	b29b      	uxth	r3, r3
 8002900:	b103      	cbz	r3, 8002904 <I2SEx_FullDuplexTx_IT+0x34>
        hi2s->State = HAL_I2S_STATE_READY;
        HAL_I2SEx_TxRxCpltCallback(hi2s);
      }
    }
  }
}
 8002902:	bd08      	pop	{r3, pc}
        hi2s->State = HAL_I2S_STATE_READY;
 8002904:	2301      	movs	r3, #1
 8002906:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 800290a:	f7ff ffdf 	bl	80028cc <HAL_I2SEx_TxRxCpltCallback>
 800290e:	e7f8      	b.n	8002902 <I2SEx_FullDuplexTx_IT+0x32>
    I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002910:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002912:	1c9a      	adds	r2, r3, #2
 8002914:	6242      	str	r2, [r0, #36]	; 0x24
 8002916:	881a      	ldrh	r2, [r3, #0]
 8002918:	6801      	ldr	r1, [r0, #0]
 800291a:	4b13      	ldr	r3, [pc, #76]	; (8002968 <I2SEx_FullDuplexTx_IT+0x98>)
 800291c:	4299      	cmp	r1, r3
 800291e:	d01e      	beq.n	800295e <I2SEx_FullDuplexTx_IT+0x8e>
 8002920:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002924:	60da      	str	r2, [r3, #12]
    hi2s->TxXferCount--;
 8002926:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002928:	3b01      	subs	r3, #1
 800292a:	b29b      	uxth	r3, r3
 800292c:	8543      	strh	r3, [r0, #42]	; 0x2a
    if(hi2s->TxXferCount == 0U)
 800292e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002930:	b29b      	uxth	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1e5      	bne.n	8002902 <I2SEx_FullDuplexTx_IT+0x32>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002936:	6802      	ldr	r2, [r0, #0]
 8002938:	4b0b      	ldr	r3, [pc, #44]	; (8002968 <I2SEx_FullDuplexTx_IT+0x98>)
 800293a:	429a      	cmp	r2, r3
 800293c:	d012      	beq.n	8002964 <I2SEx_FullDuplexTx_IT+0x94>
 800293e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002942:	6853      	ldr	r3, [r2, #4]
 8002944:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002948:	6053      	str	r3, [r2, #4]
      if(hi2s->RxXferCount == 0U)
 800294a:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800294c:	b29b      	uxth	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1d7      	bne.n	8002902 <I2SEx_FullDuplexTx_IT+0x32>
        hi2s->State = HAL_I2S_STATE_READY;
 8002952:	2301      	movs	r3, #1
 8002954:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002958:	f7ff ffb8 	bl	80028cc <HAL_I2SEx_TxRxCpltCallback>
}
 800295c:	e7d1      	b.n	8002902 <I2SEx_FullDuplexTx_IT+0x32>
    I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800295e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002962:	e7df      	b.n	8002924 <I2SEx_FullDuplexTx_IT+0x54>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002964:	4a01      	ldr	r2, [pc, #4]	; (800296c <I2SEx_FullDuplexTx_IT+0x9c>)
 8002966:	e7ec      	b.n	8002942 <I2SEx_FullDuplexTx_IT+0x72>
 8002968:	40003800 	.word	0x40003800
 800296c:	40003400 	.word	0x40003400

08002970 <I2SEx_FullDuplexRx_IT>:
  * @param hi2s I2S handle
  * @param i2sUsed indicate if I2Sx or I2Sx_ext is concerned
  * @retval None
  */
static void I2SEx_FullDuplexRx_IT(I2S_HandleTypeDef *hi2s, I2S_UseTypeDef i2sUsed)
{
 8002970:	b508      	push	{r3, lr}
  if(i2sUsed == I2S_USE_I2S)
 8002972:	b9e9      	cbnz	r1, 80029b0 <I2SEx_FullDuplexRx_IT+0x40>
  {
    /* Read Data from DR register */
    (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002974:	6803      	ldr	r3, [r0, #0]
 8002976:	68da      	ldr	r2, [r3, #12]
 8002978:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800297a:	1c99      	adds	r1, r3, #2
 800297c:	62c1      	str	r1, [r0, #44]	; 0x2c
 800297e:	801a      	strh	r2, [r3, #0]
    hi2s->RxXferCount--;
 8002980:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8002982:	3b01      	subs	r3, #1
 8002984:	b29b      	uxth	r3, r3
 8002986:	8643      	strh	r3, [r0, #50]	; 0x32

    if(hi2s->RxXferCount == 0U)
 8002988:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800298a:	b29b      	uxth	r3, r3
 800298c:	b94b      	cbnz	r3, 80029a2 <I2SEx_FullDuplexRx_IT+0x32>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800298e:	6802      	ldr	r2, [r0, #0]
 8002990:	6853      	ldr	r3, [r2, #4]
 8002992:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002996:	041b      	lsls	r3, r3, #16
 8002998:	0c1b      	lsrs	r3, r3, #16
 800299a:	6053      	str	r3, [r2, #4]

      if(hi2s->TxXferCount == 0U)
 800299c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800299e:	b29b      	uxth	r3, r3
 80029a0:	b103      	cbz	r3, 80029a4 <I2SEx_FullDuplexRx_IT+0x34>
        hi2s->State = HAL_I2S_STATE_READY;
        HAL_I2SEx_TxRxCpltCallback(hi2s);
      }
    }
  }
}
 80029a2:	bd08      	pop	{r3, pc}
        hi2s->State = HAL_I2S_STATE_READY;
 80029a4:	2301      	movs	r3, #1
 80029a6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 80029aa:	f7ff ff8f 	bl	80028cc <HAL_I2SEx_TxRxCpltCallback>
 80029ae:	e7f8      	b.n	80029a2 <I2SEx_FullDuplexRx_IT+0x32>
    (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80029b0:	6802      	ldr	r2, [r0, #0]
 80029b2:	4b15      	ldr	r3, [pc, #84]	; (8002a08 <I2SEx_FullDuplexRx_IT+0x98>)
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d022      	beq.n	80029fe <I2SEx_FullDuplexRx_IT+0x8e>
 80029b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029bc:	68da      	ldr	r2, [r3, #12]
 80029be:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80029c0:	1c99      	adds	r1, r3, #2
 80029c2:	62c1      	str	r1, [r0, #44]	; 0x2c
 80029c4:	801a      	strh	r2, [r3, #0]
    hi2s->RxXferCount--;
 80029c6:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80029c8:	3b01      	subs	r3, #1
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	8643      	strh	r3, [r0, #50]	; 0x32
    if(hi2s->RxXferCount == 0U)
 80029ce:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1e5      	bne.n	80029a2 <I2SEx_FullDuplexRx_IT+0x32>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80029d6:	6802      	ldr	r2, [r0, #0]
 80029d8:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <I2SEx_FullDuplexRx_IT+0x98>)
 80029da:	429a      	cmp	r2, r3
 80029dc:	d012      	beq.n	8002a04 <I2SEx_FullDuplexRx_IT+0x94>
 80029de:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80029e2:	6853      	ldr	r3, [r2, #4]
 80029e4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80029e8:	6053      	str	r3, [r2, #4]
      if(hi2s->TxXferCount == 0U)
 80029ea:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1d7      	bne.n	80029a2 <I2SEx_FullDuplexRx_IT+0x32>
        hi2s->State = HAL_I2S_STATE_READY;
 80029f2:	2301      	movs	r3, #1
 80029f4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 80029f8:	f7ff ff68 	bl	80028cc <HAL_I2SEx_TxRxCpltCallback>
}
 80029fc:	e7d1      	b.n	80029a2 <I2SEx_FullDuplexRx_IT+0x32>
    (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80029fe:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002a02:	e7db      	b.n	80029bc <I2SEx_FullDuplexRx_IT+0x4c>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a04:	4a01      	ldr	r2, [pc, #4]	; (8002a0c <I2SEx_FullDuplexRx_IT+0x9c>)
 8002a06:	e7ec      	b.n	80029e2 <I2SEx_FullDuplexRx_IT+0x72>
 8002a08:	40003800 	.word	0x40003800
 8002a0c:	40003400 	.word	0x40003400

08002a10 <HAL_I2SEx_FullDuplex_IRQHandler>:
{
 8002a10:	b510      	push	{r4, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	4604      	mov	r4, r0
  __IO uint32_t i2ssr    = hi2s->Instance->SR ;
 8002a16:	6803      	ldr	r3, [r0, #0]
 8002a18:	689a      	ldr	r2, [r3, #8]
 8002a1a:	9203      	str	r2, [sp, #12]
  __IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 8002a1c:	4a7c      	ldr	r2, [pc, #496]	; (8002c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x200>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d05d      	beq.n	8002ade <HAL_I2SEx_FullDuplex_IRQHandler+0xce>
 8002a22:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
 8002a26:	688a      	ldr	r2, [r1, #8]
 8002a28:	9202      	str	r2, [sp, #8]
  if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX)
 8002a2a:	69da      	ldr	r2, [r3, #28]
 8002a2c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002a30:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002a34:	d004      	beq.n	8002a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x30>
      || ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8002a36:	69da      	ldr	r2, [r3, #28]
 8002a38:	f412 7f40 	tst.w	r2, #768	; 0x300
 8002a3c:	f040 8081 	bne.w	8002b42 <HAL_I2SEx_FullDuplex_IRQHandler+0x132>
    if(((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002a40:	9a03      	ldr	r2, [sp, #12]
 8002a42:	f012 0f02 	tst.w	r2, #2
 8002a46:	d003      	beq.n	8002a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002a4e:	d148      	bne.n	8002ae2 <HAL_I2SEx_FullDuplex_IRQHandler+0xd2>
    if(((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002a50:	9b02      	ldr	r3, [sp, #8]
 8002a52:	f013 0f01 	tst.w	r3, #1
 8002a56:	d009      	beq.n	8002a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x5c>
 8002a58:	6822      	ldr	r2, [r4, #0]
 8002a5a:	4b6d      	ldr	r3, [pc, #436]	; (8002c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x200>)
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d045      	beq.n	8002aec <HAL_I2SEx_FullDuplex_IRQHandler+0xdc>
 8002a60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002a6a:	d142      	bne.n	8002af2 <HAL_I2SEx_FullDuplex_IRQHandler+0xe2>
    if(((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002a6c:	9b02      	ldr	r3, [sp, #8]
 8002a6e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002a72:	d009      	beq.n	8002a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x78>
 8002a74:	6822      	ldr	r2, [r4, #0]
 8002a76:	4b66      	ldr	r3, [pc, #408]	; (8002c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x200>)
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d03f      	beq.n	8002afc <HAL_I2SEx_FullDuplex_IRQHandler+0xec>
 8002a7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	f012 0f20 	tst.w	r2, #32
 8002a86:	d13c      	bne.n	8002b02 <HAL_I2SEx_FullDuplex_IRQHandler+0xf2>
    if(((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002a88:	9b03      	ldr	r3, [sp, #12]
 8002a8a:	f013 0f08 	tst.w	r3, #8
 8002a8e:	d024      	beq.n	8002ada <HAL_I2SEx_FullDuplex_IRQHandler+0xca>
 8002a90:	6823      	ldr	r3, [r4, #0]
 8002a92:	685a      	ldr	r2, [r3, #4]
 8002a94:	f012 0f20 	tst.w	r2, #32
 8002a98:	d01f      	beq.n	8002ada <HAL_I2SEx_FullDuplex_IRQHandler+0xca>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002aa0:	0412      	lsls	r2, r2, #16
 8002aa2:	0c12      	lsrs	r2, r2, #16
 8002aa4:	605a      	str	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002aa6:	6822      	ldr	r2, [r4, #0]
 8002aa8:	4b59      	ldr	r3, [pc, #356]	; (8002c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x200>)
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d047      	beq.n	8002b3e <HAL_I2SEx_FullDuplex_IRQHandler+0x12e>
 8002aae:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002ab2:	6853      	ldr	r3, [r2, #4]
 8002ab4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002ab8:	6053      	str	r3, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002aba:	2300      	movs	r3, #0
 8002abc:	9301      	str	r3, [sp, #4]
 8002abe:	6823      	ldr	r3, [r4, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	9301      	str	r3, [sp, #4]
 8002ac4:	9b01      	ldr	r3, [sp, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_UDR);
 8002acc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002ace:	f043 0304 	orr.w	r3, r3, #4
 8002ad2:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002ad4:	4620      	mov	r0, r4
 8002ad6:	f7ff fdc2 	bl	800265e <HAL_I2S_ErrorCallback>
}
 8002ada:	b004      	add	sp, #16
 8002adc:	bd10      	pop	{r4, pc}
  __IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 8002ade:	494d      	ldr	r1, [pc, #308]	; (8002c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>)
 8002ae0:	e7a1      	b.n	8002a26 <HAL_I2SEx_FullDuplex_IRQHandler+0x16>
      I2SEx_FullDuplexTx_IT(hi2s, I2S_USE_I2S);
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	4620      	mov	r0, r4
 8002ae6:	f7ff fef3 	bl	80028d0 <I2SEx_FullDuplexTx_IT>
 8002aea:	e7b1      	b.n	8002a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
    if(((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002aec:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002af0:	e7b8      	b.n	8002a64 <HAL_I2SEx_FullDuplex_IRQHandler+0x54>
      I2SEx_FullDuplexRx_IT(hi2s, I2S_USE_I2SEXT);
 8002af2:	2101      	movs	r1, #1
 8002af4:	4620      	mov	r0, r4
 8002af6:	f7ff ff3b 	bl	8002970 <I2SEx_FullDuplexRx_IT>
 8002afa:	e7b7      	b.n	8002a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x5c>
    if(((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002afc:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002b00:	e7be      	b.n	8002a80 <HAL_I2SEx_FullDuplex_IRQHandler+0x70>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b08:	605a      	str	r2, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b0a:	6822      	ldr	r2, [r4, #0]
 8002b0c:	6853      	ldr	r3, [r2, #4]
 8002b0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b12:	041b      	lsls	r3, r3, #16
 8002b14:	0c1b      	lsrs	r3, r3, #16
 8002b16:	6053      	str	r3, [r2, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002b18:	2300      	movs	r3, #0
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	6823      	ldr	r3, [r4, #0]
 8002b1e:	68da      	ldr	r2, [r3, #12]
 8002b20:	9200      	str	r2, [sp, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	9b00      	ldr	r3, [sp, #0]
      hi2s->State = HAL_I2S_STATE_READY;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 8002b2e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002b30:	f043 0302 	orr.w	r3, r3, #2
 8002b34:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002b36:	4620      	mov	r0, r4
 8002b38:	f7ff fd91 	bl	800265e <HAL_I2S_ErrorCallback>
 8002b3c:	e7a4      	b.n	8002a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x78>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b3e:	4a35      	ldr	r2, [pc, #212]	; (8002c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>)
 8002b40:	e7b7      	b.n	8002ab2 <HAL_I2SEx_FullDuplex_IRQHandler+0xa2>
    if(((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002b42:	9b02      	ldr	r3, [sp, #8]
 8002b44:	f013 0f02 	tst.w	r3, #2
 8002b48:	d003      	beq.n	8002b52 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002b4a:	684b      	ldr	r3, [r1, #4]
 8002b4c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002b50:	d14f      	bne.n	8002bf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e2>
    if(((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002b52:	9b03      	ldr	r3, [sp, #12]
 8002b54:	f013 0f01 	tst.w	r3, #1
 8002b58:	d004      	beq.n	8002b64 <HAL_I2SEx_FullDuplex_IRQHandler+0x154>
 8002b5a:	6823      	ldr	r3, [r4, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002b62:	d14b      	bne.n	8002bfc <HAL_I2SEx_FullDuplex_IRQHandler+0x1ec>
    if(((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002b64:	9b03      	ldr	r3, [sp, #12]
 8002b66:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002b6a:	d01e      	beq.n	8002baa <HAL_I2SEx_FullDuplex_IRQHandler+0x19a>
 8002b6c:	6823      	ldr	r3, [r4, #0]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	f012 0f20 	tst.w	r2, #32
 8002b74:	d019      	beq.n	8002baa <HAL_I2SEx_FullDuplex_IRQHandler+0x19a>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b7c:	0412      	lsls	r2, r2, #16
 8002b7e:	0c12      	lsrs	r2, r2, #16
 8002b80:	605a      	str	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b82:	6822      	ldr	r2, [r4, #0]
 8002b84:	4b22      	ldr	r3, [pc, #136]	; (8002c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x200>)
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d03d      	beq.n	8002c06 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f6>
 8002b8a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002b8e:	6853      	ldr	r3, [r2, #4]
 8002b90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b94:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8002b96:	2301      	movs	r3, #1
 8002b98:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 8002b9c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002b9e:	f043 0302 	orr.w	r3, r3, #2
 8002ba2:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002ba4:	4620      	mov	r0, r4
 8002ba6:	f7ff fd5a 	bl	800265e <HAL_I2S_ErrorCallback>
    if(((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002baa:	9b02      	ldr	r3, [sp, #8]
 8002bac:	f013 0f08 	tst.w	r3, #8
 8002bb0:	d093      	beq.n	8002ada <HAL_I2SEx_FullDuplex_IRQHandler+0xca>
 8002bb2:	6822      	ldr	r2, [r4, #0]
 8002bb4:	4b16      	ldr	r3, [pc, #88]	; (8002c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x200>)
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d027      	beq.n	8002c0a <HAL_I2SEx_FullDuplex_IRQHandler+0x1fa>
 8002bba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	f012 0f20 	tst.w	r2, #32
 8002bc4:	d089      	beq.n	8002ada <HAL_I2SEx_FullDuplex_IRQHandler+0xca>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002bcc:	605a      	str	r2, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002bce:	6822      	ldr	r2, [r4, #0]
 8002bd0:	6853      	ldr	r3, [r2, #4]
 8002bd2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002bd6:	041b      	lsls	r3, r3, #16
 8002bd8:	0c1b      	lsrs	r3, r3, #16
 8002bda:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_UDR);
 8002be2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002be4:	f043 0304 	orr.w	r3, r3, #4
 8002be8:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002bea:	4620      	mov	r0, r4
 8002bec:	f7ff fd37 	bl	800265e <HAL_I2S_ErrorCallback>
}
 8002bf0:	e773      	b.n	8002ada <HAL_I2SEx_FullDuplex_IRQHandler+0xca>
      I2SEx_FullDuplexTx_IT(hi2s, I2S_USE_I2SEXT);
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	4620      	mov	r0, r4
 8002bf6:	f7ff fe6b 	bl	80028d0 <I2SEx_FullDuplexTx_IT>
 8002bfa:	e7aa      	b.n	8002b52 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
      I2SEx_FullDuplexRx_IT(hi2s, I2S_USE_I2S);
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	4620      	mov	r0, r4
 8002c00:	f7ff feb6 	bl	8002970 <I2SEx_FullDuplexRx_IT>
 8002c04:	e7ae      	b.n	8002b64 <HAL_I2SEx_FullDuplex_IRQHandler+0x154>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c06:	4a03      	ldr	r2, [pc, #12]	; (8002c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>)
 8002c08:	e7c1      	b.n	8002b8e <HAL_I2SEx_FullDuplex_IRQHandler+0x17e>
    if(((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002c0a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002c0e:	e7d6      	b.n	8002bbe <HAL_I2SEx_FullDuplex_IRQHandler+0x1ae>
 8002c10:	40003800 	.word	0x40003800
 8002c14:	40003400 	.word	0x40003400

08002c18 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c18:	2800      	cmp	r0, #0
 8002c1a:	f000 81bb 	beq.w	8002f94 <HAL_RCC_OscConfig+0x37c>
{
 8002c1e:	b570      	push	{r4, r5, r6, lr}
 8002c20:	b082      	sub	sp, #8
 8002c22:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c24:	6803      	ldr	r3, [r0, #0]
 8002c26:	f013 0f01 	tst.w	r3, #1
 8002c2a:	d03b      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c2c:	4ba7      	ldr	r3, [pc, #668]	; (8002ecc <HAL_RCC_OscConfig+0x2b4>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f003 030c 	and.w	r3, r3, #12
 8002c34:	2b04      	cmp	r3, #4
 8002c36:	d02c      	beq.n	8002c92 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c38:	4ba4      	ldr	r3, [pc, #656]	; (8002ecc <HAL_RCC_OscConfig+0x2b4>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c40:	2b08      	cmp	r3, #8
 8002c42:	d021      	beq.n	8002c88 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c44:	6863      	ldr	r3, [r4, #4]
 8002c46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c4a:	d04f      	beq.n	8002cec <HAL_RCC_OscConfig+0xd4>
 8002c4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c50:	d052      	beq.n	8002cf8 <HAL_RCC_OscConfig+0xe0>
 8002c52:	4b9e      	ldr	r3, [pc, #632]	; (8002ecc <HAL_RCC_OscConfig+0x2b4>)
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c62:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c64:	6863      	ldr	r3, [r4, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d050      	beq.n	8002d0c <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c6a:	f7fd fc5f 	bl	800052c <HAL_GetTick>
 8002c6e:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c70:	4b96      	ldr	r3, [pc, #600]	; (8002ecc <HAL_RCC_OscConfig+0x2b4>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002c78:	d114      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c7a:	f7fd fc57 	bl	800052c <HAL_GetTick>
 8002c7e:	1b40      	subs	r0, r0, r5
 8002c80:	2864      	cmp	r0, #100	; 0x64
 8002c82:	d9f5      	bls.n	8002c70 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8002c84:	2003      	movs	r0, #3
 8002c86:	e18a      	b.n	8002f9e <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c88:	4b90      	ldr	r3, [pc, #576]	; (8002ecc <HAL_RCC_OscConfig+0x2b4>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002c90:	d0d8      	beq.n	8002c44 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c92:	4b8e      	ldr	r3, [pc, #568]	; (8002ecc <HAL_RCC_OscConfig+0x2b4>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002c9a:	d003      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x8c>
 8002c9c:	6863      	ldr	r3, [r4, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 817a 	beq.w	8002f98 <HAL_RCC_OscConfig+0x380>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ca4:	6823      	ldr	r3, [r4, #0]
 8002ca6:	f013 0f02 	tst.w	r3, #2
 8002caa:	d055      	beq.n	8002d58 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cac:	4b87      	ldr	r3, [pc, #540]	; (8002ecc <HAL_RCC_OscConfig+0x2b4>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f013 0f0c 	tst.w	r3, #12
 8002cb4:	d03e      	beq.n	8002d34 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cb6:	4b85      	ldr	r3, [pc, #532]	; (8002ecc <HAL_RCC_OscConfig+0x2b4>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cbe:	2b08      	cmp	r3, #8
 8002cc0:	d033      	beq.n	8002d2a <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cc2:	68e3      	ldr	r3, [r4, #12]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d068      	beq.n	8002d9a <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cc8:	4b81      	ldr	r3, [pc, #516]	; (8002ed0 <HAL_RCC_OscConfig+0x2b8>)
 8002cca:	2201      	movs	r2, #1
 8002ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cce:	f7fd fc2d 	bl	800052c <HAL_GetTick>
 8002cd2:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd4:	4b7d      	ldr	r3, [pc, #500]	; (8002ecc <HAL_RCC_OscConfig+0x2b4>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f013 0f02 	tst.w	r3, #2
 8002cdc:	d154      	bne.n	8002d88 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cde:	f7fd fc25 	bl	800052c <HAL_GetTick>
 8002ce2:	1b40      	subs	r0, r0, r5
 8002ce4:	2802      	cmp	r0, #2
 8002ce6:	d9f5      	bls.n	8002cd4 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002ce8:	2003      	movs	r0, #3
 8002cea:	e158      	b.n	8002f9e <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cec:	4a77      	ldr	r2, [pc, #476]	; (8002ecc <HAL_RCC_OscConfig+0x2b4>)
 8002cee:	6813      	ldr	r3, [r2, #0]
 8002cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf4:	6013      	str	r3, [r2, #0]
 8002cf6:	e7b5      	b.n	8002c64 <HAL_RCC_OscConfig+0x4c>
 8002cf8:	4b74      	ldr	r3, [pc, #464]	; (8002ecc <HAL_RCC_OscConfig+0x2b4>)
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	e7ab      	b.n	8002c64 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8002d0c:	f7fd fc0e 	bl	800052c <HAL_GetTick>
 8002d10:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d12:	4b6e      	ldr	r3, [pc, #440]	; (8002ecc <HAL_RCC_OscConfig+0x2b4>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002d1a:	d0c3      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d1c:	f7fd fc06 	bl	800052c <HAL_GetTick>
 8002d20:	1b40      	subs	r0, r0, r5
 8002d22:	2864      	cmp	r0, #100	; 0x64
 8002d24:	d9f5      	bls.n	8002d12 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8002d26:	2003      	movs	r0, #3
 8002d28:	e139      	b.n	8002f9e <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d2a:	4b68      	ldr	r3, [pc, #416]	; (8002ecc <HAL_RCC_OscConfig+0x2b4>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002d32:	d1c6      	bne.n	8002cc2 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d34:	4b65      	ldr	r3, [pc, #404]	; (8002ecc <HAL_RCC_OscConfig+0x2b4>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f013 0f02 	tst.w	r3, #2
 8002d3c:	d004      	beq.n	8002d48 <HAL_RCC_OscConfig+0x130>
 8002d3e:	68e3      	ldr	r3, [r4, #12]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d001      	beq.n	8002d48 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 8002d44:	2001      	movs	r0, #1
 8002d46:	e12a      	b.n	8002f9e <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d48:	4a60      	ldr	r2, [pc, #384]	; (8002ecc <HAL_RCC_OscConfig+0x2b4>)
 8002d4a:	6813      	ldr	r3, [r2, #0]
 8002d4c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002d50:	6921      	ldr	r1, [r4, #16]
 8002d52:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002d56:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d58:	6823      	ldr	r3, [r4, #0]
 8002d5a:	f013 0f08 	tst.w	r3, #8
 8002d5e:	d040      	beq.n	8002de2 <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d60:	6963      	ldr	r3, [r4, #20]
 8002d62:	b363      	cbz	r3, 8002dbe <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d64:	4b5b      	ldr	r3, [pc, #364]	; (8002ed4 <HAL_RCC_OscConfig+0x2bc>)
 8002d66:	2201      	movs	r2, #1
 8002d68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d6a:	f7fd fbdf 	bl	800052c <HAL_GetTick>
 8002d6e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d70:	4b56      	ldr	r3, [pc, #344]	; (8002ecc <HAL_RCC_OscConfig+0x2b4>)
 8002d72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d74:	f013 0f02 	tst.w	r3, #2
 8002d78:	d133      	bne.n	8002de2 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d7a:	f7fd fbd7 	bl	800052c <HAL_GetTick>
 8002d7e:	1b40      	subs	r0, r0, r5
 8002d80:	2802      	cmp	r0, #2
 8002d82:	d9f5      	bls.n	8002d70 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8002d84:	2003      	movs	r0, #3
 8002d86:	e10a      	b.n	8002f9e <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d88:	4a50      	ldr	r2, [pc, #320]	; (8002ecc <HAL_RCC_OscConfig+0x2b4>)
 8002d8a:	6813      	ldr	r3, [r2, #0]
 8002d8c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002d90:	6921      	ldr	r1, [r4, #16]
 8002d92:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002d96:	6013      	str	r3, [r2, #0]
 8002d98:	e7de      	b.n	8002d58 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8002d9a:	4b4d      	ldr	r3, [pc, #308]	; (8002ed0 <HAL_RCC_OscConfig+0x2b8>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002da0:	f7fd fbc4 	bl	800052c <HAL_GetTick>
 8002da4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002da6:	4b49      	ldr	r3, [pc, #292]	; (8002ecc <HAL_RCC_OscConfig+0x2b4>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f013 0f02 	tst.w	r3, #2
 8002dae:	d0d3      	beq.n	8002d58 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002db0:	f7fd fbbc 	bl	800052c <HAL_GetTick>
 8002db4:	1b40      	subs	r0, r0, r5
 8002db6:	2802      	cmp	r0, #2
 8002db8:	d9f5      	bls.n	8002da6 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8002dba:	2003      	movs	r0, #3
 8002dbc:	e0ef      	b.n	8002f9e <HAL_RCC_OscConfig+0x386>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dbe:	4b45      	ldr	r3, [pc, #276]	; (8002ed4 <HAL_RCC_OscConfig+0x2bc>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc4:	f7fd fbb2 	bl	800052c <HAL_GetTick>
 8002dc8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dca:	4b40      	ldr	r3, [pc, #256]	; (8002ecc <HAL_RCC_OscConfig+0x2b4>)
 8002dcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dce:	f013 0f02 	tst.w	r3, #2
 8002dd2:	d006      	beq.n	8002de2 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dd4:	f7fd fbaa 	bl	800052c <HAL_GetTick>
 8002dd8:	1b40      	subs	r0, r0, r5
 8002dda:	2802      	cmp	r0, #2
 8002ddc:	d9f5      	bls.n	8002dca <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 8002dde:	2003      	movs	r0, #3
 8002de0:	e0dd      	b.n	8002f9e <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002de2:	6823      	ldr	r3, [r4, #0]
 8002de4:	f013 0f04 	tst.w	r3, #4
 8002de8:	d079      	beq.n	8002ede <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dea:	4b38      	ldr	r3, [pc, #224]	; (8002ecc <HAL_RCC_OscConfig+0x2b4>)
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002df2:	d133      	bne.n	8002e5c <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002df4:	2300      	movs	r3, #0
 8002df6:	9301      	str	r3, [sp, #4]
 8002df8:	4b34      	ldr	r3, [pc, #208]	; (8002ecc <HAL_RCC_OscConfig+0x2b4>)
 8002dfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dfc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002e00:	641a      	str	r2, [r3, #64]	; 0x40
 8002e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e08:	9301      	str	r3, [sp, #4]
 8002e0a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002e0c:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e0e:	4b32      	ldr	r3, [pc, #200]	; (8002ed8 <HAL_RCC_OscConfig+0x2c0>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002e16:	d023      	beq.n	8002e60 <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e18:	68a3      	ldr	r3, [r4, #8]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d034      	beq.n	8002e88 <HAL_RCC_OscConfig+0x270>
 8002e1e:	2b05      	cmp	r3, #5
 8002e20:	d038      	beq.n	8002e94 <HAL_RCC_OscConfig+0x27c>
 8002e22:	4b2a      	ldr	r3, [pc, #168]	; (8002ecc <HAL_RCC_OscConfig+0x2b4>)
 8002e24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e26:	f022 0201 	bic.w	r2, r2, #1
 8002e2a:	671a      	str	r2, [r3, #112]	; 0x70
 8002e2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e2e:	f022 0204 	bic.w	r2, r2, #4
 8002e32:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e34:	68a3      	ldr	r3, [r4, #8]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d036      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e3a:	f7fd fb77 	bl	800052c <HAL_GetTick>
 8002e3e:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e40:	4b22      	ldr	r3, [pc, #136]	; (8002ecc <HAL_RCC_OscConfig+0x2b4>)
 8002e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e44:	f013 0f02 	tst.w	r3, #2
 8002e48:	d148      	bne.n	8002edc <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e4a:	f7fd fb6f 	bl	800052c <HAL_GetTick>
 8002e4e:	1b80      	subs	r0, r0, r6
 8002e50:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e54:	4298      	cmp	r0, r3
 8002e56:	d9f3      	bls.n	8002e40 <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 8002e58:	2003      	movs	r0, #3
 8002e5a:	e0a0      	b.n	8002f9e <HAL_RCC_OscConfig+0x386>
    FlagStatus       pwrclkchanged = RESET;
 8002e5c:	2500      	movs	r5, #0
 8002e5e:	e7d6      	b.n	8002e0e <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e60:	4a1d      	ldr	r2, [pc, #116]	; (8002ed8 <HAL_RCC_OscConfig+0x2c0>)
 8002e62:	6813      	ldr	r3, [r2, #0]
 8002e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e68:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002e6a:	f7fd fb5f 	bl	800052c <HAL_GetTick>
 8002e6e:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e70:	4b19      	ldr	r3, [pc, #100]	; (8002ed8 <HAL_RCC_OscConfig+0x2c0>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002e78:	d1ce      	bne.n	8002e18 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e7a:	f7fd fb57 	bl	800052c <HAL_GetTick>
 8002e7e:	1b80      	subs	r0, r0, r6
 8002e80:	2802      	cmp	r0, #2
 8002e82:	d9f5      	bls.n	8002e70 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8002e84:	2003      	movs	r0, #3
 8002e86:	e08a      	b.n	8002f9e <HAL_RCC_OscConfig+0x386>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e88:	4a10      	ldr	r2, [pc, #64]	; (8002ecc <HAL_RCC_OscConfig+0x2b4>)
 8002e8a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002e8c:	f043 0301 	orr.w	r3, r3, #1
 8002e90:	6713      	str	r3, [r2, #112]	; 0x70
 8002e92:	e7cf      	b.n	8002e34 <HAL_RCC_OscConfig+0x21c>
 8002e94:	4b0d      	ldr	r3, [pc, #52]	; (8002ecc <HAL_RCC_OscConfig+0x2b4>)
 8002e96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e98:	f042 0204 	orr.w	r2, r2, #4
 8002e9c:	671a      	str	r2, [r3, #112]	; 0x70
 8002e9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ea0:	f042 0201 	orr.w	r2, r2, #1
 8002ea4:	671a      	str	r2, [r3, #112]	; 0x70
 8002ea6:	e7c5      	b.n	8002e34 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea8:	f7fd fb40 	bl	800052c <HAL_GetTick>
 8002eac:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eae:	4b07      	ldr	r3, [pc, #28]	; (8002ecc <HAL_RCC_OscConfig+0x2b4>)
 8002eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb2:	f013 0f02 	tst.w	r3, #2
 8002eb6:	d011      	beq.n	8002edc <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eb8:	f7fd fb38 	bl	800052c <HAL_GetTick>
 8002ebc:	1b80      	subs	r0, r0, r6
 8002ebe:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ec2:	4298      	cmp	r0, r3
 8002ec4:	d9f3      	bls.n	8002eae <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 8002ec6:	2003      	movs	r0, #3
 8002ec8:	e069      	b.n	8002f9e <HAL_RCC_OscConfig+0x386>
 8002eca:	bf00      	nop
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	42470000 	.word	0x42470000
 8002ed4:	42470e80 	.word	0x42470e80
 8002ed8:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002edc:	b9e5      	cbnz	r5, 8002f18 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ede:	69a3      	ldr	r3, [r4, #24]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d05b      	beq.n	8002f9c <HAL_RCC_OscConfig+0x384>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ee4:	4a30      	ldr	r2, [pc, #192]	; (8002fa8 <HAL_RCC_OscConfig+0x390>)
 8002ee6:	6892      	ldr	r2, [r2, #8]
 8002ee8:	f002 020c 	and.w	r2, r2, #12
 8002eec:	2a08      	cmp	r2, #8
 8002eee:	d058      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x38a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d017      	beq.n	8002f24 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ef4:	4b2d      	ldr	r3, [pc, #180]	; (8002fac <HAL_RCC_OscConfig+0x394>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002efa:	f7fd fb17 	bl	800052c <HAL_GetTick>
 8002efe:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f00:	4b29      	ldr	r3, [pc, #164]	; (8002fa8 <HAL_RCC_OscConfig+0x390>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002f08:	d042      	beq.n	8002f90 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f0a:	f7fd fb0f 	bl	800052c <HAL_GetTick>
 8002f0e:	1b00      	subs	r0, r0, r4
 8002f10:	2802      	cmp	r0, #2
 8002f12:	d9f5      	bls.n	8002f00 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002f14:	2003      	movs	r0, #3
 8002f16:	e042      	b.n	8002f9e <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f18:	4a23      	ldr	r2, [pc, #140]	; (8002fa8 <HAL_RCC_OscConfig+0x390>)
 8002f1a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002f1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f20:	6413      	str	r3, [r2, #64]	; 0x40
 8002f22:	e7dc      	b.n	8002ede <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 8002f24:	4b21      	ldr	r3, [pc, #132]	; (8002fac <HAL_RCC_OscConfig+0x394>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002f2a:	f7fd faff 	bl	800052c <HAL_GetTick>
 8002f2e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f30:	4b1d      	ldr	r3, [pc, #116]	; (8002fa8 <HAL_RCC_OscConfig+0x390>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002f38:	d006      	beq.n	8002f48 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f3a:	f7fd faf7 	bl	800052c <HAL_GetTick>
 8002f3e:	1b40      	subs	r0, r0, r5
 8002f40:	2802      	cmp	r0, #2
 8002f42:	d9f5      	bls.n	8002f30 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8002f44:	2003      	movs	r0, #3
 8002f46:	e02a      	b.n	8002f9e <HAL_RCC_OscConfig+0x386>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f48:	69e3      	ldr	r3, [r4, #28]
 8002f4a:	6a22      	ldr	r2, [r4, #32]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002f50:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002f54:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002f56:	0852      	lsrs	r2, r2, #1
 8002f58:	3a01      	subs	r2, #1
 8002f5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002f5e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002f60:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002f64:	4a10      	ldr	r2, [pc, #64]	; (8002fa8 <HAL_RCC_OscConfig+0x390>)
 8002f66:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002f68:	4b10      	ldr	r3, [pc, #64]	; (8002fac <HAL_RCC_OscConfig+0x394>)
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002f6e:	f7fd fadd 	bl	800052c <HAL_GetTick>
 8002f72:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f74:	4b0c      	ldr	r3, [pc, #48]	; (8002fa8 <HAL_RCC_OscConfig+0x390>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002f7c:	d106      	bne.n	8002f8c <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f7e:	f7fd fad5 	bl	800052c <HAL_GetTick>
 8002f82:	1b00      	subs	r0, r0, r4
 8002f84:	2802      	cmp	r0, #2
 8002f86:	d9f5      	bls.n	8002f74 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8002f88:	2003      	movs	r0, #3
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8002f8c:	2000      	movs	r0, #0
 8002f8e:	e006      	b.n	8002f9e <HAL_RCC_OscConfig+0x386>
 8002f90:	2000      	movs	r0, #0
 8002f92:	e004      	b.n	8002f9e <HAL_RCC_OscConfig+0x386>
    return HAL_ERROR;
 8002f94:	2001      	movs	r0, #1
}
 8002f96:	4770      	bx	lr
        return HAL_ERROR;
 8002f98:	2001      	movs	r0, #1
 8002f9a:	e000      	b.n	8002f9e <HAL_RCC_OscConfig+0x386>
  return HAL_OK;
 8002f9c:	2000      	movs	r0, #0
}
 8002f9e:	b002      	add	sp, #8
 8002fa0:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002fa2:	2001      	movs	r0, #1
 8002fa4:	e7fb      	b.n	8002f9e <HAL_RCC_OscConfig+0x386>
 8002fa6:	bf00      	nop
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	42470060 	.word	0x42470060

08002fb0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fb0:	4b32      	ldr	r3, [pc, #200]	; (800307c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f003 030c 	and.w	r3, r3, #12
 8002fb8:	2b04      	cmp	r3, #4
 8002fba:	d05c      	beq.n	8003076 <HAL_RCC_GetSysClockFreq+0xc6>
 8002fbc:	2b08      	cmp	r3, #8
 8002fbe:	d001      	beq.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fc0:	482f      	ldr	r0, [pc, #188]	; (8003080 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002fc2:	4770      	bx	lr
{
 8002fc4:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fc8:	4b2c      	ldr	r3, [pc, #176]	; (800307c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002fd6:	d02b      	beq.n	8003030 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fd8:	4b28      	ldr	r3, [pc, #160]	; (800307c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002fe0:	461e      	mov	r6, r3
 8002fe2:	2700      	movs	r7, #0
 8002fe4:	015c      	lsls	r4, r3, #5
 8002fe6:	2500      	movs	r5, #0
 8002fe8:	1ae4      	subs	r4, r4, r3
 8002fea:	eb65 0507 	sbc.w	r5, r5, r7
 8002fee:	01a9      	lsls	r1, r5, #6
 8002ff0:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8002ff4:	01a0      	lsls	r0, r4, #6
 8002ff6:	1b00      	subs	r0, r0, r4
 8002ff8:	eb61 0105 	sbc.w	r1, r1, r5
 8002ffc:	00cb      	lsls	r3, r1, #3
 8002ffe:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003002:	00c4      	lsls	r4, r0, #3
 8003004:	19a0      	adds	r0, r4, r6
 8003006:	eb43 0107 	adc.w	r1, r3, r7
 800300a:	024b      	lsls	r3, r1, #9
 800300c:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8003010:	0244      	lsls	r4, r0, #9
 8003012:	4620      	mov	r0, r4
 8003014:	4619      	mov	r1, r3
 8003016:	2300      	movs	r3, #0
 8003018:	f7fd f8e2 	bl	80001e0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800301c:	4b17      	ldr	r3, [pc, #92]	; (800307c <HAL_RCC_GetSysClockFreq+0xcc>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003024:	3301      	adds	r3, #1
 8003026:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8003028:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800302c:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003030:	4b12      	ldr	r3, [pc, #72]	; (800307c <HAL_RCC_GetSysClockFreq+0xcc>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8003038:	461e      	mov	r6, r3
 800303a:	2700      	movs	r7, #0
 800303c:	015c      	lsls	r4, r3, #5
 800303e:	2500      	movs	r5, #0
 8003040:	1ae4      	subs	r4, r4, r3
 8003042:	eb65 0507 	sbc.w	r5, r5, r7
 8003046:	01a9      	lsls	r1, r5, #6
 8003048:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 800304c:	01a0      	lsls	r0, r4, #6
 800304e:	1b00      	subs	r0, r0, r4
 8003050:	eb61 0105 	sbc.w	r1, r1, r5
 8003054:	00cb      	lsls	r3, r1, #3
 8003056:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800305a:	00c4      	lsls	r4, r0, #3
 800305c:	19a0      	adds	r0, r4, r6
 800305e:	eb43 0107 	adc.w	r1, r3, r7
 8003062:	028b      	lsls	r3, r1, #10
 8003064:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8003068:	0284      	lsls	r4, r0, #10
 800306a:	4620      	mov	r0, r4
 800306c:	4619      	mov	r1, r3
 800306e:	2300      	movs	r3, #0
 8003070:	f7fd f8b6 	bl	80001e0 <__aeabi_uldivmod>
 8003074:	e7d2      	b.n	800301c <HAL_RCC_GetSysClockFreq+0x6c>
      sysclockfreq = HSE_VALUE;
 8003076:	4803      	ldr	r0, [pc, #12]	; (8003084 <HAL_RCC_GetSysClockFreq+0xd4>)
}
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	40023800 	.word	0x40023800
 8003080:	00f42400 	.word	0x00f42400
 8003084:	007a1200 	.word	0x007a1200

08003088 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003088:	2800      	cmp	r0, #0
 800308a:	f000 809d 	beq.w	80031c8 <HAL_RCC_ClockConfig+0x140>
{
 800308e:	b570      	push	{r4, r5, r6, lr}
 8003090:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003092:	4b4f      	ldr	r3, [pc, #316]	; (80031d0 <HAL_RCC_ClockConfig+0x148>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 030f 	and.w	r3, r3, #15
 800309a:	428b      	cmp	r3, r1
 800309c:	d209      	bcs.n	80030b2 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800309e:	b2cb      	uxtb	r3, r1
 80030a0:	4a4b      	ldr	r2, [pc, #300]	; (80031d0 <HAL_RCC_ClockConfig+0x148>)
 80030a2:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a4:	6813      	ldr	r3, [r2, #0]
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	428b      	cmp	r3, r1
 80030ac:	d001      	beq.n	80030b2 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 80030ae:	2001      	movs	r0, #1
}
 80030b0:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030b2:	6823      	ldr	r3, [r4, #0]
 80030b4:	f013 0f02 	tst.w	r3, #2
 80030b8:	d017      	beq.n	80030ea <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ba:	f013 0f04 	tst.w	r3, #4
 80030be:	d004      	beq.n	80030ca <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030c0:	4a44      	ldr	r2, [pc, #272]	; (80031d4 <HAL_RCC_ClockConfig+0x14c>)
 80030c2:	6893      	ldr	r3, [r2, #8]
 80030c4:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030c8:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ca:	6823      	ldr	r3, [r4, #0]
 80030cc:	f013 0f08 	tst.w	r3, #8
 80030d0:	d004      	beq.n	80030dc <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030d2:	4a40      	ldr	r2, [pc, #256]	; (80031d4 <HAL_RCC_ClockConfig+0x14c>)
 80030d4:	6893      	ldr	r3, [r2, #8]
 80030d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030da:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030dc:	4a3d      	ldr	r2, [pc, #244]	; (80031d4 <HAL_RCC_ClockConfig+0x14c>)
 80030de:	6893      	ldr	r3, [r2, #8]
 80030e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030e4:	68a0      	ldr	r0, [r4, #8]
 80030e6:	4303      	orrs	r3, r0
 80030e8:	6093      	str	r3, [r2, #8]
 80030ea:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ec:	6823      	ldr	r3, [r4, #0]
 80030ee:	f013 0f01 	tst.w	r3, #1
 80030f2:	d032      	beq.n	800315a <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030f4:	6863      	ldr	r3, [r4, #4]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d021      	beq.n	800313e <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030fa:	1e9a      	subs	r2, r3, #2
 80030fc:	2a01      	cmp	r2, #1
 80030fe:	d925      	bls.n	800314c <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003100:	4a34      	ldr	r2, [pc, #208]	; (80031d4 <HAL_RCC_ClockConfig+0x14c>)
 8003102:	6812      	ldr	r2, [r2, #0]
 8003104:	f012 0f02 	tst.w	r2, #2
 8003108:	d060      	beq.n	80031cc <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800310a:	4932      	ldr	r1, [pc, #200]	; (80031d4 <HAL_RCC_ClockConfig+0x14c>)
 800310c:	688a      	ldr	r2, [r1, #8]
 800310e:	f022 0203 	bic.w	r2, r2, #3
 8003112:	4313      	orrs	r3, r2
 8003114:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003116:	f7fd fa09 	bl	800052c <HAL_GetTick>
 800311a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800311c:	4b2d      	ldr	r3, [pc, #180]	; (80031d4 <HAL_RCC_ClockConfig+0x14c>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f003 030c 	and.w	r3, r3, #12
 8003124:	6862      	ldr	r2, [r4, #4]
 8003126:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800312a:	d016      	beq.n	800315a <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800312c:	f7fd f9fe 	bl	800052c <HAL_GetTick>
 8003130:	1b80      	subs	r0, r0, r6
 8003132:	f241 3388 	movw	r3, #5000	; 0x1388
 8003136:	4298      	cmp	r0, r3
 8003138:	d9f0      	bls.n	800311c <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 800313a:	2003      	movs	r0, #3
 800313c:	e7b8      	b.n	80030b0 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800313e:	4a25      	ldr	r2, [pc, #148]	; (80031d4 <HAL_RCC_ClockConfig+0x14c>)
 8003140:	6812      	ldr	r2, [r2, #0]
 8003142:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8003146:	d1e0      	bne.n	800310a <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8003148:	2001      	movs	r0, #1
 800314a:	e7b1      	b.n	80030b0 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800314c:	4a21      	ldr	r2, [pc, #132]	; (80031d4 <HAL_RCC_ClockConfig+0x14c>)
 800314e:	6812      	ldr	r2, [r2, #0]
 8003150:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003154:	d1d9      	bne.n	800310a <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8003156:	2001      	movs	r0, #1
 8003158:	e7aa      	b.n	80030b0 <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800315a:	4b1d      	ldr	r3, [pc, #116]	; (80031d0 <HAL_RCC_ClockConfig+0x148>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 030f 	and.w	r3, r3, #15
 8003162:	42ab      	cmp	r3, r5
 8003164:	d909      	bls.n	800317a <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003166:	b2ea      	uxtb	r2, r5
 8003168:	4b19      	ldr	r3, [pc, #100]	; (80031d0 <HAL_RCC_ClockConfig+0x148>)
 800316a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 030f 	and.w	r3, r3, #15
 8003172:	42ab      	cmp	r3, r5
 8003174:	d001      	beq.n	800317a <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 8003176:	2001      	movs	r0, #1
 8003178:	e79a      	b.n	80030b0 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800317a:	6823      	ldr	r3, [r4, #0]
 800317c:	f013 0f04 	tst.w	r3, #4
 8003180:	d006      	beq.n	8003190 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003182:	4a14      	ldr	r2, [pc, #80]	; (80031d4 <HAL_RCC_ClockConfig+0x14c>)
 8003184:	6893      	ldr	r3, [r2, #8]
 8003186:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800318a:	68e1      	ldr	r1, [r4, #12]
 800318c:	430b      	orrs	r3, r1
 800318e:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003190:	6823      	ldr	r3, [r4, #0]
 8003192:	f013 0f08 	tst.w	r3, #8
 8003196:	d007      	beq.n	80031a8 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003198:	4a0e      	ldr	r2, [pc, #56]	; (80031d4 <HAL_RCC_ClockConfig+0x14c>)
 800319a:	6893      	ldr	r3, [r2, #8]
 800319c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80031a0:	6921      	ldr	r1, [r4, #16]
 80031a2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80031a6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031a8:	f7ff ff02 	bl	8002fb0 <HAL_RCC_GetSysClockFreq>
 80031ac:	4b09      	ldr	r3, [pc, #36]	; (80031d4 <HAL_RCC_ClockConfig+0x14c>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80031b4:	4a08      	ldr	r2, [pc, #32]	; (80031d8 <HAL_RCC_ClockConfig+0x150>)
 80031b6:	5cd3      	ldrb	r3, [r2, r3]
 80031b8:	40d8      	lsrs	r0, r3
 80031ba:	4b08      	ldr	r3, [pc, #32]	; (80031dc <HAL_RCC_ClockConfig+0x154>)
 80031bc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80031be:	2000      	movs	r0, #0
 80031c0:	f002 f88c 	bl	80052dc <HAL_InitTick>
  return HAL_OK;
 80031c4:	2000      	movs	r0, #0
 80031c6:	e773      	b.n	80030b0 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 80031c8:	2001      	movs	r0, #1
}
 80031ca:	4770      	bx	lr
        return HAL_ERROR;
 80031cc:	2001      	movs	r0, #1
 80031ce:	e76f      	b.n	80030b0 <HAL_RCC_ClockConfig+0x28>
 80031d0:	40023c00 	.word	0x40023c00
 80031d4:	40023800 	.word	0x40023800
 80031d8:	08005514 	.word	0x08005514
 80031dc:	2000000c 	.word	0x2000000c

080031e0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80031e0:	4b01      	ldr	r3, [pc, #4]	; (80031e8 <HAL_RCC_GetHCLKFreq+0x8>)
 80031e2:	6818      	ldr	r0, [r3, #0]
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	2000000c 	.word	0x2000000c

080031ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031ec:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031ee:	f7ff fff7 	bl	80031e0 <HAL_RCC_GetHCLKFreq>
 80031f2:	4b04      	ldr	r3, [pc, #16]	; (8003204 <HAL_RCC_GetPCLK1Freq+0x18>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80031fa:	4a03      	ldr	r2, [pc, #12]	; (8003208 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80031fc:	5cd3      	ldrb	r3, [r2, r3]
}
 80031fe:	40d8      	lsrs	r0, r3
 8003200:	bd08      	pop	{r3, pc}
 8003202:	bf00      	nop
 8003204:	40023800 	.word	0x40023800
 8003208:	08005524 	.word	0x08005524

0800320c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800320c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800320e:	f7ff ffe7 	bl	80031e0 <HAL_RCC_GetHCLKFreq>
 8003212:	4b04      	ldr	r3, [pc, #16]	; (8003224 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800321a:	4a03      	ldr	r2, [pc, #12]	; (8003228 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800321c:	5cd3      	ldrb	r3, [r2, r3]
}
 800321e:	40d8      	lsrs	r0, r3
 8003220:	bd08      	pop	{r3, pc}
 8003222:	bf00      	nop
 8003224:	40023800 	.word	0x40023800
 8003228:	08005524 	.word	0x08005524

0800322c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800322c:	230f      	movs	r3, #15
 800322e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003230:	4b0b      	ldr	r3, [pc, #44]	; (8003260 <HAL_RCC_GetClockConfig+0x34>)
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	f002 0203 	and.w	r2, r2, #3
 8003238:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003240:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8003248:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	08db      	lsrs	r3, r3, #3
 800324e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003252:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003254:	4b03      	ldr	r3, [pc, #12]	; (8003264 <HAL_RCC_GetClockConfig+0x38>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 030f 	and.w	r3, r3, #15
 800325c:	600b      	str	r3, [r1, #0]
}
 800325e:	4770      	bx	lr
 8003260:	40023800 	.word	0x40023800
 8003264:	40023c00 	.word	0x40023c00

08003268 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003268:	b530      	push	{r4, r5, lr}
 800326a:	b083      	sub	sp, #12
 800326c:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800326e:	6803      	ldr	r3, [r0, #0]
 8003270:	f013 0f05 	tst.w	r3, #5
 8003274:	d10e      	bne.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003276:	6823      	ldr	r3, [r4, #0]
 8003278:	f013 0f02 	tst.w	r3, #2
 800327c:	d138      	bne.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800327e:	6823      	ldr	r3, [r4, #0]
 8003280:	f013 0f08 	tst.w	r3, #8
 8003284:	f000 809b 	beq.w	80033be <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003288:	7d22      	ldrb	r2, [r4, #20]
 800328a:	4b4e      	ldr	r3, [pc, #312]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800328c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800328e:	2000      	movs	r0, #0
}
 8003290:	b003      	add	sp, #12
 8003292:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8003294:	4b4c      	ldr	r3, [pc, #304]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003296:	2200      	movs	r2, #0
 8003298:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800329a:	f7fd f947 	bl	800052c <HAL_GetTick>
 800329e:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80032a0:	4b4a      	ldr	r3, [pc, #296]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80032a8:	d006      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x50>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80032aa:	f7fd f93f 	bl	800052c <HAL_GetTick>
 80032ae:	1b40      	subs	r0, r0, r5
 80032b0:	2802      	cmp	r0, #2
 80032b2:	d9f5      	bls.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x38>
        return HAL_TIMEOUT;
 80032b4:	2003      	movs	r0, #3
 80032b6:	e7eb      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80032b8:	6863      	ldr	r3, [r4, #4]
 80032ba:	68a2      	ldr	r2, [r4, #8]
 80032bc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80032c0:	68e2      	ldr	r2, [r4, #12]
 80032c2:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80032c6:	4a41      	ldr	r2, [pc, #260]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032c8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80032cc:	4b3e      	ldr	r3, [pc, #248]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ce:	2201      	movs	r2, #1
 80032d0:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80032d2:	f7fd f92b 	bl	800052c <HAL_GetTick>
 80032d6:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032d8:	4b3c      	ldr	r3, [pc, #240]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80032e0:	d1c9      	bne.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80032e2:	f7fd f923 	bl	800052c <HAL_GetTick>
 80032e6:	1b40      	subs	r0, r0, r5
 80032e8:	2802      	cmp	r0, #2
 80032ea:	d9f5      	bls.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x70>
        return HAL_TIMEOUT;
 80032ec:	2003      	movs	r0, #3
 80032ee:	e7cf      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_PWR_CLK_ENABLE();
 80032f0:	2300      	movs	r3, #0
 80032f2:	9301      	str	r3, [sp, #4]
 80032f4:	4b35      	ldr	r3, [pc, #212]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032f8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80032fc:	641a      	str	r2, [r3, #64]	; 0x40
 80032fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003304:	9301      	str	r3, [sp, #4]
 8003306:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8003308:	4a31      	ldr	r2, [pc, #196]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800330a:	6813      	ldr	r3, [r2, #0]
 800330c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003310:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003312:	f7fd f90b 	bl	800052c <HAL_GetTick>
 8003316:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003318:	4b2d      	ldr	r3, [pc, #180]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003320:	d106      	bne.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003322:	f7fd f903 	bl	800052c <HAL_GetTick>
 8003326:	1b40      	subs	r0, r0, r5
 8003328:	2802      	cmp	r0, #2
 800332a:	d9f5      	bls.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0xb0>
        return HAL_TIMEOUT;
 800332c:	2003      	movs	r0, #3
 800332e:	e7af      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x28>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003330:	4b26      	ldr	r3, [pc, #152]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003334:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003338:	d012      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 800333a:	6922      	ldr	r2, [r4, #16]
 800333c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003340:	429a      	cmp	r2, r3
 8003342:	d00d      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003344:	4b21      	ldr	r3, [pc, #132]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003346:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003348:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800334c:	4921      	ldr	r1, [pc, #132]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 800334e:	2001      	movs	r0, #1
 8003350:	6008      	str	r0, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003352:	2000      	movs	r0, #0
 8003354:	6008      	str	r0, [r1, #0]
      RCC->BDCR = tmpreg1;
 8003356:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335a:	f013 0f01 	tst.w	r3, #1
 800335e:	d112      	bne.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003360:	6923      	ldr	r3, [r4, #16]
 8003362:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003366:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800336a:	d01d      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
 800336c:	4a17      	ldr	r2, [pc, #92]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800336e:	6893      	ldr	r3, [r2, #8]
 8003370:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003374:	6093      	str	r3, [r2, #8]
 8003376:	4915      	ldr	r1, [pc, #84]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003378:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 800337a:	6922      	ldr	r2, [r4, #16]
 800337c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003380:	4313      	orrs	r3, r2
 8003382:	670b      	str	r3, [r1, #112]	; 0x70
 8003384:	e77b      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x16>
        tickstart = HAL_GetTick();
 8003386:	f7fd f8d1 	bl	800052c <HAL_GetTick>
 800338a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800338c:	4b0f      	ldr	r3, [pc, #60]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800338e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003390:	f013 0f02 	tst.w	r3, #2
 8003394:	d1e4      	bne.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xf8>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003396:	f7fd f8c9 	bl	800052c <HAL_GetTick>
 800339a:	1b40      	subs	r0, r0, r5
 800339c:	f241 3388 	movw	r3, #5000	; 0x1388
 80033a0:	4298      	cmp	r0, r3
 80033a2:	d9f3      	bls.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x124>
            return HAL_TIMEOUT;
 80033a4:	2003      	movs	r0, #3
 80033a6:	e773      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033a8:	4908      	ldr	r1, [pc, #32]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033aa:	688a      	ldr	r2, [r1, #8]
 80033ac:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80033b0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80033b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033b8:	4313      	orrs	r3, r2
 80033ba:	608b      	str	r3, [r1, #8]
 80033bc:	e7db      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  return HAL_OK;
 80033be:	2000      	movs	r0, #0
 80033c0:	e766      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80033c2:	bf00      	nop
 80033c4:	424711e0 	.word	0x424711e0
 80033c8:	42470068 	.word	0x42470068
 80033cc:	40023800 	.word	0x40023800
 80033d0:	40007000 	.word	0x40007000
 80033d4:	42470e40 	.word	0x42470e40

080033d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 80033d8:	2801      	cmp	r0, #1
 80033da:	d12c      	bne.n	8003436 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80033dc:	4b18      	ldr	r3, [pc, #96]	; (8003440 <HAL_RCCEx_GetPeriphCLKFreq+0x68>)
 80033de:	689b      	ldr	r3, [r3, #8]
      switch (srcclk)
 80033e0:	f413 0300 	ands.w	r3, r3, #8388608	; 0x800000
 80033e4:	d003      	beq.n	80033ee <HAL_RCCEx_GetPeriphCLKFreq+0x16>
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d127      	bne.n	800343a <HAL_RCCEx_GetPeriphCLKFreq+0x62>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80033ea:	4816      	ldr	r0, [pc, #88]	; (8003444 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>)
 80033ec:	4770      	bx	lr
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80033ee:	4b14      	ldr	r3, [pc, #80]	; (8003440 <HAL_RCCEx_GetPeriphCLKFreq+0x68>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80033f6:	d015      	beq.n	8003424 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80033f8:	4b11      	ldr	r3, [pc, #68]	; (8003440 <HAL_RCCEx_GetPeriphCLKFreq+0x68>)
 80033fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003402:	4811      	ldr	r0, [pc, #68]	; (8003448 <HAL_RCCEx_GetPeriphCLKFreq+0x70>)
 8003404:	fbb0 f0f3 	udiv	r0, r0, r3
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003408:	4a0d      	ldr	r2, [pc, #52]	; (8003440 <HAL_RCCEx_GetPeriphCLKFreq+0x68>)
 800340a:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 800340e:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8003412:	fb00 f003 	mul.w	r0, r0, r3
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003416:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 800341a:	f3c3 7302 	ubfx	r3, r3, #28, #3
 800341e:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 8003422:	4770      	bx	lr
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003424:	4b06      	ldr	r3, [pc, #24]	; (8003440 <HAL_RCCEx_GetPeriphCLKFreq+0x68>)
 8003426:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800342a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800342e:	4807      	ldr	r0, [pc, #28]	; (800344c <HAL_RCCEx_GetPeriphCLKFreq+0x74>)
 8003430:	fbb0 f0f3 	udiv	r0, r0, r3
 8003434:	e7e8      	b.n	8003408 <HAL_RCCEx_GetPeriphCLKFreq+0x30>
  uint32_t frequency = 0U;
 8003436:	2000      	movs	r0, #0
 8003438:	4770      	bx	lr
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800343a:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	40023800 	.word	0x40023800
 8003444:	00bb8000 	.word	0x00bb8000
 8003448:	007a1200 	.word	0x007a1200
 800344c:	00f42400 	.word	0x00f42400

08003450 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8003450:	2800      	cmp	r0, #0
 8003452:	d03b      	beq.n	80034cc <HAL_SPI_Init+0x7c>
{
 8003454:	b510      	push	{r4, lr}
 8003456:	4604      	mov	r4, r0
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003458:	2300      	movs	r3, #0
 800345a:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 800345c:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8003460:	2b00      	cmp	r3, #0
 8003462:	d02e      	beq.n	80034c2 <HAL_SPI_Init+0x72>

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003464:	2302      	movs	r3, #2
 8003466:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800346a:	6822      	ldr	r2, [r4, #0]
 800346c:	6813      	ldr	r3, [r2, #0]
 800346e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003472:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003474:	6863      	ldr	r3, [r4, #4]
 8003476:	68a2      	ldr	r2, [r4, #8]
 8003478:	4313      	orrs	r3, r2
 800347a:	68e2      	ldr	r2, [r4, #12]
 800347c:	4313      	orrs	r3, r2
 800347e:	6922      	ldr	r2, [r4, #16]
 8003480:	4313      	orrs	r3, r2
 8003482:	6962      	ldr	r2, [r4, #20]
 8003484:	4313      	orrs	r3, r2
 8003486:	69a2      	ldr	r2, [r4, #24]
 8003488:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800348c:	4313      	orrs	r3, r2
 800348e:	69e2      	ldr	r2, [r4, #28]
 8003490:	4313      	orrs	r3, r2
 8003492:	6a22      	ldr	r2, [r4, #32]
 8003494:	4313      	orrs	r3, r2
 8003496:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003498:	6822      	ldr	r2, [r4, #0]
 800349a:	430b      	orrs	r3, r1
 800349c:	6013      	str	r3, [r2, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800349e:	8b63      	ldrh	r3, [r4, #26]
 80034a0:	f003 0304 	and.w	r3, r3, #4
 80034a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80034a6:	6822      	ldr	r2, [r4, #0]
 80034a8:	430b      	orrs	r3, r1
 80034aa:	6053      	str	r3, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034ac:	6822      	ldr	r2, [r4, #0]
 80034ae:	69d3      	ldr	r3, [r2, #28]
 80034b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034b4:	61d3      	str	r3, [r2, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034b6:	2000      	movs	r0, #0
 80034b8:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80034ba:	2301      	movs	r3, #1
 80034bc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
}
 80034c0:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80034c2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80034c6:	f001 fe3b 	bl	8005140 <HAL_SPI_MspInit>
 80034ca:	e7cb      	b.n	8003464 <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 80034cc:	2001      	movs	r0, #1
}
 80034ce:	4770      	bx	lr

080034d0 <HAL_SPI_ErrorCallback>:
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
  */
}
 80034d0:	4770      	bx	lr
	...

080034d4 <HAL_SPI_IRQHandler>:
{
 80034d4:	b510      	push	{r4, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 80034da:	6802      	ldr	r2, [r0, #0]
 80034dc:	6850      	ldr	r0, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 80034de:	6893      	ldr	r3, [r2, #8]
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 80034e0:	f003 0141 	and.w	r1, r3, #65	; 0x41
 80034e4:	2901      	cmp	r1, #1
 80034e6:	d00a      	beq.n	80034fe <HAL_SPI_IRQHandler+0x2a>
  if(((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 80034e8:	f013 0f02 	tst.w	r3, #2
 80034ec:	d00e      	beq.n	800350c <HAL_SPI_IRQHandler+0x38>
 80034ee:	f010 0f80 	tst.w	r0, #128	; 0x80
 80034f2:	d00b      	beq.n	800350c <HAL_SPI_IRQHandler+0x38>
    hspi->TxISR(hspi);
 80034f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80034f6:	4620      	mov	r0, r4
 80034f8:	4798      	blx	r3
}
 80034fa:	b004      	add	sp, #16
 80034fc:	bd10      	pop	{r4, pc}
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 80034fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003502:	d0f1      	beq.n	80034e8 <HAL_SPI_IRQHandler+0x14>
    hspi->RxISR(hspi);
 8003504:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003506:	4620      	mov	r0, r4
 8003508:	4798      	blx	r3
    return;
 800350a:	e7f6      	b.n	80034fa <HAL_SPI_IRQHandler+0x26>
  if(((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 800350c:	f413 7fb0 	tst.w	r3, #352	; 0x160
 8003510:	d0f3      	beq.n	80034fa <HAL_SPI_IRQHandler+0x26>
 8003512:	f010 0f20 	tst.w	r0, #32
 8003516:	d0f0      	beq.n	80034fa <HAL_SPI_IRQHandler+0x26>
    if((itflag & SPI_FLAG_OVR) != RESET)
 8003518:	f013 0f40 	tst.w	r3, #64	; 0x40
 800351c:	d00f      	beq.n	800353e <HAL_SPI_IRQHandler+0x6a>
      if(hspi->State != HAL_SPI_STATE_BUSY_TX)
 800351e:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
 8003522:	b2c9      	uxtb	r1, r1
 8003524:	2903      	cmp	r1, #3
 8003526:	d04a      	beq.n	80035be <HAL_SPI_IRQHandler+0xea>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003528:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800352a:	f041 0104 	orr.w	r1, r1, #4
 800352e:	6561      	str	r1, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003530:	2100      	movs	r1, #0
 8003532:	9100      	str	r1, [sp, #0]
 8003534:	68d1      	ldr	r1, [r2, #12]
 8003536:	9100      	str	r1, [sp, #0]
 8003538:	6891      	ldr	r1, [r2, #8]
 800353a:	9100      	str	r1, [sp, #0]
 800353c:	9900      	ldr	r1, [sp, #0]
    if((itflag & SPI_FLAG_MODF) != RESET)
 800353e:	f013 0f20 	tst.w	r3, #32
 8003542:	d00c      	beq.n	800355e <HAL_SPI_IRQHandler+0x8a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003544:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003546:	f041 0101 	orr.w	r1, r1, #1
 800354a:	6561      	str	r1, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800354c:	2100      	movs	r1, #0
 800354e:	9102      	str	r1, [sp, #8]
 8003550:	6891      	ldr	r1, [r2, #8]
 8003552:	9102      	str	r1, [sp, #8]
 8003554:	6811      	ldr	r1, [r2, #0]
 8003556:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800355a:	6011      	str	r1, [r2, #0]
 800355c:	9a02      	ldr	r2, [sp, #8]
    if((itflag & SPI_FLAG_FRE) != RESET)
 800355e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003562:	d009      	beq.n	8003578 <HAL_SPI_IRQHandler+0xa4>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003564:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003566:	f043 0308 	orr.w	r3, r3, #8
 800356a:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800356c:	2300      	movs	r3, #0
 800356e:	9303      	str	r3, [sp, #12]
 8003570:	6823      	ldr	r3, [r4, #0]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	9303      	str	r3, [sp, #12]
 8003576:	9b03      	ldr	r3, [sp, #12]
    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003578:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800357a:	2b00      	cmp	r3, #0
 800357c:	d0bd      	beq.n	80034fa <HAL_SPI_IRQHandler+0x26>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800357e:	6822      	ldr	r2, [r4, #0]
 8003580:	6853      	ldr	r3, [r2, #4]
 8003582:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8003586:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8003588:	2301      	movs	r3, #1
 800358a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN))||(HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800358e:	f010 0f03 	tst.w	r0, #3
 8003592:	d01c      	beq.n	80035ce <HAL_SPI_IRQHandler+0xfa>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003594:	6822      	ldr	r2, [r4, #0]
 8003596:	6853      	ldr	r3, [r2, #4]
 8003598:	f023 0303 	bic.w	r3, r3, #3
 800359c:	6053      	str	r3, [r2, #4]
        if(hspi->hdmarx != NULL)
 800359e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80035a0:	b123      	cbz	r3, 80035ac <HAL_SPI_IRQHandler+0xd8>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80035a2:	4a0d      	ldr	r2, [pc, #52]	; (80035d8 <HAL_SPI_IRQHandler+0x104>)
 80035a4:	651a      	str	r2, [r3, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmarx);
 80035a6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80035a8:	f7fd f8f8 	bl	800079c <HAL_DMA_Abort_IT>
        if(hspi->hdmatx != NULL)
 80035ac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0a3      	beq.n	80034fa <HAL_SPI_IRQHandler+0x26>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80035b2:	4a09      	ldr	r2, [pc, #36]	; (80035d8 <HAL_SPI_IRQHandler+0x104>)
 80035b4:	651a      	str	r2, [r3, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmatx);
 80035b6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80035b8:	f7fd f8f0 	bl	800079c <HAL_DMA_Abort_IT>
 80035bc:	e79d      	b.n	80034fa <HAL_SPI_IRQHandler+0x26>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035be:	2300      	movs	r3, #0
 80035c0:	9301      	str	r3, [sp, #4]
 80035c2:	68d3      	ldr	r3, [r2, #12]
 80035c4:	9301      	str	r3, [sp, #4]
 80035c6:	6893      	ldr	r3, [r2, #8]
 80035c8:	9301      	str	r3, [sp, #4]
 80035ca:	9b01      	ldr	r3, [sp, #4]
        return;
 80035cc:	e795      	b.n	80034fa <HAL_SPI_IRQHandler+0x26>
        HAL_SPI_ErrorCallback(hspi);
 80035ce:	4620      	mov	r0, r4
 80035d0:	f7ff ff7e 	bl	80034d0 <HAL_SPI_ErrorCallback>
 80035d4:	e791      	b.n	80034fa <HAL_SPI_IRQHandler+0x26>
 80035d6:	bf00      	nop
 80035d8:	080035dd 	.word	0x080035dd

080035dc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035dc:	b508      	push	{r3, lr}
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80035de:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 80035e0:	2300      	movs	r3, #0
 80035e2:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80035e4:	86c3      	strh	r3, [r0, #54]	; 0x36

  HAL_SPI_ErrorCallback(hspi);
 80035e6:	f7ff ff73 	bl	80034d0 <HAL_SPI_ErrorCallback>
}
 80035ea:	bd08      	pop	{r3, pc}

080035ec <HAL_TIM_Base_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80035ec:	4770      	bx	lr

080035ee <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035ee:	6802      	ldr	r2, [r0, #0]
 80035f0:	68d3      	ldr	r3, [r2, #12]
 80035f2:	f043 0301 	orr.w	r3, r3, #1
 80035f6:	60d3      	str	r3, [r2, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80035f8:	6802      	ldr	r2, [r0, #0]
 80035fa:	6813      	ldr	r3, [r2, #0]
 80035fc:	f043 0301 	orr.w	r3, r3, #1
 8003600:	6013      	str	r3, [r2, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8003602:	2000      	movs	r0, #0
 8003604:	4770      	bx	lr

08003606 <HAL_TIM_OC_DelayElapsedCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003606:	4770      	bx	lr

08003608 <HAL_TIM_IC_CaptureCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003608:	4770      	bx	lr

0800360a <HAL_TIM_PWM_PulseFinishedCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800360a:	4770      	bx	lr

0800360c <HAL_TIM_TriggerCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800360c:	4770      	bx	lr

0800360e <HAL_TIM_IRQHandler>:
{
 800360e:	b510      	push	{r4, lr}
 8003610:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003612:	6803      	ldr	r3, [r0, #0]
 8003614:	691a      	ldr	r2, [r3, #16]
 8003616:	f012 0f02 	tst.w	r2, #2
 800361a:	d011      	beq.n	8003640 <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	f012 0f02 	tst.w	r2, #2
 8003622:	d00d      	beq.n	8003640 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003624:	f06f 0202 	mvn.w	r2, #2
 8003628:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800362a:	2301      	movs	r3, #1
 800362c:	7603      	strb	r3, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800362e:	6803      	ldr	r3, [r0, #0]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	f013 0f03 	tst.w	r3, #3
 8003636:	d070      	beq.n	800371a <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8003638:	f7ff ffe6 	bl	8003608 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800363c:	2300      	movs	r3, #0
 800363e:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003640:	6823      	ldr	r3, [r4, #0]
 8003642:	691a      	ldr	r2, [r3, #16]
 8003644:	f012 0f04 	tst.w	r2, #4
 8003648:	d012      	beq.n	8003670 <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800364a:	68da      	ldr	r2, [r3, #12]
 800364c:	f012 0f04 	tst.w	r2, #4
 8003650:	d00e      	beq.n	8003670 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003652:	f06f 0204 	mvn.w	r2, #4
 8003656:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003658:	2302      	movs	r3, #2
 800365a:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800365c:	6823      	ldr	r3, [r4, #0]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003664:	d05f      	beq.n	8003726 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8003666:	4620      	mov	r0, r4
 8003668:	f7ff ffce 	bl	8003608 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800366c:	2300      	movs	r3, #0
 800366e:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003670:	6823      	ldr	r3, [r4, #0]
 8003672:	691a      	ldr	r2, [r3, #16]
 8003674:	f012 0f08 	tst.w	r2, #8
 8003678:	d012      	beq.n	80036a0 <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800367a:	68da      	ldr	r2, [r3, #12]
 800367c:	f012 0f08 	tst.w	r2, #8
 8003680:	d00e      	beq.n	80036a0 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003682:	f06f 0208 	mvn.w	r2, #8
 8003686:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003688:	2304      	movs	r3, #4
 800368a:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800368c:	6823      	ldr	r3, [r4, #0]
 800368e:	69db      	ldr	r3, [r3, #28]
 8003690:	f013 0f03 	tst.w	r3, #3
 8003694:	d04e      	beq.n	8003734 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8003696:	4620      	mov	r0, r4
 8003698:	f7ff ffb6 	bl	8003608 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800369c:	2300      	movs	r3, #0
 800369e:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036a0:	6823      	ldr	r3, [r4, #0]
 80036a2:	691a      	ldr	r2, [r3, #16]
 80036a4:	f012 0f10 	tst.w	r2, #16
 80036a8:	d012      	beq.n	80036d0 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80036aa:	68da      	ldr	r2, [r3, #12]
 80036ac:	f012 0f10 	tst.w	r2, #16
 80036b0:	d00e      	beq.n	80036d0 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036b2:	f06f 0210 	mvn.w	r2, #16
 80036b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036b8:	2308      	movs	r3, #8
 80036ba:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036bc:	6823      	ldr	r3, [r4, #0]
 80036be:	69db      	ldr	r3, [r3, #28]
 80036c0:	f413 7f40 	tst.w	r3, #768	; 0x300
 80036c4:	d03d      	beq.n	8003742 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 80036c6:	4620      	mov	r0, r4
 80036c8:	f7ff ff9e 	bl	8003608 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036cc:	2300      	movs	r3, #0
 80036ce:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036d0:	6823      	ldr	r3, [r4, #0]
 80036d2:	691a      	ldr	r2, [r3, #16]
 80036d4:	f012 0f01 	tst.w	r2, #1
 80036d8:	d003      	beq.n	80036e2 <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80036da:	68da      	ldr	r2, [r3, #12]
 80036dc:	f012 0f01 	tst.w	r2, #1
 80036e0:	d136      	bne.n	8003750 <HAL_TIM_IRQHandler+0x142>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036e2:	6823      	ldr	r3, [r4, #0]
 80036e4:	691a      	ldr	r2, [r3, #16]
 80036e6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80036ea:	d003      	beq.n	80036f4 <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80036ec:	68da      	ldr	r2, [r3, #12]
 80036ee:	f012 0f80 	tst.w	r2, #128	; 0x80
 80036f2:	d134      	bne.n	800375e <HAL_TIM_IRQHandler+0x150>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036f4:	6823      	ldr	r3, [r4, #0]
 80036f6:	691a      	ldr	r2, [r3, #16]
 80036f8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80036fc:	d003      	beq.n	8003706 <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80036fe:	68da      	ldr	r2, [r3, #12]
 8003700:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003704:	d132      	bne.n	800376c <HAL_TIM_IRQHandler+0x15e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003706:	6823      	ldr	r3, [r4, #0]
 8003708:	691a      	ldr	r2, [r3, #16]
 800370a:	f012 0f20 	tst.w	r2, #32
 800370e:	d003      	beq.n	8003718 <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8003710:	68da      	ldr	r2, [r3, #12]
 8003712:	f012 0f20 	tst.w	r2, #32
 8003716:	d130      	bne.n	800377a <HAL_TIM_IRQHandler+0x16c>
}
 8003718:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800371a:	f7ff ff74 	bl	8003606 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800371e:	4620      	mov	r0, r4
 8003720:	f7ff ff73 	bl	800360a <HAL_TIM_PWM_PulseFinishedCallback>
 8003724:	e78a      	b.n	800363c <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003726:	4620      	mov	r0, r4
 8003728:	f7ff ff6d 	bl	8003606 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800372c:	4620      	mov	r0, r4
 800372e:	f7ff ff6c 	bl	800360a <HAL_TIM_PWM_PulseFinishedCallback>
 8003732:	e79b      	b.n	800366c <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003734:	4620      	mov	r0, r4
 8003736:	f7ff ff66 	bl	8003606 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 800373a:	4620      	mov	r0, r4
 800373c:	f7ff ff65 	bl	800360a <HAL_TIM_PWM_PulseFinishedCallback>
 8003740:	e7ac      	b.n	800369c <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003742:	4620      	mov	r0, r4
 8003744:	f7ff ff5f 	bl	8003606 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003748:	4620      	mov	r0, r4
 800374a:	f7ff ff5e 	bl	800360a <HAL_TIM_PWM_PulseFinishedCallback>
 800374e:	e7bd      	b.n	80036cc <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003750:	f06f 0201 	mvn.w	r2, #1
 8003754:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003756:	4620      	mov	r0, r4
 8003758:	f001 fa96 	bl	8004c88 <HAL_TIM_PeriodElapsedCallback>
 800375c:	e7c1      	b.n	80036e2 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800375e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003762:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003764:	4620      	mov	r0, r4
 8003766:	f000 f873 	bl	8003850 <HAL_TIMEx_BreakCallback>
 800376a:	e7c3      	b.n	80036f4 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800376c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003770:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003772:	4620      	mov	r0, r4
 8003774:	f7ff ff4a 	bl	800360c <HAL_TIM_TriggerCallback>
 8003778:	e7c5      	b.n	8003706 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800377a:	f06f 0220 	mvn.w	r2, #32
 800377e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8003780:	4620      	mov	r0, r4
 8003782:	f000 f864 	bl	800384e <HAL_TIMEx_CommutationCallback>
}
 8003786:	e7c7      	b.n	8003718 <HAL_TIM_IRQHandler+0x10a>

08003788 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
 8003788:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800378a:	4a23      	ldr	r2, [pc, #140]	; (8003818 <TIM_Base_SetConfig+0x90>)
 800378c:	4290      	cmp	r0, r2
 800378e:	d00e      	beq.n	80037ae <TIM_Base_SetConfig+0x26>
 8003790:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003794:	d00b      	beq.n	80037ae <TIM_Base_SetConfig+0x26>
 8003796:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800379a:	4290      	cmp	r0, r2
 800379c:	d007      	beq.n	80037ae <TIM_Base_SetConfig+0x26>
 800379e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80037a2:	4290      	cmp	r0, r2
 80037a4:	d003      	beq.n	80037ae <TIM_Base_SetConfig+0x26>
 80037a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80037aa:	4290      	cmp	r0, r2
 80037ac:	d103      	bne.n	80037b6 <TIM_Base_SetConfig+0x2e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80037b2:	684a      	ldr	r2, [r1, #4]
 80037b4:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80037b6:	4a18      	ldr	r2, [pc, #96]	; (8003818 <TIM_Base_SetConfig+0x90>)
 80037b8:	4290      	cmp	r0, r2
 80037ba:	d01a      	beq.n	80037f2 <TIM_Base_SetConfig+0x6a>
 80037bc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80037c0:	d017      	beq.n	80037f2 <TIM_Base_SetConfig+0x6a>
 80037c2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80037c6:	4290      	cmp	r0, r2
 80037c8:	d013      	beq.n	80037f2 <TIM_Base_SetConfig+0x6a>
 80037ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80037ce:	4290      	cmp	r0, r2
 80037d0:	d00f      	beq.n	80037f2 <TIM_Base_SetConfig+0x6a>
 80037d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80037d6:	4290      	cmp	r0, r2
 80037d8:	d00b      	beq.n	80037f2 <TIM_Base_SetConfig+0x6a>
 80037da:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80037de:	4290      	cmp	r0, r2
 80037e0:	d007      	beq.n	80037f2 <TIM_Base_SetConfig+0x6a>
 80037e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80037e6:	4290      	cmp	r0, r2
 80037e8:	d003      	beq.n	80037f2 <TIM_Base_SetConfig+0x6a>
 80037ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80037ee:	4290      	cmp	r0, r2
 80037f0:	d103      	bne.n	80037fa <TIM_Base_SetConfig+0x72>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037f6:	68ca      	ldr	r2, [r1, #12]
 80037f8:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 80037fa:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037fc:	688b      	ldr	r3, [r1, #8]
 80037fe:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003800:	680b      	ldr	r3, [r1, #0]
 8003802:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8003804:	4b04      	ldr	r3, [pc, #16]	; (8003818 <TIM_Base_SetConfig+0x90>)
 8003806:	4298      	cmp	r0, r3
 8003808:	d002      	beq.n	8003810 <TIM_Base_SetConfig+0x88>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800380a:	2301      	movs	r3, #1
 800380c:	6143      	str	r3, [r0, #20]
}
 800380e:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8003810:	690b      	ldr	r3, [r1, #16]
 8003812:	6303      	str	r3, [r0, #48]	; 0x30
 8003814:	e7f9      	b.n	800380a <TIM_Base_SetConfig+0x82>
 8003816:	bf00      	nop
 8003818:	40010000 	.word	0x40010000

0800381c <HAL_TIM_Base_Init>:
  if(htim == NULL)
 800381c:	b1a8      	cbz	r0, 800384a <HAL_TIM_Base_Init+0x2e>
{ 
 800381e:	b510      	push	{r4, lr}
 8003820:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 8003822:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003826:	b15b      	cbz	r3, 8003840 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8003828:	2302      	movs	r3, #2
 800382a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800382e:	1d21      	adds	r1, r4, #4
 8003830:	6820      	ldr	r0, [r4, #0]
 8003832:	f7ff ffa9 	bl	8003788 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8003836:	2301      	movs	r3, #1
 8003838:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 800383c:	2000      	movs	r0, #0
}
 800383e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003840:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8003844:	f7ff fed2 	bl	80035ec <HAL_TIM_Base_MspInit>
 8003848:	e7ee      	b.n	8003828 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800384a:	2001      	movs	r0, #1
}
 800384c:	4770      	bx	lr

0800384e <HAL_TIMEx_CommutationCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 800384e:	4770      	bx	lr

08003850 <HAL_TIMEx_BreakCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003850:	4770      	bx	lr

08003852 <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003852:	b084      	sub	sp, #16
 8003854:	b510      	push	{r4, lr}
 8003856:	4604      	mov	r4, r0
 8003858:	a803      	add	r0, sp, #12
 800385a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800385e:	9b08      	ldr	r3, [sp, #32]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d120      	bne.n	80038a6 <USB_CoreInit+0x54>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003864:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800386a:	63a3      	str	r3, [r4, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800386c:	68e3      	ldr	r3, [r4, #12]
 800386e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003872:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003876:	60e3      	str	r3, [r4, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003878:	68e3      	ldr	r3, [r4, #12]
 800387a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800387e:	60e3      	str	r3, [r4, #12]
    if(cfg.use_external_vbus == 1U)
 8003880:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003882:	2b01      	cmp	r3, #1
 8003884:	d00a      	beq.n	800389c <USB_CoreInit+0x4a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 8003886:	4620      	mov	r0, r4
 8003888:	f000 f880 	bl	800398c <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
  }
 
  if(cfg.dma_enable == ENABLE)
 800388c:	9b06      	ldr	r3, [sp, #24]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d014      	beq.n	80038bc <USB_CoreInit+0x6a>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
  }  

  return HAL_OK;
}
 8003892:	2000      	movs	r0, #0
 8003894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003898:	b004      	add	sp, #16
 800389a:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800389c:	68e3      	ldr	r3, [r4, #12]
 800389e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038a2:	60e3      	str	r3, [r4, #12]
 80038a4:	e7ef      	b.n	8003886 <USB_CoreInit+0x34>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80038a6:	68e3      	ldr	r3, [r4, #12]
 80038a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038ac:	60e3      	str	r3, [r4, #12]
    USB_CoreReset(USBx);
 80038ae:	4620      	mov	r0, r4
 80038b0:	f000 f86c 	bl	800398c <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 80038b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038b8:	63a3      	str	r3, [r4, #56]	; 0x38
 80038ba:	e7e7      	b.n	800388c <USB_CoreInit+0x3a>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80038bc:	68a3      	ldr	r3, [r4, #8]
 80038be:	f043 0306 	orr.w	r3, r3, #6
 80038c2:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80038c4:	68a3      	ldr	r3, [r4, #8]
 80038c6:	f043 0320 	orr.w	r3, r3, #32
 80038ca:	60a3      	str	r3, [r4, #8]
 80038cc:	e7e1      	b.n	8003892 <USB_CoreInit+0x40>

080038ce <USB_DisableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80038ce:	6883      	ldr	r3, [r0, #8]
 80038d0:	f023 0301 	bic.w	r3, r3, #1
 80038d4:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 80038d6:	2000      	movs	r0, #0
 80038d8:	4770      	bx	lr

080038da <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 80038da:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 80038dc:	68c3      	ldr	r3, [r0, #12]
 80038de:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80038e2:	60c3      	str	r3, [r0, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 80038e4:	2901      	cmp	r1, #1
 80038e6:	d009      	beq.n	80038fc <USB_SetCurrentMode+0x22>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
 80038e8:	b919      	cbnz	r1, 80038f2 <USB_SetCurrentMode+0x18>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 80038ea:	68c3      	ldr	r3, [r0, #12]
 80038ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80038f0:	60c3      	str	r3, [r0, #12]
  }
  HAL_Delay(50U);
 80038f2:	2032      	movs	r0, #50	; 0x32
 80038f4:	f7fc fe20 	bl	8000538 <HAL_Delay>
  
  return HAL_OK;
}
 80038f8:	2000      	movs	r0, #0
 80038fa:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 80038fc:	68c3      	ldr	r3, [r0, #12]
 80038fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003902:	60c3      	str	r3, [r0, #12]
 8003904:	e7f5      	b.n	80038f2 <USB_SetCurrentMode+0x18>
	...

08003908 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8003908:	0189      	lsls	r1, r1, #6
 800390a:	f041 0120 	orr.w	r1, r1, #32
 800390e:	6101      	str	r1, [r0, #16]
  uint32_t count = 0;
 8003910:	2300      	movs	r3, #0
  
  do
  {
    if (++count > 200000)
 8003912:	3301      	adds	r3, #1
 8003914:	4a05      	ldr	r2, [pc, #20]	; (800392c <USB_FlushTxFifo+0x24>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d805      	bhi.n	8003926 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800391a:	6902      	ldr	r2, [r0, #16]
 800391c:	f012 0f20 	tst.w	r2, #32
 8003920:	d1f7      	bne.n	8003912 <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 8003922:	2000      	movs	r0, #0
 8003924:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003926:	2003      	movs	r0, #3
}
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	00030d40 	.word	0x00030d40

08003930 <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003930:	2310      	movs	r3, #16
 8003932:	6103      	str	r3, [r0, #16]
  uint32_t count = 0;
 8003934:	2300      	movs	r3, #0
  
  do
  {
    if (++count > 200000)
 8003936:	3301      	adds	r3, #1
 8003938:	4a05      	ldr	r2, [pc, #20]	; (8003950 <USB_FlushRxFifo+0x20>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d805      	bhi.n	800394a <USB_FlushRxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800393e:	6902      	ldr	r2, [r0, #16]
 8003940:	f012 0f10 	tst.w	r2, #16
 8003944:	d1f7      	bne.n	8003936 <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 8003946:	2000      	movs	r0, #0
 8003948:	4770      	bx	lr
      return HAL_TIMEOUT;
 800394a:	2003      	movs	r0, #3
}
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	00030d40 	.word	0x00030d40

08003954 <USB_ReadPacket>:
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t i=0U;
  uint32_t count32b = (len + 3U) / 4U;
 8003954:	3203      	adds	r2, #3
 8003956:	0892      	lsrs	r2, r2, #2
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8003958:	2300      	movs	r3, #0
 800395a:	4293      	cmp	r3, r2
 800395c:	d20c      	bcs.n	8003978 <USB_ReadPacket+0x24>
{
 800395e:	b410      	push	{r4}
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8003960:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
 8003964:	6824      	ldr	r4, [r4, #0]
 8003966:	f841 4b04 	str.w	r4, [r1], #4
  for ( i = 0U; i < count32b; i++, dest += 4U )
 800396a:	3301      	adds	r3, #1
 800396c:	4293      	cmp	r3, r2
 800396e:	d3f7      	bcc.n	8003960 <USB_ReadPacket+0xc>
    
  }
  return ((void *)dest);
}
 8003970:	4608      	mov	r0, r1
 8003972:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003976:	4770      	bx	lr
 8003978:	4608      	mov	r0, r1
 800397a:	4770      	bx	lr

0800397c <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v = 0U;
  
  v = USBx->GINTSTS;
 800397c:	6942      	ldr	r2, [r0, #20]
  v &= USBx->GINTMSK;
 800397e:	6980      	ldr	r0, [r0, #24]
  return v;  
}
 8003980:	4010      	ands	r0, r2
 8003982:	4770      	bx	lr

08003984 <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1U);
 8003984:	6940      	ldr	r0, [r0, #20]
}
 8003986:	f000 0001 	and.w	r0, r0, #1
 800398a:	4770      	bx	lr

0800398c <USB_CoreReset>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0U;
 800398c:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800398e:	3301      	adds	r3, #1
 8003990:	4a0c      	ldr	r2, [pc, #48]	; (80039c4 <USB_CoreReset+0x38>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d811      	bhi.n	80039ba <USB_CoreReset+0x2e>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003996:	6902      	ldr	r2, [r0, #16]
 8003998:	2a00      	cmp	r2, #0
 800399a:	daf8      	bge.n	800398e <USB_CoreReset+0x2>
  
  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800399c:	6903      	ldr	r3, [r0, #16]
 800399e:	f043 0301 	orr.w	r3, r3, #1
 80039a2:	6103      	str	r3, [r0, #16]
  count = 0U;
 80039a4:	2300      	movs	r3, #0

  do
  {
    if (++count > 200000U)
 80039a6:	3301      	adds	r3, #1
 80039a8:	4a06      	ldr	r2, [pc, #24]	; (80039c4 <USB_CoreReset+0x38>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d807      	bhi.n	80039be <USB_CoreReset+0x32>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80039ae:	6902      	ldr	r2, [r0, #16]
 80039b0:	f012 0f01 	tst.w	r2, #1
 80039b4:	d1f7      	bne.n	80039a6 <USB_CoreReset+0x1a>
  
  return HAL_OK;
 80039b6:	2000      	movs	r0, #0
 80039b8:	4770      	bx	lr
      return HAL_TIMEOUT;
 80039ba:	2003      	movs	r0, #3
 80039bc:	4770      	bx	lr
      return HAL_TIMEOUT;
 80039be:	2003      	movs	r0, #3
}
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	00030d40 	.word	0x00030d40

080039c8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80039c8:	b084      	sub	sp, #16
 80039ca:	b538      	push	{r3, r4, r5, lr}
 80039cc:	4604      	mov	r4, r0
 80039ce:	a805      	add	r0, sp, #20
 80039d0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i;
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80039d4:	4625      	mov	r5, r4
 80039d6:	2300      	movs	r3, #0
 80039d8:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  /* Activate VBUS Sensing B */
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || \
    defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
#else
  USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSASEN);
 80039dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80039de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039e2:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSBSEN);
 80039e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80039e6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80039ea:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80039ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80039ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80039f2:	63a3      	str	r3, [r4, #56]	; 0x38
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx || STM32F413xx || STM32F423xx  */

  /* Disable the FS/LS support mode only */
  if((cfg.speed == USB_OTG_SPEED_FULL)&&
 80039f4:	9b07      	ldr	r3, [sp, #28]
 80039f6:	2b03      	cmp	r3, #3
 80039f8:	d00e      	beq.n	8003a18 <USB_HostInit+0x50>
  {
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS; 
  }
  else
  {
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);  
 80039fa:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 80039fe:	f023 0304 	bic.w	r3, r3, #4
 8003a02:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  }

  /* Make sure the FIFOs are flushed. */
  USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8003a06:	2110      	movs	r1, #16
 8003a08:	4620      	mov	r0, r4
 8003a0a:	f7ff ff7d 	bl	8003908 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8003a0e:	4620      	mov	r0, r4
 8003a10:	f7ff ff8e 	bl	8003930 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8003a14:	2200      	movs	r2, #0
 8003a16:	e013      	b.n	8003a40 <USB_HostInit+0x78>
  if((cfg.speed == USB_OTG_SPEED_FULL)&&
 8003a18:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8003a1c:	d0ed      	beq.n	80039fa <USB_HostInit+0x32>
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS; 
 8003a1e:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8003a22:	f043 0304 	orr.w	r3, r3, #4
 8003a26:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 8003a2a:	e7ec      	b.n	8003a06 <USB_HostInit+0x3e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8003a2c:	eb05 1342 	add.w	r3, r5, r2, lsl #5
 8003a30:	f04f 31ff 	mov.w	r1, #4294967295
 8003a34:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    USBx_HC(i)->HCINTMSK = 0U;
 8003a38:	2100      	movs	r1, #0
 8003a3a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
  for (i = 0U; i < cfg.Host_channels; i++)
 8003a3e:	3201      	adds	r2, #1
 8003a40:	9b06      	ldr	r3, [sp, #24]
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d8f2      	bhi.n	8003a2c <USB_HostInit+0x64>
  }
  
  /* Enable VBUS driving */
  USB_DriveVbus(USBx, 1U);
 8003a46:	2101      	movs	r1, #1
 8003a48:	4620      	mov	r0, r4
 8003a4a:	f000 f853 	bl	8003af4 <USB_DriveVbus>
  
  HAL_Delay(200U);
 8003a4e:	20c8      	movs	r0, #200	; 0xc8
 8003a50:	f7fc fd72 	bl	8000538 <HAL_Delay>
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003a54:	2300      	movs	r3, #0
 8003a56:	61a3      	str	r3, [r4, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8003a58:	f04f 33ff 	mov.w	r3, #4294967295
 8003a5c:	6163      	str	r3, [r4, #20]
  
  if(USBx == USB_OTG_FS)
 8003a5e:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8003a62:	d017      	beq.n	8003a94 <USB_HostInit+0xcc>
    USBx->HPTXFSIZ = (uint32_t )(((0x40U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U; 
 8003a64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a68:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x100U << 16U)& USB_OTG_NPTXFD) | 0x200U);
 8003a6a:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8003a6e:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0xE0U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8003a70:	4b0d      	ldr	r3, [pc, #52]	; (8003aa8 <USB_HostInit+0xe0>)
 8003a72:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  }
  
  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 8003a76:	9b08      	ldr	r3, [sp, #32]
 8003a78:	b91b      	cbnz	r3, 8003a82 <USB_HostInit+0xba>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8003a7a:	69a3      	ldr	r3, [r4, #24]
 8003a7c:	f043 0310 	orr.w	r3, r3, #16
 8003a80:	61a3      	str	r3, [r4, #24]
  }
  
  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM |\
 8003a82:	69a2      	ldr	r2, [r4, #24]
 8003a84:	4b09      	ldr	r3, [pc, #36]	; (8003aac <USB_HostInit+0xe4>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_SOFM             |USB_OTG_GINTSTS_DISCINT|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
}
 8003a8a:	2000      	movs	r0, #0
 8003a8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a90:	b004      	add	sp, #16
 8003a92:	4770      	bx	lr
    USBx->GRXFSIZ  = 0x80U; 
 8003a94:	2380      	movs	r3, #128	; 0x80
 8003a96:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x60U << 16U)& USB_OTG_NPTXFD) | 0x80U);
 8003a98:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8003a9c:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0x40U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8003a9e:	4b04      	ldr	r3, [pc, #16]	; (8003ab0 <USB_HostInit+0xe8>)
 8003aa0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003aa4:	e7e7      	b.n	8003a76 <USB_HostInit+0xae>
 8003aa6:	bf00      	nop
 8003aa8:	00e00300 	.word	0x00e00300
 8003aac:	a3200008 	.word	0xa3200008
 8003ab0:	004000e0 	.word	0x004000e0

08003ab4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock 
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock 
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx , uint8_t freq)
{
 8003ab4:	b410      	push	{r4}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003ab6:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 8003aba:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8003abe:	f023 0303 	bic.w	r3, r3, #3
 8003ac2:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
 8003ac6:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8003aca:	f001 0203 	and.w	r2, r1, #3
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  
  if (freq ==  HCFG_48_MHZ)
 8003ad4:	2901      	cmp	r1, #1
 8003ad6:	d005      	beq.n	8003ae4 <USB_InitFSLSPClkSel+0x30>
  {
    USBx_HOST->HFIR = 48000U;
  }
  else if (freq ==  HCFG_6_MHZ)
 8003ad8:	2902      	cmp	r1, #2
 8003ada:	d007      	beq.n	8003aec <USB_InitFSLSPClkSel+0x38>
  {
    USBx_HOST->HFIR = 6000U;
  } 
  return HAL_OK;  
}
 8003adc:	2000      	movs	r0, #0
 8003ade:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ae2:	4770      	bx	lr
    USBx_HOST->HFIR = 48000U;
 8003ae4:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8003ae8:	6063      	str	r3, [r4, #4]
 8003aea:	e7f7      	b.n	8003adc <USB_InitFSLSPClkSel+0x28>
    USBx_HOST->HFIR = 6000U;
 8003aec:	f241 7370 	movw	r3, #6000	; 0x1770
 8003af0:	6063      	str	r3, [r4, #4]
 8003af2:	e7f3      	b.n	8003adc <USB_InitFSLSPClkSel+0x28>

08003af4 <USB_DriveVbus>:
  *           0 : VBUS Active 
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus (USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8003af4:	b082      	sub	sp, #8
  __IO uint32_t hprt0;

  hprt0 = USBx_HPRT0;
 8003af6:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8003afa:	9301      	str	r3, [sp, #4]
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
 8003afc:	9b01      	ldr	r3, [sp, #4]
 8003afe:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003b02:	9301      	str	r3, [sp, #4]
                         USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8003b04:	9b01      	ldr	r3, [sp, #4]
 8003b06:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003b0a:	d101      	bne.n	8003b10 <USB_DriveVbus+0x1c>
 8003b0c:	2901      	cmp	r1, #1
 8003b0e:	d00c      	beq.n	8003b2a <USB_DriveVbus+0x36>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0); 
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8003b10:	9b01      	ldr	r3, [sp, #4]
 8003b12:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003b16:	d005      	beq.n	8003b24 <USB_DriveVbus+0x30>
 8003b18:	b921      	cbnz	r1, 8003b24 <USB_DriveVbus+0x30>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0); 
 8003b1a:	9b01      	ldr	r3, [sp, #4]
 8003b1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b20:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK; 
}
 8003b24:	2000      	movs	r0, #0
 8003b26:	b002      	add	sp, #8
 8003b28:	4770      	bx	lr
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0); 
 8003b2a:	9b01      	ldr	r3, [sp, #4]
 8003b2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b30:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
 8003b34:	e7ec      	b.n	8003b10 <USB_DriveVbus+0x1c>

08003b36 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8003b36:	b480      	push	{r7}
 8003b38:	b083      	sub	sp, #12
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	b29b      	uxth	r3, r3
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx , uint8_t hc_num)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	70fb      	strb	r3, [r7, #3]
  uint32_t count = 0U;
 8003b60:	2300      	movs	r3, #0
 8003b62:	60fb      	str	r3, [r7, #12]
  
  /* Check for space in the request queue to issue the halt. */
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
 8003b64:	78fb      	ldrb	r3, [r7, #3]
 8003b66:	015a      	lsls	r2, r3, #5
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	0c9b      	lsrs	r3, r3, #18
 8003b74:	f003 0303 	and.w	r3, r3, #3
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00b      	beq.n	8003b94 <USB_HC_Halt+0x40>
 8003b7c:	78fb      	ldrb	r3, [r7, #3]
 8003b7e:	015a      	lsls	r2, r3, #5
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4413      	add	r3, r2
 8003b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b88:	681b      	ldr	r3, [r3, #0]
  USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_BULK)))
 8003b8a:	0c9b      	lsrs	r3, r3, #18
 8003b8c:	f003 0303 	and.w	r3, r3, #3
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d15c      	bne.n	8003c4e <USB_HC_Halt+0xfa>
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8003b94:	78fb      	ldrb	r3, [r7, #3]
 8003b96:	015a      	lsls	r2, r3, #5
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	78fa      	ldrb	r2, [r7, #3]
 8003ba4:	0151      	lsls	r1, r2, #5
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	440a      	add	r2, r1
 8003baa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003bb2:	6013      	str	r3, [r2, #0]
    
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d133      	bne.n	8003c28 <USB_HC_Halt+0xd4>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003bc0:	78fb      	ldrb	r3, [r7, #3]
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	78fa      	ldrb	r2, [r7, #3]
 8003bd0:	0151      	lsls	r1, r2, #5
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	440a      	add	r2, r1
 8003bd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bda:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003bde:	6013      	str	r3, [r2, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 8003be0:	78fb      	ldrb	r3, [r7, #3]
 8003be2:	015a      	lsls	r2, r3, #5
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4413      	add	r3, r2
 8003be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	78fa      	ldrb	r2, [r7, #3]
 8003bf0:	0151      	lsls	r1, r2, #5
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	440a      	add	r2, r1
 8003bf6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bfa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003bfe:	6013      	str	r3, [r2, #0]
      do 
      {
        if (++count > 1000U) 
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	3301      	adds	r3, #1
 8003c04:	60fb      	str	r3, [r7, #12]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c0c:	d81d      	bhi.n	8003c4a <USB_HC_Halt+0xf6>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 8003c0e:	78fb      	ldrb	r3, [r7, #3]
 8003c10:	015a      	lsls	r2, r3, #5
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4413      	add	r3, r2
 8003c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c24:	d0ec      	beq.n	8003c00 <USB_HC_Halt+0xac>
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 8003c26:	e06f      	b.n	8003d08 <USB_HC_Halt+0x1b4>
    }
    else
    {
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 8003c28:	78fb      	ldrb	r3, [r7, #3]
 8003c2a:	015a      	lsls	r2, r3, #5
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4413      	add	r3, r2
 8003c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	78fa      	ldrb	r2, [r7, #3]
 8003c38:	0151      	lsls	r1, r2, #5
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	440a      	add	r2, r1
 8003c3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c46:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 8003c48:	e05e      	b.n	8003d08 <USB_HC_Halt+0x1b4>
          break;
 8003c4a:	bf00      	nop
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 8003c4c:	e05c      	b.n	8003d08 <USB_HC_Halt+0x1b4>
    }
  }
  else
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8003c4e:	78fb      	ldrb	r3, [r7, #3]
 8003c50:	015a      	lsls	r2, r3, #5
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4413      	add	r3, r2
 8003c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	78fa      	ldrb	r2, [r7, #3]
 8003c5e:	0151      	lsls	r1, r2, #5
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	440a      	add	r2, r1
 8003c64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c6c:	6013      	str	r3, [r2, #0]
    
    if ((USBx_HOST->HPTXSTS & 0xFFFFU) == 0U)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d133      	bne.n	8003ce4 <USB_HC_Halt+0x190>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003c7c:	78fb      	ldrb	r3, [r7, #3]
 8003c7e:	015a      	lsls	r2, r3, #5
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4413      	add	r3, r2
 8003c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	78fa      	ldrb	r2, [r7, #3]
 8003c8c:	0151      	lsls	r1, r2, #5
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	440a      	add	r2, r1
 8003c92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c9a:	6013      	str	r3, [r2, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 8003c9c:	78fb      	ldrb	r3, [r7, #3]
 8003c9e:	015a      	lsls	r2, r3, #5
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	78fa      	ldrb	r2, [r7, #3]
 8003cac:	0151      	lsls	r1, r2, #5
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	440a      	add	r2, r1
 8003cb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003cba:	6013      	str	r3, [r2, #0]
      do 
      {
        if (++count > 1000U) 
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	60fb      	str	r3, [r7, #12]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cc8:	d81d      	bhi.n	8003d06 <USB_HC_Halt+0x1b2>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 8003cca:	78fb      	ldrb	r3, [r7, #3]
 8003ccc:	015a      	lsls	r2, r3, #5
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003cdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ce0:	d0ec      	beq.n	8003cbc <USB_HC_Halt+0x168>
 8003ce2:	e011      	b.n	8003d08 <USB_HC_Halt+0x1b4>
    }
    else
    {
       USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 8003ce4:	78fb      	ldrb	r3, [r7, #3]
 8003ce6:	015a      	lsls	r2, r3, #5
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4413      	add	r3, r2
 8003cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	78fa      	ldrb	r2, [r7, #3]
 8003cf4:	0151      	lsls	r1, r2, #5
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	440a      	add	r2, r1
 8003cfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cfe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d02:	6013      	str	r3, [r2, #0]
 8003d04:	e000      	b.n	8003d08 <USB_HC_Halt+0x1b4>
          break;
 8003d06:	bf00      	nop
    }
  }
  
  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr

08003d16 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8003d16:	2884      	cmp	r0, #132	; 0x84
 8003d18:	d001      	beq.n	8003d1e <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8003d1a:	3003      	adds	r0, #3
 8003d1c:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003d1e:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8003d20:	4770      	bx	lr

08003d22 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003d22:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8003d24:	f000 f9c0 	bl	80040a8 <vTaskStartScheduler>
  
  return osOK;
}
 8003d28:	2000      	movs	r0, #0
 8003d2a:	bd08      	pop	{r3, pc}

08003d2c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	460f      	mov	r7, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d32:	6844      	ldr	r4, [r0, #4]
 8003d34:	6805      	ldr	r5, [r0, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003d36:	6906      	ldr	r6, [r0, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d38:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8003d3c:	f7ff ffeb 	bl	8003d16 <makeFreeRtosPriority>
 8003d40:	ab03      	add	r3, sp, #12
 8003d42:	9301      	str	r3, [sp, #4]
 8003d44:	9000      	str	r0, [sp, #0]
 8003d46:	463b      	mov	r3, r7
 8003d48:	b2b2      	uxth	r2, r6
 8003d4a:	4629      	mov	r1, r5
 8003d4c:	4620      	mov	r0, r4
 8003d4e:	f000 f979 	bl	8004044 <xTaskCreate>
 8003d52:	2801      	cmp	r0, #1
 8003d54:	d102      	bne.n	8003d5c <osThreadCreate+0x30>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003d56:	9803      	ldr	r0, [sp, #12]
}
 8003d58:	b005      	add	sp, #20
 8003d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NULL;
 8003d5c:	2000      	movs	r0, #0
 8003d5e:	e7fb      	b.n	8003d58 <osThreadCreate+0x2c>

08003d60 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003d60:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003d62:	4603      	mov	r3, r0
 8003d64:	b900      	cbnz	r0, 8003d68 <osDelay+0x8>
 8003d66:	2301      	movs	r3, #1
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 fadf 	bl	800432c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003d6e:	2000      	movs	r0, #0
 8003d70:	bd08      	pop	{r3, pc}

08003d72 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d72:	f100 0308 	add.w	r3, r0, #8
 8003d76:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d78:	f04f 32ff 	mov.w	r2, #4294967295
 8003d7c:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d7e:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d80:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d82:	2300      	movs	r3, #0
 8003d84:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003d86:	4770      	bx	lr

08003d88 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003d8c:	4770      	bx	lr

08003d8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d8e:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003d90:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d96:	689a      	ldr	r2, [r3, #8]
 8003d98:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d9a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003d9c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8003d9e:	6803      	ldr	r3, [r0, #0]
 8003da0:	3301      	adds	r3, #1
 8003da2:	6003      	str	r3, [r0, #0]
}
 8003da4:	4770      	bx	lr

08003da6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003da6:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003da8:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003daa:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003dae:	d002      	beq.n	8003db6 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003db0:	f100 0208 	add.w	r2, r0, #8
 8003db4:	e002      	b.n	8003dbc <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 8003db6:	6902      	ldr	r2, [r0, #16]
 8003db8:	e004      	b.n	8003dc4 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dba:	461a      	mov	r2, r3
 8003dbc:	6853      	ldr	r3, [r2, #4]
 8003dbe:	681c      	ldr	r4, [r3, #0]
 8003dc0:	42ac      	cmp	r4, r5
 8003dc2:	d9fa      	bls.n	8003dba <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003dc4:	6853      	ldr	r3, [r2, #4]
 8003dc6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003dc8:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003dca:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8003dcc:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003dce:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8003dd0:	6803      	ldr	r3, [r0, #0]
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	6003      	str	r3, [r0, #0]
}
 8003dd6:	bc30      	pop	{r4, r5}
 8003dd8:	4770      	bx	lr

08003dda <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003dda:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003ddc:	6842      	ldr	r2, [r0, #4]
 8003dde:	6881      	ldr	r1, [r0, #8]
 8003de0:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003de2:	6882      	ldr	r2, [r0, #8]
 8003de4:	6841      	ldr	r1, [r0, #4]
 8003de6:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	4282      	cmp	r2, r0
 8003dec:	d005      	beq.n	8003dfa <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003dee:	2200      	movs	r2, #0
 8003df0:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8003df2:	6818      	ldr	r0, [r3, #0]
 8003df4:	3801      	subs	r0, #1
 8003df6:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8003df8:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003dfa:	6882      	ldr	r2, [r0, #8]
 8003dfc:	605a      	str	r2, [r3, #4]
 8003dfe:	e7f6      	b.n	8003dee <uxListRemove+0x14>

08003e00 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e00:	4b07      	ldr	r3, [pc, #28]	; (8003e20 <prvResetNextTaskUnblockTime+0x20>)
 8003e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	b133      	cbz	r3, 8003e16 <prvResetNextTaskUnblockTime+0x16>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003e08:	4b05      	ldr	r3, [pc, #20]	; (8003e20 <prvResetNextTaskUnblockTime+0x20>)
 8003e0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e0c:	68d2      	ldr	r2, [r2, #12]
 8003e0e:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003e10:	6852      	ldr	r2, [r2, #4]
 8003e12:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 8003e14:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 8003e16:	4b02      	ldr	r3, [pc, #8]	; (8003e20 <prvResetNextTaskUnblockTime+0x20>)
 8003e18:	f04f 32ff 	mov.w	r2, #4294967295
 8003e1c:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e1e:	4770      	bx	lr
 8003e20:	2000002c 	.word	0x2000002c

08003e24 <prvDeleteTCB>:
	{
 8003e24:	b510      	push	{r4, lr}
 8003e26:	4604      	mov	r4, r0
			vPortFree( pxTCB->pxStack );
 8003e28:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8003e2a:	f000 fd65 	bl	80048f8 <vPortFree>
			vPortFree( pxTCB );
 8003e2e:	4620      	mov	r0, r4
 8003e30:	f000 fd62 	bl	80048f8 <vPortFree>
	}
 8003e34:	bd10      	pop	{r4, pc}

08003e36 <prvInitialiseNewTask>:
{
 8003e36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e3a:	4680      	mov	r8, r0
 8003e3c:	4699      	mov	r9, r3
 8003e3e:	9d08      	ldr	r5, [sp, #32]
 8003e40:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003e42:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003e44:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8003e46:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003e4a:	3a01      	subs	r2, #1
 8003e4c:	eb06 0682 	add.w	r6, r6, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003e50:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e54:	2300      	movs	r3, #0
 8003e56:	2b0f      	cmp	r3, #15
 8003e58:	d807      	bhi.n	8003e6a <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003e5a:	5cc8      	ldrb	r0, [r1, r3]
 8003e5c:	18e2      	adds	r2, r4, r3
 8003e5e:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 8003e62:	5cca      	ldrb	r2, [r1, r3]
 8003e64:	b10a      	cbz	r2, 8003e6a <prvInitialiseNewTask+0x34>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e66:	3301      	adds	r3, #1
 8003e68:	e7f5      	b.n	8003e56 <prvInitialiseNewTask+0x20>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003e70:	2d06      	cmp	r5, #6
 8003e72:	d900      	bls.n	8003e76 <prvInitialiseNewTask+0x40>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003e74:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8003e76:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8003e78:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003e7a:	f04f 0a00 	mov.w	sl, #0
 8003e7e:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003e82:	1d20      	adds	r0, r4, #4
 8003e84:	f7ff ff80 	bl	8003d88 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003e88:	f104 0018 	add.w	r0, r4, #24
 8003e8c:	f7ff ff7c 	bl	8003d88 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003e90:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e92:	f1c5 0507 	rsb	r5, r5, #7
 8003e96:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003e98:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8003e9a:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003e9e:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ea2:	464a      	mov	r2, r9
 8003ea4:	4641      	mov	r1, r8
 8003ea6:	4630      	mov	r0, r6
 8003ea8:	f000 fb20 	bl	80044ec <pxPortInitialiseStack>
 8003eac:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8003eae:	b107      	cbz	r7, 8003eb2 <prvInitialiseNewTask+0x7c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003eb0:	603c      	str	r4, [r7, #0]
}
 8003eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08003eb8 <prvInitialiseTaskLists>:
{
 8003eb8:	b570      	push	{r4, r5, r6, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003eba:	2400      	movs	r4, #0
 8003ebc:	e007      	b.n	8003ece <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ebe:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8003ec2:	0093      	lsls	r3, r2, #2
 8003ec4:	4810      	ldr	r0, [pc, #64]	; (8003f08 <prvInitialiseTaskLists+0x50>)
 8003ec6:	4418      	add	r0, r3
 8003ec8:	f7ff ff53 	bl	8003d72 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ecc:	3401      	adds	r4, #1
 8003ece:	2c06      	cmp	r4, #6
 8003ed0:	d9f5      	bls.n	8003ebe <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8003ed2:	4c0e      	ldr	r4, [pc, #56]	; (8003f0c <prvInitialiseTaskLists+0x54>)
 8003ed4:	f104 06bc 	add.w	r6, r4, #188	; 0xbc
 8003ed8:	4630      	mov	r0, r6
 8003eda:	f7ff ff4a 	bl	8003d72 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003ede:	f104 05d0 	add.w	r5, r4, #208	; 0xd0
 8003ee2:	4628      	mov	r0, r5
 8003ee4:	f7ff ff45 	bl	8003d72 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003ee8:	f104 0014 	add.w	r0, r4, #20
 8003eec:	f7ff ff41 	bl	8003d72 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8003ef0:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
 8003ef4:	f7ff ff3d 	bl	8003d72 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8003ef8:	4620      	mov	r0, r4
 8003efa:	f7ff ff3a 	bl	8003d72 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8003efe:	62a6      	str	r6, [r4, #40]	; 0x28
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003f00:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
}
 8003f04:	bd70      	pop	{r4, r5, r6, pc}
 8003f06:	bf00      	nop
 8003f08:	2000005c 	.word	0x2000005c
 8003f0c:	2000002c 	.word	0x2000002c

08003f10 <prvAddNewTaskToReadyList>:
{
 8003f10:	b538      	push	{r3, r4, r5, lr}
 8003f12:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8003f14:	f000 fb16 	bl	8004544 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8003f18:	4b26      	ldr	r3, [pc, #152]	; (8003fb4 <prvAddNewTaskToReadyList+0xa4>)
 8003f1a:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8003f1e:	3201      	adds	r2, #1
 8003f20:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
		if( pxCurrentTCB == NULL )
 8003f24:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003f28:	b173      	cbz	r3, 8003f48 <prvAddNewTaskToReadyList+0x38>
			if( xSchedulerRunning == pdFALSE )
 8003f2a:	4b22      	ldr	r3, [pc, #136]	; (8003fb4 <prvAddNewTaskToReadyList+0xa4>)
 8003f2c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8003f30:	b98b      	cbnz	r3, 8003f56 <prvAddNewTaskToReadyList+0x46>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003f32:	4b20      	ldr	r3, [pc, #128]	; (8003fb4 <prvAddNewTaskToReadyList+0xa4>)
 8003f34:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f3a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d80a      	bhi.n	8003f56 <prvAddNewTaskToReadyList+0x46>
					pxCurrentTCB = pxNewTCB;
 8003f40:	4b1c      	ldr	r3, [pc, #112]	; (8003fb4 <prvAddNewTaskToReadyList+0xa4>)
 8003f42:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
 8003f46:	e006      	b.n	8003f56 <prvAddNewTaskToReadyList+0x46>
			pxCurrentTCB = pxNewTCB;
 8003f48:	4b1a      	ldr	r3, [pc, #104]	; (8003fb4 <prvAddNewTaskToReadyList+0xa4>)
 8003f4a:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003f4e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d02a      	beq.n	8003fac <prvAddNewTaskToReadyList+0x9c>
		uxTaskNumber++;
 8003f56:	4c17      	ldr	r4, [pc, #92]	; (8003fb4 <prvAddNewTaskToReadyList+0xa4>)
 8003f58:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
		prvAddTaskToReadyList( pxNewTCB );
 8003f62:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003f64:	2201      	movs	r2, #1
 8003f66:	409a      	lsls	r2, r3
 8003f68:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
 8003f72:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8003f76:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003f7a:	009a      	lsls	r2, r3, #2
 8003f7c:	1d29      	adds	r1, r5, #4
 8003f7e:	4410      	add	r0, r2
 8003f80:	f7ff ff05 	bl	8003d8e <vListInsertEnd>
	taskEXIT_CRITICAL();
 8003f84:	f000 fb00 	bl	8004588 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8003f88:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8003f8c:	b16b      	cbz	r3, 8003faa <prvAddNewTaskToReadyList+0x9a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003f8e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f94:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d207      	bcs.n	8003faa <prvAddNewTaskToReadyList+0x9a>
			taskYIELD_IF_USING_PREEMPTION();
 8003f9a:	4b07      	ldr	r3, [pc, #28]	; (8003fb8 <prvAddNewTaskToReadyList+0xa8>)
 8003f9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	f3bf 8f4f 	dsb	sy
 8003fa6:	f3bf 8f6f 	isb	sy
}
 8003faa:	bd38      	pop	{r3, r4, r5, pc}
				prvInitialiseTaskLists();
 8003fac:	f7ff ff84 	bl	8003eb8 <prvInitialiseTaskLists>
 8003fb0:	e7d1      	b.n	8003f56 <prvAddNewTaskToReadyList+0x46>
 8003fb2:	bf00      	nop
 8003fb4:	2000002c 	.word	0x2000002c
 8003fb8:	e000ed04 	.word	0xe000ed04

08003fbc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003fbc:	b570      	push	{r4, r5, r6, lr}
 8003fbe:	4604      	mov	r4, r0
 8003fc0:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003fc2:	4b1f      	ldr	r3, [pc, #124]	; (8004040 <prvAddCurrentTaskToDelayedList+0x84>)
 8003fc4:	f8d3 5110 	ldr.w	r5, [r3, #272]	; 0x110
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fc8:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
 8003fcc:	3004      	adds	r0, #4
 8003fce:	f7ff ff04 	bl	8003dda <uxListRemove>
 8003fd2:	b960      	cbnz	r0, 8003fee <prvAddCurrentTaskToDelayedList+0x32>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003fd4:	4b1a      	ldr	r3, [pc, #104]	; (8004040 <prvAddCurrentTaskToDelayedList+0x84>)
 8003fd6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8003fda:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003fdc:	2201      	movs	r2, #1
 8003fde:	fa02 f101 	lsl.w	r1, r2, r1
 8003fe2:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8003fe6:	ea22 0201 	bic.w	r2, r2, r1
 8003fea:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003fee:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003ff2:	d012      	beq.n	800401a <prvAddCurrentTaskToDelayedList+0x5e>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003ff4:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003ff6:	4b12      	ldr	r3, [pc, #72]	; (8004040 <prvAddCurrentTaskToDelayedList+0x84>)
 8003ff8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003ffc:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8003ffe:	42a5      	cmp	r5, r4
 8004000:	d814      	bhi.n	800402c <prvAddCurrentTaskToDelayedList+0x70>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004002:	4d0f      	ldr	r5, [pc, #60]	; (8004040 <prvAddCurrentTaskToDelayedList+0x84>)
 8004004:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8004006:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 800400a:	3104      	adds	r1, #4
 800400c:	f7ff fecb 	bl	8003da6 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8004010:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004012:	42a3      	cmp	r3, r4
 8004014:	d912      	bls.n	800403c <prvAddCurrentTaskToDelayedList+0x80>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8004016:	62ec      	str	r4, [r5, #44]	; 0x2c

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004018:	e010      	b.n	800403c <prvAddCurrentTaskToDelayedList+0x80>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800401a:	2e00      	cmp	r6, #0
 800401c:	d0ea      	beq.n	8003ff4 <prvAddCurrentTaskToDelayedList+0x38>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800401e:	4808      	ldr	r0, [pc, #32]	; (8004040 <prvAddCurrentTaskToDelayedList+0x84>)
 8004020:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004024:	3104      	adds	r1, #4
 8004026:	f7ff feb2 	bl	8003d8e <vListInsertEnd>
 800402a:	e007      	b.n	800403c <prvAddCurrentTaskToDelayedList+0x80>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800402c:	4b04      	ldr	r3, [pc, #16]	; (8004040 <prvAddCurrentTaskToDelayedList+0x84>)
 800402e:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 8004032:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8004036:	3104      	adds	r1, #4
 8004038:	f7ff feb5 	bl	8003da6 <vListInsert>
}
 800403c:	bd70      	pop	{r4, r5, r6, pc}
 800403e:	bf00      	nop
 8004040:	2000002c 	.word	0x2000002c

08004044 <xTaskCreate>:
	{
 8004044:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004048:	b085      	sub	sp, #20
 800404a:	4607      	mov	r7, r0
 800404c:	4688      	mov	r8, r1
 800404e:	4615      	mov	r5, r2
 8004050:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004052:	0090      	lsls	r0, r2, #2
 8004054:	f000 fbd6 	bl	8004804 <pvPortMalloc>
			if( pxStack != NULL )
 8004058:	b1f8      	cbz	r0, 800409a <xTaskCreate+0x56>
 800405a:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800405c:	2054      	movs	r0, #84	; 0x54
 800405e:	f000 fbd1 	bl	8004804 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8004062:	4604      	mov	r4, r0
 8004064:	b1a8      	cbz	r0, 8004092 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 8004066:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8004068:	b1d4      	cbz	r4, 80040a0 <xTaskCreate+0x5c>
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800406a:	2300      	movs	r3, #0
 800406c:	9303      	str	r3, [sp, #12]
 800406e:	9402      	str	r4, [sp, #8]
 8004070:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004072:	9301      	str	r3, [sp, #4]
 8004074:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	464b      	mov	r3, r9
 800407a:	462a      	mov	r2, r5
 800407c:	4641      	mov	r1, r8
 800407e:	4638      	mov	r0, r7
 8004080:	f7ff fed9 	bl	8003e36 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004084:	4620      	mov	r0, r4
 8004086:	f7ff ff43 	bl	8003f10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800408a:	2001      	movs	r0, #1
	}
 800408c:	b005      	add	sp, #20
 800408e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8004092:	4630      	mov	r0, r6
 8004094:	f000 fc30 	bl	80048f8 <vPortFree>
 8004098:	e7e6      	b.n	8004068 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800409a:	f04f 30ff 	mov.w	r0, #4294967295
 800409e:	e7f5      	b.n	800408c <xTaskCreate+0x48>
 80040a0:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 80040a4:	e7f2      	b.n	800408c <xTaskCreate+0x48>
	...

080040a8 <vTaskStartScheduler>:
{
 80040a8:	b500      	push	{lr}
 80040aa:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
 80040ac:	4b17      	ldr	r3, [pc, #92]	; (800410c <vTaskStartScheduler+0x64>)
 80040ae:	9301      	str	r3, [sp, #4]
 80040b0:	2300      	movs	r3, #0
 80040b2:	9300      	str	r3, [sp, #0]
 80040b4:	2280      	movs	r2, #128	; 0x80
 80040b6:	4916      	ldr	r1, [pc, #88]	; (8004110 <vTaskStartScheduler+0x68>)
 80040b8:	4816      	ldr	r0, [pc, #88]	; (8004114 <vTaskStartScheduler+0x6c>)
 80040ba:	f7ff ffc3 	bl	8004044 <xTaskCreate>
	if( xReturn == pdPASS )
 80040be:	2801      	cmp	r0, #1
 80040c0:	d005      	beq.n	80040ce <vTaskStartScheduler+0x26>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80040c2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80040c6:	d017      	beq.n	80040f8 <vTaskStartScheduler+0x50>
}
 80040c8:	b003      	add	sp, #12
 80040ca:	f85d fb04 	ldr.w	pc, [sp], #4

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80040ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d2:	f383 8811 	msr	BASEPRI, r3
 80040d6:	f3bf 8f6f 	isb	sy
 80040da:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80040de:	4b0e      	ldr	r3, [pc, #56]	; (8004118 <vTaskStartScheduler+0x70>)
 80040e0:	f04f 32ff 	mov.w	r2, #4294967295
 80040e4:	62da      	str	r2, [r3, #44]	; 0x2c
		xSchedulerRunning = pdTRUE;
 80040e6:	2201      	movs	r2, #1
 80040e8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		xTickCount = ( TickType_t ) 0U;
 80040ec:	2200      	movs	r2, #0
 80040ee:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		if( xPortStartScheduler() != pdFALSE )
 80040f2:	f000 fac3 	bl	800467c <xPortStartScheduler>
 80040f6:	e7e7      	b.n	80040c8 <vTaskStartScheduler+0x20>
 80040f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fc:	f383 8811 	msr	BASEPRI, r3
 8004100:	f3bf 8f6f 	isb	sy
 8004104:	f3bf 8f4f 	dsb	sy
 8004108:	e7fe      	b.n	8004108 <vTaskStartScheduler+0x60>
 800410a:	bf00      	nop
 800410c:	20000148 	.word	0x20000148
 8004110:	0800552c 	.word	0x0800552c
 8004114:	080043cd 	.word	0x080043cd
 8004118:	2000002c 	.word	0x2000002c

0800411c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800411c:	4a03      	ldr	r2, [pc, #12]	; (800412c <vTaskSuspendAll+0x10>)
 800411e:	f8d2 3118 	ldr.w	r3, [r2, #280]	; 0x118
 8004122:	3301      	adds	r3, #1
 8004124:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
}
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	2000002c 	.word	0x2000002c

08004130 <xTaskIncrementTick>:
{
 8004130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004134:	4b40      	ldr	r3, [pc, #256]	; (8004238 <xTaskIncrementTick+0x108>)
 8004136:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800413a:	2b00      	cmp	r3, #0
 800413c:	d16c      	bne.n	8004218 <xTaskIncrementTick+0xe8>
		const TickType_t xConstTickCount = xTickCount + 1;
 800413e:	4b3e      	ldr	r3, [pc, #248]	; (8004238 <xTaskIncrementTick+0x108>)
 8004140:	f8d3 5110 	ldr.w	r5, [r3, #272]	; 0x110
 8004144:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8004146:	f8c3 5110 	str.w	r5, [r3, #272]	; 0x110
		if( xConstTickCount == ( TickType_t ) 0U )
 800414a:	b9cd      	cbnz	r5, 8004180 <xTaskIncrementTick+0x50>
			taskSWITCH_DELAYED_LISTS();
 800414c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	b143      	cbz	r3, 8004164 <xTaskIncrementTick+0x34>
 8004152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004156:	f383 8811 	msr	BASEPRI, r3
 800415a:	f3bf 8f6f 	isb	sy
 800415e:	f3bf 8f4f 	dsb	sy
 8004162:	e7fe      	b.n	8004162 <xTaskIncrementTick+0x32>
 8004164:	4b34      	ldr	r3, [pc, #208]	; (8004238 <xTaskIncrementTick+0x108>)
 8004166:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004168:	f8d3 10f8 	ldr.w	r1, [r3, #248]	; 0xf8
 800416c:	6299      	str	r1, [r3, #40]	; 0x28
 800416e:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
 8004172:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 8004176:	3201      	adds	r2, #1
 8004178:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
 800417c:	f7ff fe40 	bl	8003e00 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004180:	4b2d      	ldr	r3, [pc, #180]	; (8004238 <xTaskIncrementTick+0x108>)
 8004182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004184:	42ab      	cmp	r3, r5
 8004186:	d93d      	bls.n	8004204 <xTaskIncrementTick+0xd4>
BaseType_t xSwitchRequired = pdFALSE;
 8004188:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800418a:	4a2b      	ldr	r2, [pc, #172]	; (8004238 <xTaskIncrementTick+0x108>)
 800418c:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
 8004190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004192:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004196:	0099      	lsls	r1, r3, #2
 8004198:	440a      	add	r2, r1
 800419a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800419c:	2b01      	cmp	r3, #1
 800419e:	d942      	bls.n	8004226 <xTaskIncrementTick+0xf6>
				xSwitchRequired = pdTRUE;
 80041a0:	2401      	movs	r4, #1
 80041a2:	e040      	b.n	8004226 <xTaskIncrementTick+0xf6>
							xSwitchRequired = pdTRUE;
 80041a4:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041a6:	4b24      	ldr	r3, [pc, #144]	; (8004238 <xTaskIncrementTick+0x108>)
 80041a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	b363      	cbz	r3, 8004208 <xTaskIncrementTick+0xd8>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80041ae:	4b22      	ldr	r3, [pc, #136]	; (8004238 <xTaskIncrementTick+0x108>)
 80041b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80041b6:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 80041b8:	429d      	cmp	r5, r3
 80041ba:	d32a      	bcc.n	8004212 <xTaskIncrementTick+0xe2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041bc:	f106 0804 	add.w	r8, r6, #4
 80041c0:	4640      	mov	r0, r8
 80041c2:	f7ff fe0a 	bl	8003dda <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80041c6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80041c8:	b11b      	cbz	r3, 80041d2 <xTaskIncrementTick+0xa2>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80041ca:	f106 0018 	add.w	r0, r6, #24
 80041ce:	f7ff fe04 	bl	8003dda <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80041d2:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80041d4:	2201      	movs	r2, #1
 80041d6:	409a      	lsls	r2, r3
 80041d8:	4f17      	ldr	r7, [pc, #92]	; (8004238 <xTaskIncrementTick+0x108>)
 80041da:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 80041de:	430a      	orrs	r2, r1
 80041e0:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80041e4:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80041e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80041ec:	009a      	lsls	r2, r3, #2
 80041ee:	4641      	mov	r1, r8
 80041f0:	4410      	add	r0, r2
 80041f2:	f7ff fdcc 	bl	8003d8e <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041f6:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80041f8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80041fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fe:	429a      	cmp	r2, r3
 8004200:	d2d0      	bcs.n	80041a4 <xTaskIncrementTick+0x74>
 8004202:	e7d0      	b.n	80041a6 <xTaskIncrementTick+0x76>
BaseType_t xSwitchRequired = pdFALSE;
 8004204:	2400      	movs	r4, #0
 8004206:	e7ce      	b.n	80041a6 <xTaskIncrementTick+0x76>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004208:	4b0b      	ldr	r3, [pc, #44]	; (8004238 <xTaskIncrementTick+0x108>)
 800420a:	f04f 32ff 	mov.w	r2, #4294967295
 800420e:	62da      	str	r2, [r3, #44]	; 0x2c
					break;
 8004210:	e7bb      	b.n	800418a <xTaskIncrementTick+0x5a>
						xNextTaskUnblockTime = xItemValue;
 8004212:	4a09      	ldr	r2, [pc, #36]	; (8004238 <xTaskIncrementTick+0x108>)
 8004214:	62d3      	str	r3, [r2, #44]	; 0x2c
						break;
 8004216:	e7b8      	b.n	800418a <xTaskIncrementTick+0x5a>
		++uxPendedTicks;
 8004218:	4a07      	ldr	r2, [pc, #28]	; (8004238 <xTaskIncrementTick+0x108>)
 800421a:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
 800421e:	3301      	adds	r3, #1
 8004220:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
BaseType_t xSwitchRequired = pdFALSE;
 8004224:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 8004226:	4b04      	ldr	r3, [pc, #16]	; (8004238 <xTaskIncrementTick+0x108>)
 8004228:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800422c:	b103      	cbz	r3, 8004230 <xTaskIncrementTick+0x100>
			xSwitchRequired = pdTRUE;
 800422e:	2401      	movs	r4, #1
}
 8004230:	4620      	mov	r0, r4
 8004232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004236:	bf00      	nop
 8004238:	2000002c 	.word	0x2000002c

0800423c <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 800423c:	4b39      	ldr	r3, [pc, #228]	; (8004324 <xTaskResumeAll+0xe8>)
 800423e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8004242:	b943      	cbnz	r3, 8004256 <xTaskResumeAll+0x1a>
 8004244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004248:	f383 8811 	msr	BASEPRI, r3
 800424c:	f3bf 8f6f 	isb	sy
 8004250:	f3bf 8f4f 	dsb	sy
 8004254:	e7fe      	b.n	8004254 <xTaskResumeAll+0x18>
{
 8004256:	b570      	push	{r4, r5, r6, lr}
	taskENTER_CRITICAL();
 8004258:	f000 f974 	bl	8004544 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800425c:	4b31      	ldr	r3, [pc, #196]	; (8004324 <xTaskResumeAll+0xe8>)
 800425e:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 8004262:	3a01      	subs	r2, #1
 8004264:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004268:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800426c:	2b00      	cmp	r3, #0
 800426e:	d154      	bne.n	800431a <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004270:	4b2c      	ldr	r3, [pc, #176]	; (8004324 <xTaskResumeAll+0xe8>)
 8004272:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8004276:	b923      	cbnz	r3, 8004282 <xTaskResumeAll+0x46>
BaseType_t xAlreadyYielded = pdFALSE;
 8004278:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800427a:	f000 f985 	bl	8004588 <vPortExitCritical>
}
 800427e:	4620      	mov	r0, r4
 8004280:	bd70      	pop	{r4, r5, r6, pc}
TCB_t *pxTCB = NULL;
 8004282:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004284:	4b27      	ldr	r3, [pc, #156]	; (8004324 <xTaskResumeAll+0xe8>)
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	b32b      	cbz	r3, 80042d6 <xTaskResumeAll+0x9a>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800428a:	4d26      	ldr	r5, [pc, #152]	; (8004324 <xTaskResumeAll+0xe8>)
 800428c:	6a2b      	ldr	r3, [r5, #32]
 800428e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004290:	f104 0018 	add.w	r0, r4, #24
 8004294:	f7ff fda1 	bl	8003dda <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004298:	1d26      	adds	r6, r4, #4
 800429a:	4630      	mov	r0, r6
 800429c:	f7ff fd9d 	bl	8003dda <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80042a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80042a2:	2201      	movs	r2, #1
 80042a4:	409a      	lsls	r2, r3
 80042a6:	f8d5 110c 	ldr.w	r1, [r5, #268]	; 0x10c
 80042aa:	430a      	orrs	r2, r1
 80042ac:	f8c5 210c 	str.w	r2, [r5, #268]	; 0x10c
 80042b0:	f105 0030 	add.w	r0, r5, #48	; 0x30
 80042b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80042b8:	009a      	lsls	r2, r3, #2
 80042ba:	4631      	mov	r1, r6
 80042bc:	4410      	add	r0, r2
 80042be:	f7ff fd66 	bl	8003d8e <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80042c4:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 80042c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d3da      	bcc.n	8004284 <xTaskResumeAll+0x48>
						xYieldPending = pdTRUE;
 80042ce:	2201      	movs	r2, #1
 80042d0:	f8c5 2128 	str.w	r2, [r5, #296]	; 0x128
 80042d4:	e7d6      	b.n	8004284 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 80042d6:	b10c      	cbz	r4, 80042dc <xTaskResumeAll+0xa0>
					prvResetNextTaskUnblockTime();
 80042d8:	f7ff fd92 	bl	8003e00 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80042dc:	4b11      	ldr	r3, [pc, #68]	; (8004324 <xTaskResumeAll+0xe8>)
 80042de:	f8d3 4124 	ldr.w	r4, [r3, #292]	; 0x124
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80042e2:	b164      	cbz	r4, 80042fe <xTaskResumeAll+0xc2>
							if( xTaskIncrementTick() != pdFALSE )
 80042e4:	f7ff ff24 	bl	8004130 <xTaskIncrementTick>
 80042e8:	b118      	cbz	r0, 80042f2 <xTaskResumeAll+0xb6>
								xYieldPending = pdTRUE;
 80042ea:	4b0e      	ldr	r3, [pc, #56]	; (8004324 <xTaskResumeAll+0xe8>)
 80042ec:	2201      	movs	r2, #1
 80042ee:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80042f2:	3c01      	subs	r4, #1
 80042f4:	d1f6      	bne.n	80042e4 <xTaskResumeAll+0xa8>
						uxPendedTicks = 0;
 80042f6:	4b0b      	ldr	r3, [pc, #44]	; (8004324 <xTaskResumeAll+0xe8>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
				if( xYieldPending != pdFALSE )
 80042fe:	4b09      	ldr	r3, [pc, #36]	; (8004324 <xTaskResumeAll+0xe8>)
 8004300:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8004304:	b15b      	cbz	r3, 800431e <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
 8004306:	4b08      	ldr	r3, [pc, #32]	; (8004328 <xTaskResumeAll+0xec>)
 8004308:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800430c:	601a      	str	r2, [r3, #0]
 800430e:	f3bf 8f4f 	dsb	sy
 8004312:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8004316:	2401      	movs	r4, #1
 8004318:	e7af      	b.n	800427a <xTaskResumeAll+0x3e>
BaseType_t xAlreadyYielded = pdFALSE;
 800431a:	2400      	movs	r4, #0
 800431c:	e7ad      	b.n	800427a <xTaskResumeAll+0x3e>
 800431e:	2400      	movs	r4, #0
 8004320:	e7ab      	b.n	800427a <xTaskResumeAll+0x3e>
 8004322:	bf00      	nop
 8004324:	2000002c 	.word	0x2000002c
 8004328:	e000ed04 	.word	0xe000ed04

0800432c <vTaskDelay>:
	{
 800432c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800432e:	b1b0      	cbz	r0, 800435e <vTaskDelay+0x32>
 8004330:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8004332:	4b0f      	ldr	r3, [pc, #60]	; (8004370 <vTaskDelay+0x44>)
 8004334:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8004338:	b143      	cbz	r3, 800434c <vTaskDelay+0x20>
 800433a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433e:	f383 8811 	msr	BASEPRI, r3
 8004342:	f3bf 8f6f 	isb	sy
 8004346:	f3bf 8f4f 	dsb	sy
 800434a:	e7fe      	b.n	800434a <vTaskDelay+0x1e>
			vTaskSuspendAll();
 800434c:	f7ff fee6 	bl	800411c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004350:	2100      	movs	r1, #0
 8004352:	4620      	mov	r0, r4
 8004354:	f7ff fe32 	bl	8003fbc <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8004358:	f7ff ff70 	bl	800423c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800435c:	b938      	cbnz	r0, 800436e <vTaskDelay+0x42>
			portYIELD_WITHIN_API();
 800435e:	4b05      	ldr	r3, [pc, #20]	; (8004374 <vTaskDelay+0x48>)
 8004360:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004364:	601a      	str	r2, [r3, #0]
 8004366:	f3bf 8f4f 	dsb	sy
 800436a:	f3bf 8f6f 	isb	sy
	}
 800436e:	bd10      	pop	{r4, pc}
 8004370:	2000002c 	.word	0x2000002c
 8004374:	e000ed04 	.word	0xe000ed04

08004378 <prvCheckTasksWaitingTermination>:
{
 8004378:	b538      	push	{r3, r4, r5, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800437a:	4b13      	ldr	r3, [pc, #76]	; (80043c8 <prvCheckTasksWaitingTermination+0x50>)
 800437c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004380:	b30b      	cbz	r3, 80043c6 <prvCheckTasksWaitingTermination+0x4e>
			vTaskSuspendAll();
 8004382:	f7ff fecb 	bl	800411c <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8004386:	4b10      	ldr	r3, [pc, #64]	; (80043c8 <prvCheckTasksWaitingTermination+0x50>)
 8004388:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
			( void ) xTaskResumeAll();
 800438c:	f7ff ff56 	bl	800423c <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8004390:	2c00      	cmp	r4, #0
 8004392:	d0f2      	beq.n	800437a <prvCheckTasksWaitingTermination+0x2>
				taskENTER_CRITICAL();
 8004394:	f000 f8d6 	bl	8004544 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004398:	4c0b      	ldr	r4, [pc, #44]	; (80043c8 <prvCheckTasksWaitingTermination+0x50>)
 800439a:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 800439e:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043a0:	1d28      	adds	r0, r5, #4
 80043a2:	f7ff fd1a 	bl	8003dda <uxListRemove>
					--uxCurrentNumberOfTasks;
 80043a6:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 80043aa:	3b01      	subs	r3, #1
 80043ac:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
					--uxDeletedTasksWaitingCleanUp;
 80043b0:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80043b4:	3b01      	subs	r3, #1
 80043b6:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
				taskEXIT_CRITICAL();
 80043ba:	f000 f8e5 	bl	8004588 <vPortExitCritical>
				prvDeleteTCB( pxTCB );
 80043be:	4628      	mov	r0, r5
 80043c0:	f7ff fd30 	bl	8003e24 <prvDeleteTCB>
 80043c4:	e7d9      	b.n	800437a <prvCheckTasksWaitingTermination+0x2>
}
 80043c6:	bd38      	pop	{r3, r4, r5, pc}
 80043c8:	2000002c 	.word	0x2000002c

080043cc <prvIdleTask>:
{
 80043cc:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 80043ce:	f7ff ffd3 	bl	8004378 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80043d2:	4b06      	ldr	r3, [pc, #24]	; (80043ec <prvIdleTask+0x20>)
 80043d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d9f9      	bls.n	80043ce <prvIdleTask+0x2>
				taskYIELD();
 80043da:	4b05      	ldr	r3, [pc, #20]	; (80043f0 <prvIdleTask+0x24>)
 80043dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043e0:	601a      	str	r2, [r3, #0]
 80043e2:	f3bf 8f4f 	dsb	sy
 80043e6:	f3bf 8f6f 	isb	sy
 80043ea:	e7f0      	b.n	80043ce <prvIdleTask+0x2>
 80043ec:	2000002c 	.word	0x2000002c
 80043f0:	e000ed04 	.word	0xe000ed04

080043f4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80043f4:	4b22      	ldr	r3, [pc, #136]	; (8004480 <vTaskSwitchContext+0x8c>)
 80043f6:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80043fa:	b123      	cbz	r3, 8004406 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 80043fc:	4b20      	ldr	r3, [pc, #128]	; (8004480 <vTaskSwitchContext+0x8c>)
 80043fe:	2201      	movs	r2, #1
 8004400:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
 8004404:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8004406:	4a1e      	ldr	r2, [pc, #120]	; (8004480 <vTaskSwitchContext+0x8c>)
 8004408:	2300      	movs	r3, #0
 800440a:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800440e:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8004412:	fab3 f383 	clz	r3, r3
 8004416:	b2db      	uxtb	r3, r3
 8004418:	f1c3 031f 	rsb	r3, r3, #31
 800441c:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8004420:	0081      	lsls	r1, r0, #2
 8004422:	440a      	add	r2, r1
 8004424:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004426:	b942      	cbnz	r2, 800443a <vTaskSwitchContext+0x46>
	__asm volatile
 8004428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442c:	f383 8811 	msr	BASEPRI, r3
 8004430:	f3bf 8f6f 	isb	sy
 8004434:	f3bf 8f4f 	dsb	sy
 8004438:	e7fe      	b.n	8004438 <vTaskSwitchContext+0x44>
{
 800443a:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800443c:	4a10      	ldr	r2, [pc, #64]	; (8004480 <vTaskSwitchContext+0x8c>)
 800443e:	0099      	lsls	r1, r3, #2
 8004440:	18cc      	adds	r4, r1, r3
 8004442:	00a0      	lsls	r0, r4, #2
 8004444:	4410      	add	r0, r2
 8004446:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004448:	6864      	ldr	r4, [r4, #4]
 800444a:	6344      	str	r4, [r0, #52]	; 0x34
 800444c:	3230      	adds	r2, #48	; 0x30
 800444e:	4419      	add	r1, r3
 8004450:	0088      	lsls	r0, r1, #2
 8004452:	3008      	adds	r0, #8
 8004454:	4402      	add	r2, r0
 8004456:	4294      	cmp	r4, r2
 8004458:	d00b      	beq.n	8004472 <vTaskSwitchContext+0x7e>
 800445a:	4909      	ldr	r1, [pc, #36]	; (8004480 <vTaskSwitchContext+0x8c>)
 800445c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004460:	009a      	lsls	r2, r3, #2
 8004462:	440a      	add	r2, r1
 8004464:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
}
 800446c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004470:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004472:	6861      	ldr	r1, [r4, #4]
 8004474:	4802      	ldr	r0, [pc, #8]	; (8004480 <vTaskSwitchContext+0x8c>)
 8004476:	2214      	movs	r2, #20
 8004478:	fb02 0203 	mla	r2, r2, r3, r0
 800447c:	6351      	str	r1, [r2, #52]	; 0x34
 800447e:	e7ec      	b.n	800445a <vTaskSwitchContext+0x66>
 8004480:	2000002c 	.word	0x2000002c

08004484 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004484:	4b0b      	ldr	r3, [pc, #44]	; (80044b4 <prvTaskExitError+0x30>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800448c:	d008      	beq.n	80044a0 <prvTaskExitError+0x1c>
 800448e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004492:	f383 8811 	msr	BASEPRI, r3
 8004496:	f3bf 8f6f 	isb	sy
 800449a:	f3bf 8f4f 	dsb	sy
 800449e:	e7fe      	b.n	800449e <prvTaskExitError+0x1a>
 80044a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a4:	f383 8811 	msr	BASEPRI, r3
 80044a8:	f3bf 8f6f 	isb	sy
 80044ac:	f3bf 8f4f 	dsb	sy
 80044b0:	e7fe      	b.n	80044b0 <prvTaskExitError+0x2c>
 80044b2:	bf00      	nop
 80044b4:	20000008 	.word	0x20000008

080044b8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80044b8:	4806      	ldr	r0, [pc, #24]	; (80044d4 <prvPortStartFirstTask+0x1c>)
 80044ba:	6800      	ldr	r0, [r0, #0]
 80044bc:	6800      	ldr	r0, [r0, #0]
 80044be:	f380 8808 	msr	MSP, r0
 80044c2:	b662      	cpsie	i
 80044c4:	b661      	cpsie	f
 80044c6:	f3bf 8f4f 	dsb	sy
 80044ca:	f3bf 8f6f 	isb	sy
 80044ce:	df00      	svc	0
 80044d0:	bf00      	nop
 80044d2:	0000      	.short	0x0000
 80044d4:	e000ed08 	.word	0xe000ed08

080044d8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80044d8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80044e8 <vPortEnableVFP+0x10>
 80044dc:	6801      	ldr	r1, [r0, #0]
 80044de:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80044e2:	6001      	str	r1, [r0, #0]
 80044e4:	4770      	bx	lr
 80044e6:	0000      	.short	0x0000
 80044e8:	e000ed88 	.word	0xe000ed88

080044ec <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80044ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044f0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80044f4:	f021 0101 	bic.w	r1, r1, #1
 80044f8:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80044fc:	4b05      	ldr	r3, [pc, #20]	; (8004514 <pxPortInitialiseStack+0x28>)
 80044fe:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004502:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8004506:	f06f 0302 	mvn.w	r3, #2
 800450a:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800450e:	3844      	subs	r0, #68	; 0x44
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	08004485 	.word	0x08004485
	...

08004520 <SVC_Handler>:
	__asm volatile (
 8004520:	4b07      	ldr	r3, [pc, #28]	; (8004540 <pxCurrentTCBConst2>)
 8004522:	6819      	ldr	r1, [r3, #0]
 8004524:	6808      	ldr	r0, [r1, #0]
 8004526:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800452a:	f380 8809 	msr	PSP, r0
 800452e:	f3bf 8f6f 	isb	sy
 8004532:	f04f 0000 	mov.w	r0, #0
 8004536:	f380 8811 	msr	BASEPRI, r0
 800453a:	4770      	bx	lr
 800453c:	f3af 8000 	nop.w

08004540 <pxCurrentTCBConst2>:
 8004540:	2000012c 	.word	0x2000012c

08004544 <vPortEnterCritical>:
 8004544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004548:	f383 8811 	msr	BASEPRI, r3
 800454c:	f3bf 8f6f 	isb	sy
 8004550:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8004554:	4a0a      	ldr	r2, [pc, #40]	; (8004580 <vPortEnterCritical+0x3c>)
 8004556:	6813      	ldr	r3, [r2, #0]
 8004558:	3301      	adds	r3, #1
 800455a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800455c:	2b01      	cmp	r3, #1
 800455e:	d000      	beq.n	8004562 <vPortEnterCritical+0x1e>
}
 8004560:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004562:	4b08      	ldr	r3, [pc, #32]	; (8004584 <vPortEnterCritical+0x40>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f013 0fff 	tst.w	r3, #255	; 0xff
 800456a:	d0f9      	beq.n	8004560 <vPortEnterCritical+0x1c>
 800456c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004570:	f383 8811 	msr	BASEPRI, r3
 8004574:	f3bf 8f6f 	isb	sy
 8004578:	f3bf 8f4f 	dsb	sy
 800457c:	e7fe      	b.n	800457c <vPortEnterCritical+0x38>
 800457e:	bf00      	nop
 8004580:	20000008 	.word	0x20000008
 8004584:	e000ed04 	.word	0xe000ed04

08004588 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8004588:	4b09      	ldr	r3, [pc, #36]	; (80045b0 <vPortExitCritical+0x28>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	b943      	cbnz	r3, 80045a0 <vPortExitCritical+0x18>
 800458e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004592:	f383 8811 	msr	BASEPRI, r3
 8004596:	f3bf 8f6f 	isb	sy
 800459a:	f3bf 8f4f 	dsb	sy
 800459e:	e7fe      	b.n	800459e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80045a0:	3b01      	subs	r3, #1
 80045a2:	4a03      	ldr	r2, [pc, #12]	; (80045b0 <vPortExitCritical+0x28>)
 80045a4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80045a6:	b90b      	cbnz	r3, 80045ac <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80045a8:	f383 8811 	msr	BASEPRI, r3
}
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	20000008 	.word	0x20000008
	...

080045c0 <PendSV_Handler>:
	__asm volatile
 80045c0:	f3ef 8009 	mrs	r0, PSP
 80045c4:	f3bf 8f6f 	isb	sy
 80045c8:	4b15      	ldr	r3, [pc, #84]	; (8004620 <pxCurrentTCBConst>)
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	f01e 0f10 	tst.w	lr, #16
 80045d0:	bf08      	it	eq
 80045d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80045d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045da:	6010      	str	r0, [r2, #0]
 80045dc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 80045e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80045e4:	f380 8811 	msr	BASEPRI, r0
 80045e8:	f3bf 8f4f 	dsb	sy
 80045ec:	f3bf 8f6f 	isb	sy
 80045f0:	f7ff ff00 	bl	80043f4 <vTaskSwitchContext>
 80045f4:	f04f 0000 	mov.w	r0, #0
 80045f8:	f380 8811 	msr	BASEPRI, r0
 80045fc:	bc08      	pop	{r3}
 80045fe:	6819      	ldr	r1, [r3, #0]
 8004600:	6808      	ldr	r0, [r1, #0]
 8004602:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004606:	f01e 0f10 	tst.w	lr, #16
 800460a:	bf08      	it	eq
 800460c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004610:	f380 8809 	msr	PSP, r0
 8004614:	f3bf 8f6f 	isb	sy
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	f3af 8000 	nop.w

08004620 <pxCurrentTCBConst>:
 8004620:	2000012c 	.word	0x2000012c

08004624 <SysTick_Handler>:
{
 8004624:	b508      	push	{r3, lr}
	__asm volatile
 8004626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462a:	f383 8811 	msr	BASEPRI, r3
 800462e:	f3bf 8f6f 	isb	sy
 8004632:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8004636:	f7ff fd7b 	bl	8004130 <xTaskIncrementTick>
 800463a:	b118      	cbz	r0, 8004644 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800463c:	4b03      	ldr	r3, [pc, #12]	; (800464c <SysTick_Handler+0x28>)
 800463e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004642:	601a      	str	r2, [r3, #0]
	__asm volatile
 8004644:	2300      	movs	r3, #0
 8004646:	f383 8811 	msr	BASEPRI, r3
}
 800464a:	bd08      	pop	{r3, pc}
 800464c:	e000ed04 	.word	0xe000ed04

08004650 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004650:	4b06      	ldr	r3, [pc, #24]	; (800466c <vPortSetupTimerInterrupt+0x1c>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a06      	ldr	r2, [pc, #24]	; (8004670 <vPortSetupTimerInterrupt+0x20>)
 8004656:	fba2 2303 	umull	r2, r3, r2, r3
 800465a:	099b      	lsrs	r3, r3, #6
 800465c:	3b01      	subs	r3, #1
 800465e:	4a05      	ldr	r2, [pc, #20]	; (8004674 <vPortSetupTimerInterrupt+0x24>)
 8004660:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004662:	4b05      	ldr	r3, [pc, #20]	; (8004678 <vPortSetupTimerInterrupt+0x28>)
 8004664:	2207      	movs	r2, #7
 8004666:	601a      	str	r2, [r3, #0]
}
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	2000000c 	.word	0x2000000c
 8004670:	10624dd3 	.word	0x10624dd3
 8004674:	e000e014 	.word	0xe000e014
 8004678:	e000e010 	.word	0xe000e010

0800467c <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800467c:	4b31      	ldr	r3, [pc, #196]	; (8004744 <xPortStartScheduler+0xc8>)
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	4b31      	ldr	r3, [pc, #196]	; (8004748 <xPortStartScheduler+0xcc>)
 8004682:	429a      	cmp	r2, r3
 8004684:	d00d      	beq.n	80046a2 <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004686:	4b2f      	ldr	r3, [pc, #188]	; (8004744 <xPortStartScheduler+0xc8>)
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	4b30      	ldr	r3, [pc, #192]	; (800474c <xPortStartScheduler+0xd0>)
 800468c:	429a      	cmp	r2, r3
 800468e:	d111      	bne.n	80046b4 <xPortStartScheduler+0x38>
	__asm volatile
 8004690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004694:	f383 8811 	msr	BASEPRI, r3
 8004698:	f3bf 8f6f 	isb	sy
 800469c:	f3bf 8f4f 	dsb	sy
 80046a0:	e7fe      	b.n	80046a0 <xPortStartScheduler+0x24>
 80046a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a6:	f383 8811 	msr	BASEPRI, r3
 80046aa:	f3bf 8f6f 	isb	sy
 80046ae:	f3bf 8f4f 	dsb	sy
 80046b2:	e7fe      	b.n	80046b2 <xPortStartScheduler+0x36>
{
 80046b4:	b500      	push	{lr}
 80046b6:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80046b8:	4b25      	ldr	r3, [pc, #148]	; (8004750 <xPortStartScheduler+0xd4>)
 80046ba:	781a      	ldrb	r2, [r3, #0]
 80046bc:	b2d2      	uxtb	r2, r2
 80046be:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80046c0:	22ff      	movs	r2, #255	; 0xff
 80046c2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80046cc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80046d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80046d4:	4a1f      	ldr	r2, [pc, #124]	; (8004754 <xPortStartScheduler+0xd8>)
 80046d6:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80046d8:	2307      	movs	r3, #7
 80046da:	6053      	str	r3, [r2, #4]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046dc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80046e0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80046e4:	d00a      	beq.n	80046fc <xPortStartScheduler+0x80>
			ulMaxPRIGROUPValue--;
 80046e6:	4a1b      	ldr	r2, [pc, #108]	; (8004754 <xPortStartScheduler+0xd8>)
 80046e8:	6853      	ldr	r3, [r2, #4]
 80046ea:	3b01      	subs	r3, #1
 80046ec:	6053      	str	r3, [r2, #4]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80046ee:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80046f2:	005b      	lsls	r3, r3, #1
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	f88d 3003 	strb.w	r3, [sp, #3]
 80046fa:	e7ef      	b.n	80046dc <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80046fc:	4a15      	ldr	r2, [pc, #84]	; (8004754 <xPortStartScheduler+0xd8>)
 80046fe:	6853      	ldr	r3, [r2, #4]
 8004700:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004702:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004706:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004708:	9b01      	ldr	r3, [sp, #4]
 800470a:	b2db      	uxtb	r3, r3
 800470c:	4a10      	ldr	r2, [pc, #64]	; (8004750 <xPortStartScheduler+0xd4>)
 800470e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004710:	4b11      	ldr	r3, [pc, #68]	; (8004758 <xPortStartScheduler+0xdc>)
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8004718:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8004720:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8004722:	f7ff ff95 	bl	8004650 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8004726:	4b0d      	ldr	r3, [pc, #52]	; (800475c <xPortStartScheduler+0xe0>)
 8004728:	2200      	movs	r2, #0
 800472a:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 800472c:	f7ff fed4 	bl	80044d8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004730:	4a0b      	ldr	r2, [pc, #44]	; (8004760 <xPortStartScheduler+0xe4>)
 8004732:	6813      	ldr	r3, [r2, #0]
 8004734:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004738:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 800473a:	f7ff febd 	bl	80044b8 <prvPortStartFirstTask>
	prvTaskExitError();
 800473e:	f7ff fea1 	bl	8004484 <prvTaskExitError>
 8004742:	bf00      	nop
 8004744:	e000ed00 	.word	0xe000ed00
 8004748:	410fc271 	.word	0x410fc271
 800474c:	410fc270 	.word	0x410fc270
 8004750:	e000e400 	.word	0xe000e400
 8004754:	20000158 	.word	0x20000158
 8004758:	e000ed20 	.word	0xe000ed20
 800475c:	20000008 	.word	0x20000008
 8004760:	e000ef34 	.word	0xe000ef34

08004764 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004764:	4a10      	ldr	r2, [pc, #64]	; (80047a8 <prvHeapInit+0x44>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004766:	f012 0f07 	tst.w	r2, #7
 800476a:	d01a      	beq.n	80047a2 <prvHeapInit+0x3e>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800476c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800476e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004772:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 8004776:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004778:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800477a:	490c      	ldr	r1, [pc, #48]	; (80047ac <prvHeapInit+0x48>)
 800477c:	600a      	str	r2, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800477e:	2000      	movs	r0, #0
 8004780:	6048      	str	r0, [r1, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004782:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8004784:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004786:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800478a:	608b      	str	r3, [r1, #8]
	pxEnd->xBlockSize = 0;
 800478c:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800478e:	6018      	str	r0, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004790:	1a98      	subs	r0, r3, r2
 8004792:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004794:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004796:	60c8      	str	r0, [r1, #12]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004798:	6108      	str	r0, [r1, #16]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800479a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800479e:	614b      	str	r3, [r1, #20]
}
 80047a0:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80047a2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80047a6:	e7e8      	b.n	800477a <prvHeapInit+0x16>
 80047a8:	20000178 	.word	0x20000178
 80047ac:	20000160 	.word	0x20000160

080047b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80047b0:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80047b2:	4b13      	ldr	r3, [pc, #76]	; (8004800 <prvInsertBlockIntoFreeList+0x50>)
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	4282      	cmp	r2, r0
 80047b8:	d31b      	bcc.n	80047f2 <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80047ba:	6859      	ldr	r1, [r3, #4]
 80047bc:	185c      	adds	r4, r3, r1
 80047be:	4284      	cmp	r4, r0
 80047c0:	d103      	bne.n	80047ca <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80047c2:	6840      	ldr	r0, [r0, #4]
 80047c4:	4401      	add	r1, r0
 80047c6:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 80047c8:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80047ca:	6841      	ldr	r1, [r0, #4]
 80047cc:	1844      	adds	r4, r0, r1
 80047ce:	42a2      	cmp	r2, r4
 80047d0:	d113      	bne.n	80047fa <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80047d2:	4c0b      	ldr	r4, [pc, #44]	; (8004800 <prvInsertBlockIntoFreeList+0x50>)
 80047d4:	68a4      	ldr	r4, [r4, #8]
 80047d6:	42a2      	cmp	r2, r4
 80047d8:	d00d      	beq.n	80047f6 <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80047da:	6852      	ldr	r2, [r2, #4]
 80047dc:	4411      	add	r1, r2
 80047de:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	6812      	ldr	r2, [r2, #0]
 80047e4:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80047e6:	4298      	cmp	r0, r3
 80047e8:	d000      	beq.n	80047ec <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80047ea:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047f0:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80047f2:	4613      	mov	r3, r2
 80047f4:	e7de      	b.n	80047b4 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80047f6:	6004      	str	r4, [r0, #0]
 80047f8:	e7f5      	b.n	80047e6 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80047fa:	6002      	str	r2, [r0, #0]
 80047fc:	e7f3      	b.n	80047e6 <prvInsertBlockIntoFreeList+0x36>
 80047fe:	bf00      	nop
 8004800:	20000160 	.word	0x20000160

08004804 <pvPortMalloc>:
{
 8004804:	b570      	push	{r4, r5, r6, lr}
 8004806:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8004808:	f7ff fc88 	bl	800411c <vTaskSuspendAll>
		if( pxEnd == NULL )
 800480c:	4b39      	ldr	r3, [pc, #228]	; (80048f4 <pvPortMalloc+0xf0>)
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	b1bb      	cbz	r3, 8004842 <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004812:	4b38      	ldr	r3, [pc, #224]	; (80048f4 <pvPortMalloc+0xf0>)
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	421c      	tst	r4, r3
 8004818:	d162      	bne.n	80048e0 <pvPortMalloc+0xdc>
			if( xWantedSize > 0 )
 800481a:	b1ac      	cbz	r4, 8004848 <pvPortMalloc+0x44>
				xWantedSize += xHeapStructSize;
 800481c:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800481e:	f014 0f07 	tst.w	r4, #7
 8004822:	d011      	beq.n	8004848 <pvPortMalloc+0x44>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004824:	f024 0407 	bic.w	r4, r4, #7
 8004828:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800482a:	f004 0307 	and.w	r3, r4, #7
 800482e:	b15b      	cbz	r3, 8004848 <pvPortMalloc+0x44>
 8004830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004834:	f383 8811 	msr	BASEPRI, r3
 8004838:	f3bf 8f6f 	isb	sy
 800483c:	f3bf 8f4f 	dsb	sy
 8004840:	e7fe      	b.n	8004840 <pvPortMalloc+0x3c>
			prvHeapInit();
 8004842:	f7ff ff8f 	bl	8004764 <prvHeapInit>
 8004846:	e7e4      	b.n	8004812 <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004848:	2c00      	cmp	r4, #0
 800484a:	d04b      	beq.n	80048e4 <pvPortMalloc+0xe0>
 800484c:	4b29      	ldr	r3, [pc, #164]	; (80048f4 <pvPortMalloc+0xf0>)
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	42a3      	cmp	r3, r4
 8004852:	d349      	bcc.n	80048e8 <pvPortMalloc+0xe4>
				pxBlock = xStart.pxNextFreeBlock;
 8004854:	4b27      	ldr	r3, [pc, #156]	; (80048f4 <pvPortMalloc+0xf0>)
 8004856:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004858:	e001      	b.n	800485e <pvPortMalloc+0x5a>
					pxPreviousBlock = pxBlock;
 800485a:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 800485c:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800485e:	686a      	ldr	r2, [r5, #4]
 8004860:	42a2      	cmp	r2, r4
 8004862:	d202      	bcs.n	800486a <pvPortMalloc+0x66>
 8004864:	682a      	ldr	r2, [r5, #0]
 8004866:	2a00      	cmp	r2, #0
 8004868:	d1f7      	bne.n	800485a <pvPortMalloc+0x56>
				if( pxBlock != pxEnd )
 800486a:	4a22      	ldr	r2, [pc, #136]	; (80048f4 <pvPortMalloc+0xf0>)
 800486c:	6892      	ldr	r2, [r2, #8]
 800486e:	42aa      	cmp	r2, r5
 8004870:	d03c      	beq.n	80048ec <pvPortMalloc+0xe8>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004872:	681e      	ldr	r6, [r3, #0]
 8004874:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004876:	682a      	ldr	r2, [r5, #0]
 8004878:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800487a:	686b      	ldr	r3, [r5, #4]
 800487c:	1b1b      	subs	r3, r3, r4
 800487e:	2b10      	cmp	r3, #16
 8004880:	d910      	bls.n	80048a4 <pvPortMalloc+0xa0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004882:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004884:	f010 0f07 	tst.w	r0, #7
 8004888:	d008      	beq.n	800489c <pvPortMalloc+0x98>
 800488a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488e:	f383 8811 	msr	BASEPRI, r3
 8004892:	f3bf 8f6f 	isb	sy
 8004896:	f3bf 8f4f 	dsb	sy
 800489a:	e7fe      	b.n	800489a <pvPortMalloc+0x96>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800489c:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800489e:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80048a0:	f7ff ff86 	bl	80047b0 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80048a4:	6869      	ldr	r1, [r5, #4]
 80048a6:	4a13      	ldr	r2, [pc, #76]	; (80048f4 <pvPortMalloc+0xf0>)
 80048a8:	6913      	ldr	r3, [r2, #16]
 80048aa:	1a5b      	subs	r3, r3, r1
 80048ac:	6113      	str	r3, [r2, #16]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80048ae:	68d2      	ldr	r2, [r2, #12]
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d201      	bcs.n	80048b8 <pvPortMalloc+0xb4>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80048b4:	4a0f      	ldr	r2, [pc, #60]	; (80048f4 <pvPortMalloc+0xf0>)
 80048b6:	60d3      	str	r3, [r2, #12]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80048b8:	4b0e      	ldr	r3, [pc, #56]	; (80048f4 <pvPortMalloc+0xf0>)
 80048ba:	695b      	ldr	r3, [r3, #20]
 80048bc:	430b      	orrs	r3, r1
 80048be:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80048c0:	2300      	movs	r3, #0
 80048c2:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80048c4:	f7ff fcba 	bl	800423c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80048c8:	f016 0f07 	tst.w	r6, #7
 80048cc:	d010      	beq.n	80048f0 <pvPortMalloc+0xec>
 80048ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d2:	f383 8811 	msr	BASEPRI, r3
 80048d6:	f3bf 8f6f 	isb	sy
 80048da:	f3bf 8f4f 	dsb	sy
 80048de:	e7fe      	b.n	80048de <pvPortMalloc+0xda>
void *pvReturn = NULL;
 80048e0:	2600      	movs	r6, #0
 80048e2:	e7ef      	b.n	80048c4 <pvPortMalloc+0xc0>
 80048e4:	2600      	movs	r6, #0
 80048e6:	e7ed      	b.n	80048c4 <pvPortMalloc+0xc0>
 80048e8:	2600      	movs	r6, #0
 80048ea:	e7eb      	b.n	80048c4 <pvPortMalloc+0xc0>
 80048ec:	2600      	movs	r6, #0
 80048ee:	e7e9      	b.n	80048c4 <pvPortMalloc+0xc0>
}
 80048f0:	4630      	mov	r0, r6
 80048f2:	bd70      	pop	{r4, r5, r6, pc}
 80048f4:	20000160 	.word	0x20000160

080048f8 <vPortFree>:
	if( pv != NULL )
 80048f8:	b380      	cbz	r0, 800495c <vPortFree+0x64>
{
 80048fa:	b538      	push	{r3, r4, r5, lr}
 80048fc:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 80048fe:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004902:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8004906:	4916      	ldr	r1, [pc, #88]	; (8004960 <vPortFree+0x68>)
 8004908:	6949      	ldr	r1, [r1, #20]
 800490a:	420a      	tst	r2, r1
 800490c:	d108      	bne.n	8004920 <vPortFree+0x28>
 800490e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004912:	f383 8811 	msr	BASEPRI, r3
 8004916:	f3bf 8f6f 	isb	sy
 800491a:	f3bf 8f4f 	dsb	sy
 800491e:	e7fe      	b.n	800491e <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004920:	f850 0c08 	ldr.w	r0, [r0, #-8]
 8004924:	b140      	cbz	r0, 8004938 <vPortFree+0x40>
 8004926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800492a:	f383 8811 	msr	BASEPRI, r3
 800492e:	f3bf 8f6f 	isb	sy
 8004932:	f3bf 8f4f 	dsb	sy
 8004936:	e7fe      	b.n	8004936 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004938:	ea22 0201 	bic.w	r2, r2, r1
 800493c:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 8004940:	f7ff fbec 	bl	800411c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004944:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8004948:	4a05      	ldr	r2, [pc, #20]	; (8004960 <vPortFree+0x68>)
 800494a:	6913      	ldr	r3, [r2, #16]
 800494c:	440b      	add	r3, r1
 800494e:	6113      	str	r3, [r2, #16]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004950:	4628      	mov	r0, r5
 8004952:	f7ff ff2d 	bl	80047b0 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8004956:	f7ff fc71 	bl	800423c <xTaskResumeAll>
}
 800495a:	bd38      	pop	{r3, r4, r5, pc}
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	20000160 	.word	0x20000160

08004964 <QuatConvData>:
	return HAL_I2C_Mem_Read_IT(pI2CHandle, BNO055_I2C_ADDR1, BNO055_QUATERNION_DATA_W_LSB_ADDR, 1, i2cRxBuf, 8);
}

static void QuatConvData(void)
{
	qw = (int16_t)(i2cRxBuf[0] | ((uint16_t)i2cRxBuf[1] << 8));
 8004964:	4b0c      	ldr	r3, [pc, #48]	; (8004998 <QuatConvData+0x34>)
 8004966:	781a      	ldrb	r2, [r3, #0]
 8004968:	7859      	ldrb	r1, [r3, #1]
 800496a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800496e:	b212      	sxth	r2, r2
 8004970:	811a      	strh	r2, [r3, #8]
	qx = (int16_t)(i2cRxBuf[2] | ((uint16_t)i2cRxBuf[3] << 8));
 8004972:	7899      	ldrb	r1, [r3, #2]
 8004974:	78da      	ldrb	r2, [r3, #3]
 8004976:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 800497a:	b209      	sxth	r1, r1
 800497c:	8159      	strh	r1, [r3, #10]
	qy = (int16_t)(i2cRxBuf[3] | ((uint16_t)i2cRxBuf[5] << 8));
 800497e:	7959      	ldrb	r1, [r3, #5]
 8004980:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004984:	b212      	sxth	r2, r2
 8004986:	819a      	strh	r2, [r3, #12]
	qz = (int16_t)(i2cRxBuf[4] | ((uint16_t)i2cRxBuf[7] << 8));
 8004988:	791a      	ldrb	r2, [r3, #4]
 800498a:	79d9      	ldrb	r1, [r3, #7]
 800498c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004990:	b212      	sxth	r2, r2
 8004992:	81da      	strh	r2, [r3, #14]
}
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	20003d78 	.word	0x20003d78

0800499c <BNO_Write>:
{
 800499c:	b500      	push	{lr}
 800499e:	b085      	sub	sp, #20
	TxBuff[0] = WriteAddr;
 80049a0:	f88d 100c 	strb.w	r1, [sp, #12]
	TxBuff[1] = buffer;
 80049a4:	f88d 000d 	strb.w	r0, [sp, #13]
	HAL_I2C_Master_Transmit(pI2CHandle, BNO055_I2C_ADDR1, TxBuff, 2, 50);
 80049a8:	4b05      	ldr	r3, [pc, #20]	; (80049c0 <BNO_Write+0x24>)
 80049aa:	6918      	ldr	r0, [r3, #16]
 80049ac:	2332      	movs	r3, #50	; 0x32
 80049ae:	9300      	str	r3, [sp, #0]
 80049b0:	2302      	movs	r3, #2
 80049b2:	aa03      	add	r2, sp, #12
 80049b4:	2128      	movs	r1, #40	; 0x28
 80049b6:	f7fc fffd 	bl	80019b4 <HAL_I2C_Master_Transmit>
}
 80049ba:	b005      	add	sp, #20
 80049bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80049c0:	20003d78 	.word	0x20003d78

080049c4 <BNO_Init>:
{
 80049c4:	b508      	push	{r3, lr}
	BNO_Write( BNO055_POWER_MODE_NORMAL,BNO055_PWR_MODE_ADDR);
 80049c6:	213e      	movs	r1, #62	; 0x3e
 80049c8:	2000      	movs	r0, #0
 80049ca:	f7ff ffe7 	bl	800499c <BNO_Write>
	BNO_Write( BNO055_OPERATION_MODE_NDOF,BNO055_OPR_MODE_ADDR);
 80049ce:	213d      	movs	r1, #61	; 0x3d
 80049d0:	200c      	movs	r0, #12
 80049d2:	f7ff ffe3 	bl	800499c <BNO_Write>
}
 80049d6:	bd08      	pop	{r3, pc}

080049d8 <QuatRead>:
{
 80049d8:	b500      	push	{lr}
 80049da:	b083      	sub	sp, #12
	return HAL_I2C_Mem_Read_IT(pI2CHandle, BNO055_I2C_ADDR1, BNO055_QUATERNION_DATA_W_LSB_ADDR, 1, i2cRxBuf, 8);
 80049dc:	4b06      	ldr	r3, [pc, #24]	; (80049f8 <QuatRead+0x20>)
 80049de:	6918      	ldr	r0, [r3, #16]
 80049e0:	2208      	movs	r2, #8
 80049e2:	9201      	str	r2, [sp, #4]
 80049e4:	9300      	str	r3, [sp, #0]
 80049e6:	2301      	movs	r3, #1
 80049e8:	2220      	movs	r2, #32
 80049ea:	2128      	movs	r1, #40	; 0x28
 80049ec:	f7fd f8a4 	bl	8001b38 <HAL_I2C_Mem_Read_IT>
}
 80049f0:	b003      	add	sp, #12
 80049f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80049f6:	bf00      	nop
 80049f8:	20003d78 	.word	0x20003d78

080049fc <ReadI2CSens>:
{
 80049fc:	b508      	push	{r3, lr}
	switch(eI2CSensorReadState)
 80049fe:	4b0c      	ldr	r3, [pc, #48]	; (8004a30 <ReadI2CSens+0x34>)
 8004a00:	7d1b      	ldrb	r3, [r3, #20]
 8004a02:	b12b      	cbz	r3, 8004a10 <ReadI2CSens+0x14>
 8004a04:	2b04      	cmp	r3, #4
 8004a06:	d00c      	beq.n	8004a22 <ReadI2CSens+0x26>
		eI2CSensorReadState = eSenRead_Idle;
 8004a08:	4b09      	ldr	r3, [pc, #36]	; (8004a30 <ReadI2CSens+0x34>)
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	751a      	strb	r2, [r3, #20]
}
 8004a0e:	e005      	b.n	8004a1c <ReadI2CSens+0x20>
		HalResultL = QuatRead();
 8004a10:	f7ff ffe2 	bl	80049d8 <QuatRead>
		eI2CSensorReadState = (HAL_OK == HalResultL) ? eSenRed_Quat : eSenRead_Idle;
 8004a14:	b118      	cbz	r0, 8004a1e <ReadI2CSens+0x22>
 8004a16:	2200      	movs	r2, #0
 8004a18:	4b05      	ldr	r3, [pc, #20]	; (8004a30 <ReadI2CSens+0x34>)
 8004a1a:	751a      	strb	r2, [r3, #20]
}
 8004a1c:	bd08      	pop	{r3, pc}
		eI2CSensorReadState = (HAL_OK == HalResultL) ? eSenRed_Quat : eSenRead_Idle;
 8004a1e:	2204      	movs	r2, #4
 8004a20:	e7fa      	b.n	8004a18 <ReadI2CSens+0x1c>
		QuatConvData();
 8004a22:	f7ff ff9f 	bl	8004964 <QuatConvData>
		eI2CSensorReadState = eSenRead_Idle;
 8004a26:	4b02      	ldr	r3, [pc, #8]	; (8004a30 <ReadI2CSens+0x34>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	751a      	strb	r2, [r3, #20]
		break;
 8004a2c:	e7f6      	b.n	8004a1c <ReadI2CSens+0x20>
 8004a2e:	bf00      	nop
 8004a30:	20003d78 	.word	0x20003d78

08004a34 <BNO055_Init>:
{
 8004a34:	b508      	push	{r3, lr}
	pI2CHandle = pI2CHandleP;
 8004a36:	4b02      	ldr	r3, [pc, #8]	; (8004a40 <BNO055_Init+0xc>)
 8004a38:	6118      	str	r0, [r3, #16]
	BNO_Init();
 8004a3a:	f7ff ffc3 	bl	80049c4 <BNO_Init>
}
 8004a3e:	bd08      	pop	{r3, pc}
 8004a40:	20003d78 	.word	0x20003d78

08004a44 <BNO055_MainFunction>:
{
 8004a44:	b508      	push	{r3, lr}
	ReadI2CSens();
 8004a46:	f7ff ffd9 	bl	80049fc <ReadI2CSens>
}
 8004a4a:	bd08      	pop	{r3, pc}

08004a4c <HAL_I2C_MemRxCpltCallback>:
{
 8004a4c:	b508      	push	{r3, lr}
	ReadI2CSens();
 8004a4e:	f7ff ffd5 	bl	80049fc <ReadI2CSens>
}
 8004a52:	bd08      	pop	{r3, pc}

08004a54 <EXTI1_IRQHandler>:
static SPI_HandleTypeDef * pSPIHandle;

/* Public functions --------------------------------------------------------------------------------------------------------------------*/
void EXTI1_IRQHandler(void)
{
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_1);
 8004a54:	4b01      	ldr	r3, [pc, #4]	; (8004a5c <EXTI1_IRQHandler+0x8>)
 8004a56:	2202      	movs	r2, #2
 8004a58:	615a      	str	r2, [r3, #20]

	//L3GD20_ReadXYZ();
}
 8004a5a:	4770      	bx	lr
 8004a5c:	40013c00 	.word	0x40013c00

08004a60 <Madgwick_Task>:
float flGyroXL, flGyroYL, flGyroZL;
float flAccelXL, flAccelYL, flAccelZL;
float flMagnXL, flMagnYL, flMagnZL;

void Madgwick_Task(void *pvParameters)
{
 8004a60:	b508      	push	{r3, lr}
//	mahony_init();
	boolean bCalibDoneL = cFalse;

	for(;;)
	{
		BNO055_MainFunction();
 8004a62:	f7ff ffef 	bl	8004a44 <BNO055_MainFunction>
//		{
//			HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin , GPIO_PIN_RESET);
//			blink = 0;
//		}

		vTaskDelay(xDelay);
 8004a66:	200a      	movs	r0, #10
 8004a68:	f7ff fc60 	bl	800432c <vTaskDelay>
 8004a6c:	e7f9      	b.n	8004a62 <Madgwick_Task+0x2>
	...

08004a70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a74:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a76:	2400      	movs	r4, #0
 8004a78:	9407      	str	r4, [sp, #28]
 8004a7a:	9408      	str	r4, [sp, #32]
 8004a7c:	9409      	str	r4, [sp, #36]	; 0x24
 8004a7e:	940a      	str	r4, [sp, #40]	; 0x28
 8004a80:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004a82:	9401      	str	r4, [sp, #4]
 8004a84:	4b56      	ldr	r3, [pc, #344]	; (8004be0 <MX_GPIO_Init+0x170>)
 8004a86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a88:	f042 0210 	orr.w	r2, r2, #16
 8004a8c:	631a      	str	r2, [r3, #48]	; 0x30
 8004a8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a90:	f002 0210 	and.w	r2, r2, #16
 8004a94:	9201      	str	r2, [sp, #4]
 8004a96:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a98:	9402      	str	r4, [sp, #8]
 8004a9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a9c:	f042 0204 	orr.w	r2, r2, #4
 8004aa0:	631a      	str	r2, [r3, #48]	; 0x30
 8004aa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004aa4:	f002 0204 	and.w	r2, r2, #4
 8004aa8:	9202      	str	r2, [sp, #8]
 8004aaa:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004aac:	9403      	str	r4, [sp, #12]
 8004aae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ab0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ab4:	631a      	str	r2, [r3, #48]	; 0x30
 8004ab6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ab8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004abc:	9203      	str	r2, [sp, #12]
 8004abe:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ac0:	9404      	str	r4, [sp, #16]
 8004ac2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ac4:	f042 0201 	orr.w	r2, r2, #1
 8004ac8:	631a      	str	r2, [r3, #48]	; 0x30
 8004aca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004acc:	f002 0201 	and.w	r2, r2, #1
 8004ad0:	9204      	str	r2, [sp, #16]
 8004ad2:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ad4:	9405      	str	r4, [sp, #20]
 8004ad6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ad8:	f042 0202 	orr.w	r2, r2, #2
 8004adc:	631a      	str	r2, [r3, #48]	; 0x30
 8004ade:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ae0:	f002 0202 	and.w	r2, r2, #2
 8004ae4:	9205      	str	r2, [sp, #20]
 8004ae6:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ae8:	9406      	str	r4, [sp, #24]
 8004aea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004aec:	f042 0208 	orr.w	r2, r2, #8
 8004af0:	631a      	str	r2, [r3, #48]	; 0x30
 8004af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af4:	f003 0308 	and.w	r3, r3, #8
 8004af8:	9306      	str	r3, [sp, #24]
 8004afa:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8004afc:	4e39      	ldr	r6, [pc, #228]	; (8004be4 <MX_GPIO_Init+0x174>)
 8004afe:	4622      	mov	r2, r4
 8004b00:	2108      	movs	r1, #8
 8004b02:	4630      	mov	r0, r6
 8004b04:	f7fc f81e 	bl	8000b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8004b08:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 8004bf0 <MX_GPIO_Init+0x180>
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	4611      	mov	r1, r2
 8004b10:	4658      	mov	r0, fp
 8004b12:	f7fc f817 	bl	8000b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8004b16:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8004bf4 <MX_GPIO_Init+0x184>
 8004b1a:	4622      	mov	r2, r4
 8004b1c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8004b20:	4640      	mov	r0, r8
 8004b22:	f7fc f80f 	bl	8000b44 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE4 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_1;
 8004b26:	2316      	movs	r3, #22
 8004b28:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004b2a:	4b2f      	ldr	r3, [pc, #188]	; (8004be8 <MX_GPIO_Init+0x178>)
 8004b2c:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b2e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004b30:	a907      	add	r1, sp, #28
 8004b32:	4630      	mov	r0, r6
 8004b34:	f7fb ff34 	bl	80009a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8004b38:	2708      	movs	r7, #8
 8004b3a:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b3c:	2501      	movs	r5, #1
 8004b3e:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b40:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b42:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8004b44:	a907      	add	r1, sp, #28
 8004b46:	4630      	mov	r0, r6
 8004b48:	f7fb ff2a 	bl	80009a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT2_Pin */
  GPIO_InitStruct.Pin = INT2_Pin;
 8004b4c:	f04f 0920 	mov.w	r9, #32
 8004b50:	f8cd 901c 	str.w	r9, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004b54:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 8004bf8 <MX_GPIO_Init+0x188>
 8004b58:	f8cd a020 	str.w	sl, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b5c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(INT2_GPIO_Port, &GPIO_InitStruct);
 8004b5e:	a907      	add	r1, sp, #28
 8004b60:	4630      	mov	r0, r6
 8004b62:	f7fb ff1d 	bl	80009a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8004b66:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b68:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b6a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b6c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8004b6e:	a907      	add	r1, sp, #28
 8004b70:	4658      	mov	r0, fp
 8004b72:	f7fb ff15 	bl	80009a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004b76:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004b78:	f8cd a020 	str.w	sl, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b7c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b7e:	a907      	add	r1, sp, #28
 8004b80:	481a      	ldr	r0, [pc, #104]	; (8004bec <MX_GPIO_Init+0x17c>)
 8004b82:	f7fb ff0d 	bl	80009a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8004b86:	f24f 0310 	movw	r3, #61456	; 0xf010
 8004b8a:	9307      	str	r3, [sp, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b8c:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b8e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b90:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b92:	a907      	add	r1, sp, #28
 8004b94:	4640      	mov	r0, r8
 8004b96:	f7fb ff03 	bl	80009a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8004b9a:	f8cd 901c 	str.w	r9, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b9e:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ba0:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004ba2:	a907      	add	r1, sp, #28
 8004ba4:	4640      	mov	r0, r8
 8004ba6:	f7fb fefb 	bl	80009a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8004baa:	4622      	mov	r2, r4
 8004bac:	2105      	movs	r1, #5
 8004bae:	2007      	movs	r0, #7
 8004bb0:	f7fb fce8 	bl	8000584 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8004bb4:	2007      	movs	r0, #7
 8004bb6:	f7fb fd19 	bl	80005ec <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8004bba:	4622      	mov	r2, r4
 8004bbc:	2105      	movs	r1, #5
 8004bbe:	4638      	mov	r0, r7
 8004bc0:	f7fb fce0 	bl	8000584 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8004bc4:	4638      	mov	r0, r7
 8004bc6:	f7fb fd11 	bl	80005ec <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8004bca:	4622      	mov	r2, r4
 8004bcc:	2105      	movs	r1, #5
 8004bce:	200a      	movs	r0, #10
 8004bd0:	f7fb fcd8 	bl	8000584 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004bd4:	200a      	movs	r0, #10
 8004bd6:	f7fb fd09 	bl	80005ec <HAL_NVIC_EnableIRQ>

}
 8004bda:	b00d      	add	sp, #52	; 0x34
 8004bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004be0:	40023800 	.word	0x40023800
 8004be4:	40021000 	.word	0x40021000
 8004be8:	10110000 	.word	0x10110000
 8004bec:	40020000 	.word	0x40020000
 8004bf0:	40020800 	.word	0x40020800
 8004bf4:	40020c00 	.word	0x40020c00
 8004bf8:	10120000 	.word	0x10120000

08004bfc <MX_DMA_Init>:
{
 8004bfc:	b510      	push	{r4, lr}
 8004bfe:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004c00:	2400      	movs	r4, #0
 8004c02:	9400      	str	r4, [sp, #0]
 8004c04:	4b16      	ldr	r3, [pc, #88]	; (8004c60 <MX_DMA_Init+0x64>)
 8004c06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c08:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8004c0c:	631a      	str	r2, [r3, #48]	; 0x30
 8004c0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c10:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004c14:	9200      	str	r2, [sp, #0]
 8004c16:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004c18:	9401      	str	r4, [sp, #4]
 8004c1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c1c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004c20:	631a      	str	r2, [r3, #48]	; 0x30
 8004c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c28:	9301      	str	r3, [sp, #4]
 8004c2a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8004c2c:	4622      	mov	r2, r4
 8004c2e:	2105      	movs	r1, #5
 8004c30:	200b      	movs	r0, #11
 8004c32:	f7fb fca7 	bl	8000584 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8004c36:	200b      	movs	r0, #11
 8004c38:	f7fb fcd8 	bl	80005ec <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8004c3c:	4622      	mov	r2, r4
 8004c3e:	2105      	movs	r1, #5
 8004c40:	2038      	movs	r0, #56	; 0x38
 8004c42:	f7fb fc9f 	bl	8000584 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004c46:	2038      	movs	r0, #56	; 0x38
 8004c48:	f7fb fcd0 	bl	80005ec <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8004c4c:	4622      	mov	r2, r4
 8004c4e:	2105      	movs	r1, #5
 8004c50:	203a      	movs	r0, #58	; 0x3a
 8004c52:	f7fb fc97 	bl	8000584 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004c56:	203a      	movs	r0, #58	; 0x3a
 8004c58:	f7fb fcc8 	bl	80005ec <HAL_NVIC_EnableIRQ>
}
 8004c5c:	b002      	add	sp, #8
 8004c5e:	bd10      	pop	{r4, pc}
 8004c60:	40023800 	.word	0x40023800

08004c64 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8004c64:	b508      	push	{r3, lr}

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(10000);
 8004c66:	f242 7010 	movw	r0, #10000	; 0x2710
 8004c6a:	f7ff f879 	bl	8003d60 <osDelay>
 8004c6e:	e7fa      	b.n	8004c66 <StartDefaultTask+0x2>

08004c70 <EXTI2_IRQHandler>:
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_2);
 8004c70:	4b01      	ldr	r3, [pc, #4]	; (8004c78 <EXTI2_IRQHandler+0x8>)
 8004c72:	2204      	movs	r2, #4
 8004c74:	615a      	str	r2, [r3, #20]
}
 8004c76:	4770      	bx	lr
 8004c78:	40013c00 	.word	0x40013c00

08004c7c <EXTI4_IRQHandler>:
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8004c7c:	4b01      	ldr	r3, [pc, #4]	; (8004c84 <EXTI4_IRQHandler+0x8>)
 8004c7e:	2210      	movs	r2, #16
 8004c80:	615a      	str	r2, [r3, #20]
}
 8004c82:	4770      	bx	lr
 8004c84:	40013c00 	.word	0x40013c00

08004c88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c88:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8004c8a:	6802      	ldr	r2, [r0, #0]
 8004c8c:	4b03      	ldr	r3, [pc, #12]	; (8004c9c <HAL_TIM_PeriodElapsedCallback+0x14>)
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d000      	beq.n	8004c94 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004c92:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8004c94:	f7fb fc3e 	bl	8000514 <HAL_IncTick>
}
 8004c98:	e7fb      	b.n	8004c92 <HAL_TIM_PeriodElapsedCallback+0xa>
 8004c9a:	bf00      	nop
 8004c9c:	40014800 	.word	0x40014800

08004ca0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004ca0:	e7fe      	b.n	8004ca0 <Error_Handler>
	...

08004ca4 <MX_I2C1_Init>:
{
 8004ca4:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8004ca6:	480a      	ldr	r0, [pc, #40]	; (8004cd0 <MX_I2C1_Init+0x2c>)
 8004ca8:	4b0a      	ldr	r3, [pc, #40]	; (8004cd4 <MX_I2C1_Init+0x30>)
 8004caa:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004cac:	4b0a      	ldr	r3, [pc, #40]	; (8004cd8 <MX_I2C1_Init+0x34>)
 8004cae:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004cb4:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004cb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004cba:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004cbc:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004cbe:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004cc0:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004cc2:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004cc4:	f7fc fde8 	bl	8001898 <HAL_I2C_Init>
 8004cc8:	b900      	cbnz	r0, 8004ccc <MX_I2C1_Init+0x28>
}
 8004cca:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004ccc:	f7ff ffe8 	bl	8004ca0 <Error_Handler>
 8004cd0:	20003da0 	.word	0x20003da0
 8004cd4:	40005400 	.word	0x40005400
 8004cd8:	000186a0 	.word	0x000186a0

08004cdc <MX_SPI1_Init>:
{
 8004cdc:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 8004cde:	480d      	ldr	r0, [pc, #52]	; (8004d14 <MX_SPI1_Init+0x38>)
 8004ce0:	4b0d      	ldr	r3, [pc, #52]	; (8004d18 <MX_SPI1_Init+0x3c>)
 8004ce2:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004ce4:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004ce8:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004cea:	2300      	movs	r3, #0
 8004cec:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004cee:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004cf0:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004cf2:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004cf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cf8:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004cfa:	2210      	movs	r2, #16
 8004cfc:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004cfe:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004d00:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d02:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004d04:	230a      	movs	r3, #10
 8004d06:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004d08:	f7fe fba2 	bl	8003450 <HAL_SPI_Init>
 8004d0c:	b900      	cbnz	r0, 8004d10 <MX_SPI1_Init+0x34>
}
 8004d0e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004d10:	f7ff ffc6 	bl	8004ca0 <Error_Handler>
 8004d14:	20003e98 	.word	0x20003e98
 8004d18:	40013000 	.word	0x40013000

08004d1c <MX_USB_OTG_FS_HCD_Init>:
{
 8004d1c:	b508      	push	{r3, lr}
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004d1e:	4809      	ldr	r0, [pc, #36]	; (8004d44 <MX_USB_OTG_FS_HCD_Init+0x28>)
 8004d20:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004d24:	6003      	str	r3, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8004d26:	2308      	movs	r3, #8
 8004d28:	6083      	str	r3, [r0, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	60c3      	str	r3, [r0, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8004d32:	2202      	movs	r2, #2
 8004d34:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8004d36:	61c3      	str	r3, [r0, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8004d38:	f7fb ff48 	bl	8000bcc <HAL_HCD_Init>
 8004d3c:	b900      	cbnz	r0, 8004d40 <MX_USB_OTG_FS_HCD_Init+0x24>
}
 8004d3e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004d40:	f7ff ffae 	bl	8004ca0 <Error_Handler>
 8004d44:	20003ef4 	.word	0x20003ef4

08004d48 <MX_I2S2_Init>:
{
 8004d48:	b508      	push	{r3, lr}
  hi2s2.Instance = SPI2;
 8004d4a:	480b      	ldr	r0, [pc, #44]	; (8004d78 <MX_I2S2_Init+0x30>)
 8004d4c:	4b0b      	ldr	r3, [pc, #44]	; (8004d7c <MX_I2S2_Init+0x34>)
 8004d4e:	6003      	str	r3, [r0, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8004d50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d54:	6043      	str	r3, [r0, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8004d56:	2300      	movs	r3, #0
 8004d58:	6083      	str	r3, [r0, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8004d5a:	60c3      	str	r3, [r0, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8004d5c:	6103      	str	r3, [r0, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8004d5e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8004d62:	6142      	str	r2, [r0, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8004d64:	6183      	str	r3, [r0, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8004d66:	61c3      	str	r3, [r0, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	6203      	str	r3, [r0, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8004d6c:	f7fd fc78 	bl	8002660 <HAL_I2S_Init>
 8004d70:	b900      	cbnz	r0, 8004d74 <MX_I2S2_Init+0x2c>
}
 8004d72:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004d74:	f7ff ff94 	bl	8004ca0 <Error_Handler>
 8004d78:	20004254 	.word	0x20004254
 8004d7c:	40003800 	.word	0x40003800

08004d80 <MX_I2S3_Init>:
{
 8004d80:	b508      	push	{r3, lr}
  hi2s3.Instance = SPI3;
 8004d82:	480b      	ldr	r0, [pc, #44]	; (8004db0 <MX_I2S3_Init+0x30>)
 8004d84:	4b0b      	ldr	r3, [pc, #44]	; (8004db4 <MX_I2S3_Init+0x34>)
 8004d86:	6003      	str	r3, [r0, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8004d88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d8c:	6042      	str	r2, [r0, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	6083      	str	r3, [r0, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8004d92:	60c3      	str	r3, [r0, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8004d94:	6102      	str	r2, [r0, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8004d96:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8004d9a:	6142      	str	r2, [r0, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8004d9c:	6183      	str	r3, [r0, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8004d9e:	61c3      	str	r3, [r0, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8004da0:	6203      	str	r3, [r0, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8004da2:	f7fd fc5d 	bl	8002660 <HAL_I2S_Init>
 8004da6:	b900      	cbnz	r0, 8004daa <MX_I2S3_Init+0x2a>
}
 8004da8:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004daa:	f7ff ff79 	bl	8004ca0 <Error_Handler>
 8004dae:	bf00      	nop
 8004db0:	2000429c 	.word	0x2000429c
 8004db4:	40003c00 	.word	0x40003c00

08004db8 <SystemClock_Config>:
{
 8004db8:	b500      	push	{lr}
 8004dba:	b09b      	sub	sp, #108	; 0x6c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004dbc:	2230      	movs	r2, #48	; 0x30
 8004dbe:	2100      	movs	r1, #0
 8004dc0:	a80e      	add	r0, sp, #56	; 0x38
 8004dc2:	f000 fb81 	bl	80054c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	9309      	str	r3, [sp, #36]	; 0x24
 8004dca:	930a      	str	r3, [sp, #40]	; 0x28
 8004dcc:	930b      	str	r3, [sp, #44]	; 0x2c
 8004dce:	930c      	str	r3, [sp, #48]	; 0x30
 8004dd0:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004dd2:	9303      	str	r3, [sp, #12]
 8004dd4:	9304      	str	r3, [sp, #16]
 8004dd6:	9305      	str	r3, [sp, #20]
 8004dd8:	9306      	str	r3, [sp, #24]
 8004dda:	9307      	str	r3, [sp, #28]
 8004ddc:	9308      	str	r3, [sp, #32]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004dde:	9301      	str	r3, [sp, #4]
 8004de0:	4a26      	ldr	r2, [pc, #152]	; (8004e7c <SystemClock_Config+0xc4>)
 8004de2:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8004de4:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8004de8:	6411      	str	r1, [r2, #64]	; 0x40
 8004dea:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004dec:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8004df0:	9201      	str	r2, [sp, #4]
 8004df2:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004df4:	9302      	str	r3, [sp, #8]
 8004df6:	4b22      	ldr	r3, [pc, #136]	; (8004e80 <SystemClock_Config+0xc8>)
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004dfe:	601a      	str	r2, [r3, #0]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004e06:	9302      	str	r3, [sp, #8]
 8004e08:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004e0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004e12:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004e14:	2302      	movs	r3, #2
 8004e16:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004e18:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004e1c:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004e1e:	2304      	movs	r3, #4
 8004e20:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8004e22:	22c0      	movs	r2, #192	; 0xc0
 8004e24:	9217      	str	r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8004e26:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8004e28:	2308      	movs	r3, #8
 8004e2a:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004e2c:	a80e      	add	r0, sp, #56	; 0x38
 8004e2e:	f7fd fef3 	bl	8002c18 <HAL_RCC_OscConfig>
 8004e32:	b9e8      	cbnz	r0, 8004e70 <SystemClock_Config+0xb8>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004e34:	230f      	movs	r3, #15
 8004e36:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004e38:	2302      	movs	r3, #2
 8004e3a:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004e40:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8004e44:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004e46:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004e48:	2103      	movs	r1, #3
 8004e4a:	a809      	add	r0, sp, #36	; 0x24
 8004e4c:	f7fe f91c 	bl	8003088 <HAL_RCC_ClockConfig>
 8004e50:	b980      	cbnz	r0, 8004e74 <SystemClock_Config+0xbc>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8004e52:	2301      	movs	r3, #1
 8004e54:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8004e56:	23c8      	movs	r3, #200	; 0xc8
 8004e58:	9305      	str	r3, [sp, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8004e5a:	2305      	movs	r3, #5
 8004e5c:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8004e5e:	2302      	movs	r3, #2
 8004e60:	9306      	str	r3, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004e62:	a803      	add	r0, sp, #12
 8004e64:	f7fe fa00 	bl	8003268 <HAL_RCCEx_PeriphCLKConfig>
 8004e68:	b930      	cbnz	r0, 8004e78 <SystemClock_Config+0xc0>
}
 8004e6a:	b01b      	add	sp, #108	; 0x6c
 8004e6c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8004e70:	f7ff ff16 	bl	8004ca0 <Error_Handler>
    Error_Handler();
 8004e74:	f7ff ff14 	bl	8004ca0 <Error_Handler>
    Error_Handler();
 8004e78:	f7ff ff12 	bl	8004ca0 <Error_Handler>
 8004e7c:	40023800 	.word	0x40023800
 8004e80:	40007000 	.word	0x40007000

08004e84 <main>:
{
 8004e84:	b500      	push	{lr}
 8004e86:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8004e88:	f7fb fb2a 	bl	80004e0 <HAL_Init>
  SystemClock_Config();
 8004e8c:	f7ff ff94 	bl	8004db8 <SystemClock_Config>
  MX_GPIO_Init();
 8004e90:	f7ff fdee 	bl	8004a70 <MX_GPIO_Init>
  MX_DMA_Init();
 8004e94:	f7ff feb2 	bl	8004bfc <MX_DMA_Init>
  MX_I2C1_Init();
 8004e98:	f7ff ff04 	bl	8004ca4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8004e9c:	f7ff ff1e 	bl	8004cdc <MX_SPI1_Init>
  MX_USB_OTG_FS_HCD_Init();
 8004ea0:	f7ff ff3c 	bl	8004d1c <MX_USB_OTG_FS_HCD_Init>
  MX_I2S2_Init();
 8004ea4:	f7ff ff50 	bl	8004d48 <MX_I2S2_Init>
  MX_I2S3_Init();
 8004ea8:	f7ff ff6a 	bl	8004d80 <MX_I2S3_Init>
  HAL_Delay(500);
 8004eac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004eb0:	f7fb fb42 	bl	8000538 <HAL_Delay>
  BNO055_Init(&hi2c1);
 8004eb4:	480d      	ldr	r0, [pc, #52]	; (8004eec <main+0x68>)
 8004eb6:	f7ff fdbd 	bl	8004a34 <BNO055_Init>
  xTaskCreate(Madgwick_Task,
 8004eba:	2600      	movs	r6, #0
 8004ebc:	9601      	str	r6, [sp, #4]
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	9300      	str	r3, [sp, #0]
 8004ec2:	4633      	mov	r3, r6
 8004ec4:	2280      	movs	r2, #128	; 0x80
 8004ec6:	490a      	ldr	r1, [pc, #40]	; (8004ef0 <main+0x6c>)
 8004ec8:	480a      	ldr	r0, [pc, #40]	; (8004ef4 <main+0x70>)
 8004eca:	f7ff f8bb 	bl	8004044 <xTaskCreate>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8004ece:	ac03      	add	r4, sp, #12
 8004ed0:	4d09      	ldr	r5, [pc, #36]	; (8004ef8 <main+0x74>)
 8004ed2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ed4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ed6:	682b      	ldr	r3, [r5, #0]
 8004ed8:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8004eda:	4631      	mov	r1, r6
 8004edc:	a803      	add	r0, sp, #12
 8004ede:	f7fe ff25 	bl	8003d2c <osThreadCreate>
 8004ee2:	4b06      	ldr	r3, [pc, #24]	; (8004efc <main+0x78>)
 8004ee4:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8004ee6:	f7fe ff1c 	bl	8003d22 <osKernelStart>
 8004eea:	e7fe      	b.n	8004eea <main+0x66>
 8004eec:	20003da0 	.word	0x20003da0
 8004ef0:	08005534 	.word	0x08005534
 8004ef4:	08004a61 	.word	0x08004a61
 8004ef8:	080054f8 	.word	0x080054f8
 8004efc:	20003d98 	.word	0x20003d98

08004f00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f00:	b500      	push	{lr}
 8004f02:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f04:	2200      	movs	r2, #0
 8004f06:	9200      	str	r2, [sp, #0]
 8004f08:	4b0d      	ldr	r3, [pc, #52]	; (8004f40 <HAL_MspInit+0x40>)
 8004f0a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004f0c:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8004f10:	6459      	str	r1, [r3, #68]	; 0x44
 8004f12:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004f14:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8004f18:	9100      	str	r1, [sp, #0]
 8004f1a:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f1c:	9201      	str	r2, [sp, #4]
 8004f1e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004f20:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8004f24:	6419      	str	r1, [r3, #64]	; 0x40
 8004f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f2c:	9301      	str	r3, [sp, #4]
 8004f2e:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004f30:	210f      	movs	r1, #15
 8004f32:	f06f 0001 	mvn.w	r0, #1
 8004f36:	f7fb fb25 	bl	8000584 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f3a:	b003      	add	sp, #12
 8004f3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f40:	40023800 	.word	0x40023800

08004f44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004f44:	b570      	push	{r4, r5, r6, lr}
 8004f46:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f48:	2300      	movs	r3, #0
 8004f4a:	9303      	str	r3, [sp, #12]
 8004f4c:	9304      	str	r3, [sp, #16]
 8004f4e:	9305      	str	r3, [sp, #20]
 8004f50:	9306      	str	r3, [sp, #24]
 8004f52:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 8004f54:	6802      	ldr	r2, [r0, #0]
 8004f56:	4b2a      	ldr	r3, [pc, #168]	; (8005000 <HAL_I2C_MspInit+0xbc>)
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d001      	beq.n	8004f60 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004f5c:	b008      	add	sp, #32
 8004f5e:	bd70      	pop	{r4, r5, r6, pc}
 8004f60:	4604      	mov	r4, r0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f62:	2500      	movs	r5, #0
 8004f64:	9501      	str	r5, [sp, #4]
 8004f66:	4e27      	ldr	r6, [pc, #156]	; (8005004 <HAL_I2C_MspInit+0xc0>)
 8004f68:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8004f6a:	f043 0302 	orr.w	r3, r3, #2
 8004f6e:	6333      	str	r3, [r6, #48]	; 0x30
 8004f70:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	9301      	str	r3, [sp, #4]
 8004f78:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8004f7a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8004f7e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004f80:	2312      	movs	r3, #18
 8004f82:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f84:	2301      	movs	r3, #1
 8004f86:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004f88:	2304      	movs	r3, #4
 8004f8a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f8c:	a903      	add	r1, sp, #12
 8004f8e:	481e      	ldr	r0, [pc, #120]	; (8005008 <HAL_I2C_MspInit+0xc4>)
 8004f90:	f7fb fd06 	bl	80009a0 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004f94:	9502      	str	r5, [sp, #8]
 8004f96:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8004f98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f9c:	6433      	str	r3, [r6, #64]	; 0x40
 8004f9e:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8004fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fa4:	9302      	str	r3, [sp, #8]
 8004fa6:	9b02      	ldr	r3, [sp, #8]
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8004fa8:	4818      	ldr	r0, [pc, #96]	; (800500c <HAL_I2C_MspInit+0xc8>)
 8004faa:	4b19      	ldr	r3, [pc, #100]	; (8005010 <HAL_I2C_MspInit+0xcc>)
 8004fac:	6003      	str	r3, [r0, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8004fae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fb2:	6043      	str	r3, [r0, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004fb4:	6085      	str	r5, [r0, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004fb6:	60c5      	str	r5, [r0, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004fb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fbc:	6103      	str	r3, [r0, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004fbe:	6145      	str	r5, [r0, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004fc0:	6185      	str	r5, [r0, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8004fc2:	61c5      	str	r5, [r0, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004fc4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8004fc8:	6203      	str	r3, [r0, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004fca:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8004fcc:	f7fb fb80 	bl	80006d0 <HAL_DMA_Init>
 8004fd0:	b998      	cbnz	r0, 8004ffa <HAL_I2C_MspInit+0xb6>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8004fd2:	4b0e      	ldr	r3, [pc, #56]	; (800500c <HAL_I2C_MspInit+0xc8>)
 8004fd4:	63a3      	str	r3, [r4, #56]	; 0x38
 8004fd6:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8004fd8:	2200      	movs	r2, #0
 8004fda:	2105      	movs	r1, #5
 8004fdc:	201f      	movs	r0, #31
 8004fde:	f7fb fad1 	bl	8000584 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004fe2:	201f      	movs	r0, #31
 8004fe4:	f7fb fb02 	bl	80005ec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8004fe8:	2200      	movs	r2, #0
 8004fea:	2105      	movs	r1, #5
 8004fec:	2020      	movs	r0, #32
 8004fee:	f7fb fac9 	bl	8000584 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004ff2:	2020      	movs	r0, #32
 8004ff4:	f7fb fafa 	bl	80005ec <HAL_NVIC_EnableIRQ>
}
 8004ff8:	e7b0      	b.n	8004f5c <HAL_I2C_MspInit+0x18>
      Error_Handler();
 8004ffa:	f7ff fe51 	bl	8004ca0 <Error_Handler>
 8004ffe:	e7e8      	b.n	8004fd2 <HAL_I2C_MspInit+0x8e>
 8005000:	40005400 	.word	0x40005400
 8005004:	40023800 	.word	0x40023800
 8005008:	40020400 	.word	0x40020400
 800500c:	20003e30 	.word	0x20003e30
 8005010:	40026010 	.word	0x40026010

08005014 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8005014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005016:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005018:	2300      	movs	r3, #0
 800501a:	9307      	str	r3, [sp, #28]
 800501c:	9308      	str	r3, [sp, #32]
 800501e:	9309      	str	r3, [sp, #36]	; 0x24
 8005020:	930a      	str	r3, [sp, #40]	; 0x28
 8005022:	930b      	str	r3, [sp, #44]	; 0x2c
  if(hi2s->Instance==SPI2)
 8005024:	6803      	ldr	r3, [r0, #0]
 8005026:	4a40      	ldr	r2, [pc, #256]	; (8005128 <HAL_I2S_MspInit+0x114>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d004      	beq.n	8005036 <HAL_I2S_MspInit+0x22>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(hi2s->Instance==SPI3)
 800502c:	4a3f      	ldr	r2, [pc, #252]	; (800512c <HAL_I2S_MspInit+0x118>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d043      	beq.n	80050ba <HAL_I2S_MspInit+0xa6>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8005032:	b00d      	add	sp, #52	; 0x34
 8005034:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005036:	2400      	movs	r4, #0
 8005038:	9401      	str	r4, [sp, #4]
 800503a:	4b3d      	ldr	r3, [pc, #244]	; (8005130 <HAL_I2S_MspInit+0x11c>)
 800503c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800503e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005042:	641a      	str	r2, [r3, #64]	; 0x40
 8005044:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005046:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800504a:	9201      	str	r2, [sp, #4]
 800504c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800504e:	9402      	str	r4, [sp, #8]
 8005050:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005052:	f042 0204 	orr.w	r2, r2, #4
 8005056:	631a      	str	r2, [r3, #48]	; 0x30
 8005058:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800505a:	f002 0204 	and.w	r2, r2, #4
 800505e:	9202      	str	r2, [sp, #8]
 8005060:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005062:	9403      	str	r4, [sp, #12]
 8005064:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005066:	f042 0202 	orr.w	r2, r2, #2
 800506a:	631a      	str	r2, [r3, #48]	; 0x30
 800506c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	9303      	str	r3, [sp, #12]
 8005074:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005076:	2304      	movs	r3, #4
 8005078:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800507a:	2502      	movs	r5, #2
 800507c:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 800507e:	2306      	movs	r3, #6
 8005080:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005082:	4f2c      	ldr	r7, [pc, #176]	; (8005134 <HAL_I2S_MspInit+0x120>)
 8005084:	a907      	add	r1, sp, #28
 8005086:	4638      	mov	r0, r7
 8005088:	f7fb fc8a 	bl	80009a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800508c:	2308      	movs	r3, #8
 800508e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005090:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005092:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005094:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005096:	2605      	movs	r6, #5
 8005098:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800509a:	a907      	add	r1, sp, #28
 800509c:	4638      	mov	r0, r7
 800509e:	f7fb fc7f 	bl	80009a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80050a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80050a6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050a8:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050aa:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050ac:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80050ae:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050b0:	a907      	add	r1, sp, #28
 80050b2:	4821      	ldr	r0, [pc, #132]	; (8005138 <HAL_I2S_MspInit+0x124>)
 80050b4:	f7fb fc74 	bl	80009a0 <HAL_GPIO_Init>
 80050b8:	e7bb      	b.n	8005032 <HAL_I2S_MspInit+0x1e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80050ba:	2400      	movs	r4, #0
 80050bc:	9404      	str	r4, [sp, #16]
 80050be:	4b1c      	ldr	r3, [pc, #112]	; (8005130 <HAL_I2S_MspInit+0x11c>)
 80050c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050c6:	641a      	str	r2, [r3, #64]	; 0x40
 80050c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050ca:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80050ce:	9204      	str	r2, [sp, #16]
 80050d0:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050d2:	9405      	str	r4, [sp, #20]
 80050d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050d6:	f042 0201 	orr.w	r2, r2, #1
 80050da:	631a      	str	r2, [r3, #48]	; 0x30
 80050dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050de:	f002 0201 	and.w	r2, r2, #1
 80050e2:	9205      	str	r2, [sp, #20]
 80050e4:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80050e6:	9406      	str	r4, [sp, #24]
 80050e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050ea:	f042 0204 	orr.w	r2, r2, #4
 80050ee:	631a      	str	r2, [r3, #48]	; 0x30
 80050f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f2:	f003 0304 	and.w	r3, r3, #4
 80050f6:	9306      	str	r3, [sp, #24]
 80050f8:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80050fa:	2310      	movs	r3, #16
 80050fc:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050fe:	2602      	movs	r6, #2
 8005100:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005102:	2506      	movs	r5, #6
 8005104:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8005106:	a907      	add	r1, sp, #28
 8005108:	480c      	ldr	r0, [pc, #48]	; (800513c <HAL_I2S_MspInit+0x128>)
 800510a:	f7fb fc49 	bl	80009a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800510e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8005112:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005114:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005116:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005118:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800511a:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800511c:	a907      	add	r1, sp, #28
 800511e:	4805      	ldr	r0, [pc, #20]	; (8005134 <HAL_I2S_MspInit+0x120>)
 8005120:	f7fb fc3e 	bl	80009a0 <HAL_GPIO_Init>
}
 8005124:	e785      	b.n	8005032 <HAL_I2S_MspInit+0x1e>
 8005126:	bf00      	nop
 8005128:	40003800 	.word	0x40003800
 800512c:	40003c00 	.word	0x40003c00
 8005130:	40023800 	.word	0x40023800
 8005134:	40020800 	.word	0x40020800
 8005138:	40020400 	.word	0x40020400
 800513c:	40020000 	.word	0x40020000

08005140 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005140:	b530      	push	{r4, r5, lr}
 8005142:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005144:	2300      	movs	r3, #0
 8005146:	9303      	str	r3, [sp, #12]
 8005148:	9304      	str	r3, [sp, #16]
 800514a:	9305      	str	r3, [sp, #20]
 800514c:	9306      	str	r3, [sp, #24]
 800514e:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 8005150:	6802      	ldr	r2, [r0, #0]
 8005152:	4b35      	ldr	r3, [pc, #212]	; (8005228 <HAL_SPI_MspInit+0xe8>)
 8005154:	429a      	cmp	r2, r3
 8005156:	d001      	beq.n	800515c <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005158:	b009      	add	sp, #36	; 0x24
 800515a:	bd30      	pop	{r4, r5, pc}
 800515c:	4604      	mov	r4, r0
    __HAL_RCC_SPI1_CLK_ENABLE();
 800515e:	2500      	movs	r5, #0
 8005160:	9501      	str	r5, [sp, #4]
 8005162:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8005166:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005168:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800516c:	645a      	str	r2, [r3, #68]	; 0x44
 800516e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005170:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005174:	9201      	str	r2, [sp, #4]
 8005176:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005178:	9502      	str	r5, [sp, #8]
 800517a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800517c:	f042 0201 	orr.w	r2, r2, #1
 8005180:	631a      	str	r2, [r3, #48]	; 0x30
 8005182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005184:	f003 0301 	and.w	r3, r3, #1
 8005188:	9302      	str	r3, [sp, #8]
 800518a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800518c:	23e0      	movs	r3, #224	; 0xe0
 800518e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005190:	2302      	movs	r3, #2
 8005192:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005194:	2303      	movs	r3, #3
 8005196:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005198:	2305      	movs	r3, #5
 800519a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800519c:	a903      	add	r1, sp, #12
 800519e:	4823      	ldr	r0, [pc, #140]	; (800522c <HAL_SPI_MspInit+0xec>)
 80051a0:	f7fb fbfe 	bl	80009a0 <HAL_GPIO_Init>
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80051a4:	4822      	ldr	r0, [pc, #136]	; (8005230 <HAL_SPI_MspInit+0xf0>)
 80051a6:	4b23      	ldr	r3, [pc, #140]	; (8005234 <HAL_SPI_MspInit+0xf4>)
 80051a8:	6003      	str	r3, [r0, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80051aa:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 80051ae:	6043      	str	r3, [r0, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80051b0:	6085      	str	r5, [r0, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80051b2:	60c5      	str	r5, [r0, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80051b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051b8:	6103      	str	r3, [r0, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80051ba:	6145      	str	r5, [r0, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80051bc:	6185      	str	r5, [r0, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80051be:	61c5      	str	r5, [r0, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80051c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051c4:	6203      	str	r3, [r0, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80051c6:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80051c8:	f7fb fa82 	bl	80006d0 <HAL_DMA_Init>
 80051cc:	bb28      	cbnz	r0, 800521a <HAL_SPI_MspInit+0xda>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80051ce:	4b18      	ldr	r3, [pc, #96]	; (8005230 <HAL_SPI_MspInit+0xf0>)
 80051d0:	64e3      	str	r3, [r4, #76]	; 0x4c
 80051d2:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_spi1_tx.Instance = DMA2_Stream2;
 80051d4:	4818      	ldr	r0, [pc, #96]	; (8005238 <HAL_SPI_MspInit+0xf8>)
 80051d6:	4b19      	ldr	r3, [pc, #100]	; (800523c <HAL_SPI_MspInit+0xfc>)
 80051d8:	6003      	str	r3, [r0, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 80051da:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80051de:	6043      	str	r3, [r0, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80051e0:	2340      	movs	r3, #64	; 0x40
 80051e2:	6083      	str	r3, [r0, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80051e4:	2300      	movs	r3, #0
 80051e6:	60c3      	str	r3, [r0, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80051e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051ec:	6102      	str	r2, [r0, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80051ee:	6143      	str	r3, [r0, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80051f0:	6183      	str	r3, [r0, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80051f2:	61c3      	str	r3, [r0, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80051f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80051f8:	6202      	str	r2, [r0, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80051fa:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80051fc:	f7fb fa68 	bl	80006d0 <HAL_DMA_Init>
 8005200:	b970      	cbnz	r0, 8005220 <HAL_SPI_MspInit+0xe0>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8005202:	4b0d      	ldr	r3, [pc, #52]	; (8005238 <HAL_SPI_MspInit+0xf8>)
 8005204:	64a3      	str	r3, [r4, #72]	; 0x48
 8005206:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8005208:	2200      	movs	r2, #0
 800520a:	2105      	movs	r1, #5
 800520c:	2023      	movs	r0, #35	; 0x23
 800520e:	f7fb f9b9 	bl	8000584 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8005212:	2023      	movs	r0, #35	; 0x23
 8005214:	f7fb f9ea 	bl	80005ec <HAL_NVIC_EnableIRQ>
}
 8005218:	e79e      	b.n	8005158 <HAL_SPI_MspInit+0x18>
      Error_Handler();
 800521a:	f7ff fd41 	bl	8004ca0 <Error_Handler>
 800521e:	e7d6      	b.n	80051ce <HAL_SPI_MspInit+0x8e>
      Error_Handler();
 8005220:	f7ff fd3e 	bl	8004ca0 <Error_Handler>
 8005224:	e7ed      	b.n	8005202 <HAL_SPI_MspInit+0xc2>
 8005226:	bf00      	nop
 8005228:	40013000 	.word	0x40013000
 800522c:	40020000 	.word	0x40020000
 8005230:	20004194 	.word	0x20004194
 8005234:	40026410 	.word	0x40026410
 8005238:	200041f4 	.word	0x200041f4
 800523c:	40026440 	.word	0x40026440

08005240 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8005240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005242:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005244:	2300      	movs	r3, #0
 8005246:	9303      	str	r3, [sp, #12]
 8005248:	9304      	str	r3, [sp, #16]
 800524a:	9305      	str	r3, [sp, #20]
 800524c:	9306      	str	r3, [sp, #24]
 800524e:	9307      	str	r3, [sp, #28]
  if(hhcd->Instance==USB_OTG_FS)
 8005250:	6803      	ldr	r3, [r0, #0]
 8005252:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005256:	d001      	beq.n	800525c <HAL_HCD_MspInit+0x1c>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8005258:	b009      	add	sp, #36	; 0x24
 800525a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800525c:	2500      	movs	r5, #0
 800525e:	9501      	str	r5, [sp, #4]
 8005260:	4c1c      	ldr	r4, [pc, #112]	; (80052d4 <HAL_HCD_MspInit+0x94>)
 8005262:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005264:	f043 0301 	orr.w	r3, r3, #1
 8005268:	6323      	str	r3, [r4, #48]	; 0x30
 800526a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800526c:	f003 0301 	and.w	r3, r3, #1
 8005270:	9301      	str	r3, [sp, #4]
 8005272:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8005274:	ae08      	add	r6, sp, #32
 8005276:	f44f 7300 	mov.w	r3, #512	; 0x200
 800527a:	f846 3d14 	str.w	r3, [r6, #-20]!
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800527e:	4f16      	ldr	r7, [pc, #88]	; (80052d8 <HAL_HCD_MspInit+0x98>)
 8005280:	4631      	mov	r1, r6
 8005282:	4638      	mov	r0, r7
 8005284:	f7fb fb8c 	bl	80009a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8005288:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800528c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800528e:	2302      	movs	r3, #2
 8005290:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005292:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005294:	2303      	movs	r3, #3
 8005296:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005298:	230a      	movs	r3, #10
 800529a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800529c:	4631      	mov	r1, r6
 800529e:	4638      	mov	r0, r7
 80052a0:	f7fb fb7e 	bl	80009a0 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80052a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80052a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052aa:	6363      	str	r3, [r4, #52]	; 0x34
 80052ac:	9502      	str	r5, [sp, #8]
 80052ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80052b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052b4:	6463      	str	r3, [r4, #68]	; 0x44
 80052b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80052b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052bc:	9302      	str	r3, [sp, #8]
 80052be:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80052c0:	462a      	mov	r2, r5
 80052c2:	2105      	movs	r1, #5
 80052c4:	2043      	movs	r0, #67	; 0x43
 80052c6:	f7fb f95d 	bl	8000584 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80052ca:	2043      	movs	r0, #67	; 0x43
 80052cc:	f7fb f98e 	bl	80005ec <HAL_NVIC_EnableIRQ>
}
 80052d0:	e7c2      	b.n	8005258 <HAL_HCD_MspInit+0x18>
 80052d2:	bf00      	nop
 80052d4:	40023800 	.word	0x40023800
 80052d8:	40020000 	.word	0x40020000

080052dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80052dc:	b510      	push	{r4, lr}
 80052de:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0); 
 80052e0:	2200      	movs	r2, #0
 80052e2:	4601      	mov	r1, r0
 80052e4:	201a      	movs	r0, #26
 80052e6:	f7fb f94d 	bl	8000584 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn); 
 80052ea:	201a      	movs	r0, #26
 80052ec:	f7fb f97e 	bl	80005ec <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 80052f0:	2400      	movs	r4, #0
 80052f2:	9401      	str	r4, [sp, #4]
 80052f4:	4b13      	ldr	r3, [pc, #76]	; (8005344 <HAL_InitTick+0x68>)
 80052f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052f8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80052fc:	645a      	str	r2, [r3, #68]	; 0x44
 80052fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005300:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005304:	9301      	str	r3, [sp, #4]
 8005306:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005308:	a902      	add	r1, sp, #8
 800530a:	a803      	add	r0, sp, #12
 800530c:	f7fd ff8e 	bl	800322c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005310:	f7fd ff7c 	bl	800320c <HAL_RCC_GetPCLK2Freq>
   
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8005314:	4b0c      	ldr	r3, [pc, #48]	; (8005348 <HAL_InitTick+0x6c>)
 8005316:	fba3 2300 	umull	r2, r3, r3, r0
 800531a:	0c9b      	lsrs	r3, r3, #18
 800531c:	3b01      	subs	r3, #1
  
  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 800531e:	480b      	ldr	r0, [pc, #44]	; (800534c <HAL_InitTick+0x70>)
 8005320:	4a0b      	ldr	r2, [pc, #44]	; (8005350 <HAL_InitTick+0x74>)
 8005322:	6002      	str	r2, [r0, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000 / 1000) - 1;
 8005324:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005328:	60c2      	str	r2, [r0, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 800532a:	6043      	str	r3, [r0, #4]
  htim11.Init.ClockDivision = 0;
 800532c:	6104      	str	r4, [r0, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800532e:	6084      	str	r4, [r0, #8]
  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 8005330:	f7fe fa74 	bl	800381c <HAL_TIM_Base_Init>
 8005334:	b110      	cbz	r0, 800533c <HAL_InitTick+0x60>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8005336:	2001      	movs	r0, #1
}
 8005338:	b008      	add	sp, #32
 800533a:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim11);
 800533c:	4803      	ldr	r0, [pc, #12]	; (800534c <HAL_InitTick+0x70>)
 800533e:	f7fe f956 	bl	80035ee <HAL_TIM_Base_Start_IT>
 8005342:	e7f9      	b.n	8005338 <HAL_InitTick+0x5c>
 8005344:	40023800 	.word	0x40023800
 8005348:	431bde83 	.word	0x431bde83
 800534c:	20004300 	.word	0x20004300
 8005350:	40014800 	.word	0x40014800

08005354 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005354:	4770      	bx	lr

08005356 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005356:	e7fe      	b.n	8005356 <HardFault_Handler>

08005358 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005358:	e7fe      	b.n	8005358 <MemManage_Handler>

0800535a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800535a:	e7fe      	b.n	800535a <BusFault_Handler>

0800535c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800535c:	e7fe      	b.n	800535c <UsageFault_Handler>

0800535e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800535e:	4770      	bx	lr

08005360 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8005360:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8005362:	4802      	ldr	r0, [pc, #8]	; (800536c <DMA1_Stream0_IRQHandler+0xc>)
 8005364:	f7fb fa2e 	bl	80007c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8005368:	bd08      	pop	{r3, pc}
 800536a:	bf00      	nop
 800536c:	20003e30 	.word	0x20003e30

08005370 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8005370:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8005372:	4802      	ldr	r0, [pc, #8]	; (800537c <TIM1_TRG_COM_TIM11_IRQHandler+0xc>)
 8005374:	f7fe f94b 	bl	800360e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8005378:	bd08      	pop	{r3, pc}
 800537a:	bf00      	nop
 800537c:	20004300 	.word	0x20004300

08005380 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005380:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005382:	4802      	ldr	r0, [pc, #8]	; (800538c <I2C1_EV_IRQHandler+0xc>)
 8005384:	f7fc ffe4 	bl	8002350 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8005388:	bd08      	pop	{r3, pc}
 800538a:	bf00      	nop
 800538c:	20003da0 	.word	0x20003da0

08005390 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005390:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005392:	4802      	ldr	r0, [pc, #8]	; (800539c <I2C1_ER_IRQHandler+0xc>)
 8005394:	f7fd f890 	bl	80024b8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8005398:	bd08      	pop	{r3, pc}
 800539a:	bf00      	nop
 800539c:	20003da0 	.word	0x20003da0

080053a0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80053a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80053a2:	4802      	ldr	r0, [pc, #8]	; (80053ac <SPI1_IRQHandler+0xc>)
 80053a4:	f7fe f896 	bl	80034d4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80053a8:	bd08      	pop	{r3, pc}
 80053aa:	bf00      	nop
 80053ac:	20003e98 	.word	0x20003e98

080053b0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80053b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80053b2:	4802      	ldr	r0, [pc, #8]	; (80053bc <DMA2_Stream0_IRQHandler+0xc>)
 80053b4:	f7fb fa06 	bl	80007c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80053b8:	bd08      	pop	{r3, pc}
 80053ba:	bf00      	nop
 80053bc:	20004194 	.word	0x20004194

080053c0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80053c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80053c2:	4802      	ldr	r0, [pc, #8]	; (80053cc <DMA2_Stream2_IRQHandler+0xc>)
 80053c4:	f7fb f9fe 	bl	80007c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80053c8:	bd08      	pop	{r3, pc}
 80053ca:	bf00      	nop
 80053cc:	200041f4 	.word	0x200041f4

080053d0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80053d0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80053d2:	4802      	ldr	r0, [pc, #8]	; (80053dc <OTG_FS_IRQHandler+0xc>)
 80053d4:	f7fb ff33 	bl	800123e <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80053d8:	bd08      	pop	{r3, pc}
 80053da:	bf00      	nop
 80053dc:	20003ef4 	.word	0x20003ef4

080053e0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80053e0:	490f      	ldr	r1, [pc, #60]	; (8005420 <SystemInit+0x40>)
 80053e2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80053e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80053ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80053ee:	4b0d      	ldr	r3, [pc, #52]	; (8005424 <SystemInit+0x44>)
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	f042 0201 	orr.w	r2, r2, #1
 80053f6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80053f8:	2000      	movs	r0, #0
 80053fa:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8005402:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005406:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005408:	4a07      	ldr	r2, [pc, #28]	; (8005428 <SystemInit+0x48>)
 800540a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005412:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005414:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005416:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800541a:	608b      	str	r3, [r1, #8]
#endif
}
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	e000ed00 	.word	0xe000ed00
 8005424:	40023800 	.word	0x40023800
 8005428:	24003010 	.word	0x24003010

0800542c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800542c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005464 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005430:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005432:	e003      	b.n	800543c <LoopCopyDataInit>

08005434 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005434:	4b0c      	ldr	r3, [pc, #48]	; (8005468 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005436:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005438:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800543a:	3104      	adds	r1, #4

0800543c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800543c:	480b      	ldr	r0, [pc, #44]	; (800546c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800543e:	4b0c      	ldr	r3, [pc, #48]	; (8005470 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005440:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005442:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005444:	d3f6      	bcc.n	8005434 <CopyDataInit>
  ldr  r2, =_sbss
 8005446:	4a0b      	ldr	r2, [pc, #44]	; (8005474 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005448:	e002      	b.n	8005450 <LoopFillZerobss>

0800544a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800544a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800544c:	f842 3b04 	str.w	r3, [r2], #4

08005450 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005450:	4b09      	ldr	r3, [pc, #36]	; (8005478 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005452:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005454:	d3f9      	bcc.n	800544a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005456:	f7ff ffc3 	bl	80053e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800545a:	f000 f811 	bl	8005480 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800545e:	f7ff fd11 	bl	8004e84 <main>
  bx  lr    
 8005462:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005464:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005468:	08005560 	.word	0x08005560
  ldr  r0, =_sdata
 800546c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005470:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8005474:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8005478:	2000433c 	.word	0x2000433c

0800547c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800547c:	e7fe      	b.n	800547c <ADC_IRQHandler>
	...

08005480 <__libc_init_array>:
 8005480:	b570      	push	{r4, r5, r6, lr}
 8005482:	4e0d      	ldr	r6, [pc, #52]	; (80054b8 <__libc_init_array+0x38>)
 8005484:	4c0d      	ldr	r4, [pc, #52]	; (80054bc <__libc_init_array+0x3c>)
 8005486:	1ba4      	subs	r4, r4, r6
 8005488:	10a4      	asrs	r4, r4, #2
 800548a:	2500      	movs	r5, #0
 800548c:	42a5      	cmp	r5, r4
 800548e:	d109      	bne.n	80054a4 <__libc_init_array+0x24>
 8005490:	4e0b      	ldr	r6, [pc, #44]	; (80054c0 <__libc_init_array+0x40>)
 8005492:	4c0c      	ldr	r4, [pc, #48]	; (80054c4 <__libc_init_array+0x44>)
 8005494:	f000 f820 	bl	80054d8 <_init>
 8005498:	1ba4      	subs	r4, r4, r6
 800549a:	10a4      	asrs	r4, r4, #2
 800549c:	2500      	movs	r5, #0
 800549e:	42a5      	cmp	r5, r4
 80054a0:	d105      	bne.n	80054ae <__libc_init_array+0x2e>
 80054a2:	bd70      	pop	{r4, r5, r6, pc}
 80054a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80054a8:	4798      	blx	r3
 80054aa:	3501      	adds	r5, #1
 80054ac:	e7ee      	b.n	800548c <__libc_init_array+0xc>
 80054ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80054b2:	4798      	blx	r3
 80054b4:	3501      	adds	r5, #1
 80054b6:	e7f2      	b.n	800549e <__libc_init_array+0x1e>
 80054b8:	08005558 	.word	0x08005558
 80054bc:	08005558 	.word	0x08005558
 80054c0:	08005558 	.word	0x08005558
 80054c4:	0800555c 	.word	0x0800555c

080054c8 <memset>:
 80054c8:	4402      	add	r2, r0
 80054ca:	4603      	mov	r3, r0
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d100      	bne.n	80054d2 <memset+0xa>
 80054d0:	4770      	bx	lr
 80054d2:	f803 1b01 	strb.w	r1, [r3], #1
 80054d6:	e7f9      	b.n	80054cc <memset+0x4>

080054d8 <_init>:
 80054d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054da:	bf00      	nop
 80054dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054de:	bc08      	pop	{r3}
 80054e0:	469e      	mov	lr, r3
 80054e2:	4770      	bx	lr

080054e4 <_fini>:
 80054e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054e6:	bf00      	nop
 80054e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ea:	bc08      	pop	{r3}
 80054ec:	469e      	mov	lr, r3
 80054ee:	4770      	bx	lr
